<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenLayers.Base</name>
    </assembly>
    <members>
        <member name="T:OpenLayers.DeviceCollection.HardwareInfo">
            <summary>
            This structure is used by the <see cref="M:OpenLayers.DeviceCollection.Device.GetHardwareInfo"/> method 
            to return information about a Open Layers-compliant device collection.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.HardwareInfo.VendorId">
             <summary> 
             The identification number of the vendor. For most devices, this is 0x087 hexadecimal.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.HardwareInfo.CollectionId">
            <summary> 
            This field contains a unique collection ID value that is generated using
            the addition of the last two digits of the year multiplied by 10e7 (0 - 990000000) 
            and the number of minutes into the current year (0 - 527040).
            Valid values for this field are 0 - 990527040;
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.HardwareInfo.NumberOfDevices">
            <summary>
            This field contains the number of devices in the collection.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.Range">
            <summary>
            This class is used by the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRange"/> and  
            <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.SupportedVoltageRanges"/> methods to return the lower and upper limits 
            of the voltage range for an analog subsystem.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Range.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of a Range object with
            the specified lower and upper limits of the voltage range.
            </summary>
            <param name="low">Gets or sets the lower limit of the voltage range.</param>
            <param name="high">Gets or sets the upper limit of the voltage range.</param>
        </member>
        <member name="F:OpenLayers.DeviceCollection.Range.low">
            <summary>The lower limit of the voltage range.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.Range.high">
            <summary> The upper limit of the voltage range.</summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Range.Low">
            <summary>
            Gets or sets the lower limit of the voltage range.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Range.High">
            <summary>
            Gets or sets the upper limit of the voltage range.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SingleValuesInfoRaw">
            <summary>
            Used with <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.DeviceCollection.SingleValuesInfoRaw[])"/>, specifies the analog output channel to update
            and the raw count value to output on that channel.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SingleValuesInfoRaw.PhysicalChannel">
            <summary>
            The number of the physical analog output channel to update. 
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SingleValuesInfoRaw.RawValue">
            <summary>
            The raw count value to output on the specified analog output channel. 
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SingleValuesInfoVolts">
            <summary>
            Used with <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.DeviceCollection.SingleValuesInfoVolts[])"/>, specifies the analog output channel to update 
            and the voltage value to output on that channel.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SingleValuesInfoVolts.PhysicalChannel">
            <summary>
            The number of the physical analog output channel to update.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SingleValuesInfoVolts.Voltage">
            <summary>
            The voltage value to output on the specified analog output channel. 
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ChannelDataType">
            <summary>
            Contains the possible values for the ChannelDataType parameter that is used 
            by the <see cref="P:OpenLayers.DeviceCollection.OlBuffer.RawDataFormat"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelDataType.Int16">
            <summary>
            Signed, 16-bit values.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelDataType.Uint16">
            <summary>
            Unsigned, 16-bit values.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelDataType.Int32">
            <summary>
            Signed, 32-bit values.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelDataType.Float">
            <summary>
            32-bit float values.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelDataType.Double">
            <summary>
            64-bit float (double bit) values.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SubsystemType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.SubsystemType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.AnalogInput">
            <summary>
            Analog input subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.AnalogOutput">
            <summary>
            Analog output subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.DigitalInput">
            <summary>
            Digital input subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.DigitalOutput">
            <summary>
            Digital output subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.QuadratureDecoder">
            <summary>
            Quadrature decoder subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.CounterTimer">
            <summary>
            Counter/timer subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemType.Tachometer">
            <summary>
            Tachometer subsystem
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ChannelType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelType.SingleEnded">
            <summary>
            Single-ended channel configuration.  Use this configuration when you want to measure high-level signals, 
            noise is insignificant, the source of the input is close to the device, and all the input signals are 
            referred to the same common ground.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ChannelType.Differential">
            <summary>
            Differential channel configuration. Use this configuration when you want to measure low-level signals 
            (less than 1 V), you are using an A/D converter with high resolution (greater than 12 bits), 
            noise is a significant part of the signal, or common-mode voltage exists.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.Encoding">
            <summary>
            Contains the possible values for the SubsystemBase.<see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Encoding"/> and 
            OlBuffer.<see cref="P:OpenLayers.DeviceCollection.OlBuffer.Encoding"/> properties, and 
            for the Encoding parameter of the <see cref="M:OpenLayers.Base.Utility.VoltsToRawValue(System.Double,OpenLayers.Base.Encoding,System.Double,System.Double,System.Int32)"/> and <see cref="M:OpenLayers.Base.Utility.RawValueToVolts(System.Int32,OpenLayers.Base.Encoding,System.Double,System.Double,System.Int32)"/> methods.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.Encoding.Binary">
            <summary>
            Binary data encoding
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.Encoding.TwosComplement">
            <summary>
            Twos complement data encoding
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.TriggerType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/>, <see cref="P:OpenLayers.DeviceCollection.Trigger.PreTriggerSource"/>, and 
            <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerSource"/> properties.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.TriggerType.Software">
            <summary>
            Software (internal) trigger. The trigger occurs when the <see cref="M:OpenLayers.DeviceCollection.SubsystemBase.Start"/> method is executed.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.TriggerType.TTLPos">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the rising edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.TriggerType.DigitalEvent">
            <summary>
            A trigger is generated when an external digital event occurs.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.TriggerType.TTLNeg">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the falling edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.TriggerType.ThresholdPos">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A positive analog threshold trigger occurs when the device
            detects a positive-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.TriggerType.ThresholdNeg">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A negative analog threshold trigger occurs when the device
            detects a negative-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ClockSource">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.Clock.Source"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ClockSource.Internal">
            <summary>
            The internal clock is the clock source on the
            device that paces data acquisition or output for each channel 
            in the ChannelList, or that is used in a counter/timer operation.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ClockSource.External">
            <summary>
            An external clock source is an input signal attached to the device that
            paces data acquisition or output for each channel 
            in the ChannelList, or that is used in a counter/timer operation. 
            This clock source is useful when you want to operate at rates not 
            available with the internal clock or if you want to operate at uneven intervals.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.DataFlow">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.DataFlow.Continuous">
            <summary>
            Use continuous mode when you want to acquire or output data from multiple channels continuously.
            For analog input operations, this is post-trigger mode.
            For maximum flexibility, you can specify other parameters, such as the ChannelList, clock source
            and frequency, buffer, and so on.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.DataFlow.SingleValue">
            <summary>
            In a single-value operation, a single data value is read from or written 
            to a single channel immediately, and then the operation stops.
            You specify only the channel to read or update, and the gain for the channel.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPreTrigger">
            <summary>
            Use continuous pre-trigger mode when you want to continuously acquire data
            before a specific external trigger event occurs.
            For maximum flexibility, you can specify other parameters, such as the ChannelList, 
            clock source and frequency, buffer, and so on.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPrePostTrigger">
            <summary>
            Use continuous about-trigger mode when you want to continuously acquire data both before and after
            a specific external event occurs. This operation is equivalent to doing both a 
            pre-trigger and a post-trigger acquisition
            For maximum flexibility, you can specify other parameters, such as the ChannelList, clock source
            and frequency, buffer, and so on.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.WrapMode.None">
            <summary>
            The operation continues indefinitely as long as you process the buffers 
            and put them back on the queue in a timely manner. 
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.WrapMode.Single">
            <summary>
            The first buffer is reused continuously. Some devices have a FIFO onboard for 
            analog output (waveform generation) operations. If the buffer fits into the FIFO, 
            the device driver downloads the buffer into the FIFO on the device.
            The driver (or device) outputs the data starting from the first location
            in the buffer. When it reaches the end of the buffer, the driver (or device)
            continues outputting data from the first location of the buffer, and the 
            process continues indefinitely until you stop it. 
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.CouplingType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.Coupling"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.CouplingType.DC">
            <summary>
            DC coupling, where the DC offset is included.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.CouplingType.AC">
            <summary>
            AC coupling, where the DC offset is removed.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ExcitationCurrentSource">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.ExcitationCurrentSource"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ExcitationCurrentSource.Internal">
            <summary> Internal excitation current source. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ExcitationCurrentSource.External">
            <summary> External excitation current source. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ExcitationCurrentSource.Disabled">
            <summary> Excitation current source is disabled (no excitation is applied).</summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ReferenceTriggerType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ReferenceTriggerType.None">
            <summary>
            Triggering is disabled.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ReferenceTriggerType.TTLPos">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the rising edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ReferenceTriggerType.DigitalEvent">
            <summary>
            A trigger is generated when an external digital event occurs.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ReferenceTriggerType.TTLNeg">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the falling edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ReferenceTriggerType.ThresholdPos">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A positive analog threshold trigger occurs when the device
            detects a positive-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ReferenceTriggerType.ThresholdNeg">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A negative analog threshold trigger occurs when the device
            detects a negative-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.IOType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.IOType"/>.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.VoltageIn">
            <summary>
            The channel supports a voltage input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.VoltageOut">
            <summary>
            The channel supports a voltage output.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.DigitalInput">
            <summary>
            The channel supports a digital input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.DigitalOutput">
            <summary>
            The channel supports a digital output.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.QuadratureDecoder">
            <summary>
            The channel supports quadrature decoder operations.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.CounterTimer">
            <summary>
            The channel supports counter/timer operations.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Tachometer">
            <summary>
            The channel supports a tachometer input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Current">
            <summary>
            The channel supports a current input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Thermocouple">
            <summary>
            The channel supports a thermocouple input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Rtd">
            <summary>
            The channel supports an RTD input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.StrainGage">
            <summary>
            The channel supports a stain gage input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Accelerometer">
            <summary>
            The channel supports an IEPE (accelerometer) input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Bridge">
            <summary>
            The channel supports a bridge-based sensor or general-purpose bridge input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Thermistor">
            <summary>
            The channel supports a thermistor input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.Resistance">
            <summary>
            The channel supports a resistance measurement input.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.IOType.MultiSensor">
            <summary>
            The channel supports more than one sensor type. If the <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.IOType"/> propery is MultiSensor, use the
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property or the 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.SupportedMultiSensorTypes"/> property to determine which sensor types are supported for the channel.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.AnalogInputSubsystem">
            <summary>
            The AnalogInputSubsystem class provides the properties, methods, and events for performing analog 
            input operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.AnalogInputSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.AnalogSubsystem">
            <summary>
            The AnalogSubsystem class is an abstract base class and is accessible 
            only by using the following derived classes: <see cref="T:OpenLayers.Base.AnalogInputSubsystem"/> 
            and/or <see cref="T:OpenLayers.Base.AnalogOutputSubsystem"/>.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SubsystemBase">
            <summary>
            The SubsystemBase class is an abstract base class that is accessible from 
            the following derived classes: <see cref="T:OpenLayers.Base.AnalogSubsystem"/> (and its derived classes
            <see cref="T:OpenLayers.Base.AnalogInputSubsystem"/> and <see cref="T:OpenLayers.Base.AnalogOutputSubsystem"/>), 
            <see cref="T:OpenLayers.Base.DigitalInputSubsystem"/>, <see cref="T:OpenLayers.Base.DigitalOutputSubsystem"/>,
            <see cref="T:OpenLayers.Base.CounterTimerSubsystem"/>, and <see cref="T:OpenLayers.Base.QuadratureDecoderSubsystem"/>.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Finalize">
            <summary>
            finalize
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.disposed">
            <summary>
            flag to track dispose call
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Dispose">
             <summary>
             Releases the subsystem’s connection to the Open Layers device. 
             </summary>
             <remarks>
             This method is overridden in derived classes.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Dispose(System.Boolean)">
            <summary>
            disconnect subsystem from the device driver
            </summary>
            <param name="disposing">false if calling from finalize, true otherwise</param>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mBufferQueue">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.BufferQueue"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mDelegates">
            <summary>
            OlDelegates
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mClock">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.Clock"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mTrigger">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.Trigger"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mReferenceTrigger">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.ReferenceTrigger"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mChannelList">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.ChannelList"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mDevice">
            <summary>
            Device that created this subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mElement">
            <summary>
            Returns the element number of the subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mFlushBuffer">
            <summary>
            user buffer to flush samples to
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mNumFlushSamples">
            <summary>
            number of samples flushed
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsACCoupling">
            <summary>
            Supports AC coupling.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsDCCoupling">
            <summary>
            Supports DC coupling.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsInternalCurrentSrc">
            <summary>
            Supports an internal excitation current source.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsExternalCurrentSrc">
            <summary>
            Supports an external excitation current source.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsPerChannelExcitationVoltageSource">
            <summary>
            Excitation voltage can be supplied per individual channel. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsInternalExcitationVoltageSrc">
            <summary>
            Supports an internal excitation voltage source.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsExternalExcitationVoltageSrc">
            <summary>
            Supports an external excitation voltage source.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mMinExcitationVoltageValue">
            <summary>
            The minimum supported excitation voltage.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mMaxExcitationVoltageValue">
            <summary>
            The maximum supported excitation voltage.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mExcitationVoltageValue">
            <summary>
            The current excitation voltage value
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsShuntCalibration">
            <summary>
            Returns true if the hardware supports shunt calibration, false otherwise
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsStrainGage">
            <summary>
            Returns true if the hardware supports Strain Gage inputs, false otherwise
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsBridgeBasedSensors">
            <summary>
            Returns true if the hardware supports Bridge based sensor inputs, false otherwise
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsIepe">
            <summary>
            Returns true if the hardware supports IEPE.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSupportsRemoteSense">
            <summary>
            Returns true if the hardware supports remote sense circuit, false otherwise
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.logger">
            <summary>
            shared logger object
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mPersonalityIntf">
            <summary>
            shared personality dll interface
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mOlError">
            <summary>
            shared OlError object
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Start">
            <summary>
            Starts an operation on the subsystem.
            </summary>
            <remarks>This method is overridden in derived classes.</remarks>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Stop">
            <summary>
            Stops an operation on the subsystem after the current buffer has been filled for input operations or output for output operations.
            </summary>
            <remarks>This method is overridden in derived classes.</remarks>	    
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Reset">
            <summary>
            Stops a continuous operation on a subsystem immediately without waiting for
            the current buffer to be filled or output, and reinitializes the subsystem
            to the default configuration.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Abort">
            <summary>
            Stops an operation on the subsystem immediately. 
            </summary>
            <remarks>This method is overridden in derived classes.</remarks>		
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.Config">
            <summary>
            Configures the subsystem based on the current property settings.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SubsystemBase.SetDefaultConfig">
            <summary>
            set driver config to defaults
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mSubsystemType">
            <summary>
            (Internal use only) Occurs when the subsystem detects a start trigger.
            </summary>
            
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.mWrapMode">
            <summary>
            
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportedChannels">
             <summary>
             Provides an interface to a <see cref="T:OpenLayers.Base.SupportedChannels"/> object.
             </summary>
             <remarks>Use this interface to get information about each channel that is 
             supported by the specified subsystem.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.BufferQueue">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.BufferQueue"/> object.
            </summary>
            <remarks>For continuous analog I/O operations, use this interface to 
            add <see cref="T:OpenLayers.Base.OlBuffer"/> objects to the subsystem's buffer queue.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.Clock">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.Clock"/> object.
            </summary>
            <remarks> Use this interface to configure how a subsystem is clocked.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.Trigger">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.Trigger"/> object.
            </summary>
            <remarks>Use this interface to configure how a subsystem is triggered.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.ReferenceTrigger">
            <summary>
            Provides an interface to <see cref="T:OpenLayers.Base.ReferenceTrigger"/> object.
            </summary>
            <remarks>Use this interface to configure how a subsystem is triggered using stop trigger.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.ChannelList">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.ChannelList"/> object.
            </summary>
            <remarks>Use this interface to set up a channel list for a continuous analog 
            input or output operation.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.Device">
            <summary>
            Returns the <see cref="T:OpenLayers.Base.Device"/> object that is associated with the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.Element">
             <summary>
             Returns the element number of the subsystem.
             </summary>
             <remarks>
             Your device may support multiple instances, called elements, of the same subsystem type. 
             Element numbering is zero-based; that is, the first instance of the subsystem is called element 0, 
             the second instance of the subsystem is called element 1, and so on. For example, if your device
             has two digital input ports, two subsystems of type DigitalInput are available, 
             differentiated as elements 0 and 1.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.State">
            <summary>
            Returns the current state of the subsystem (Initialized, ConfiguredForSingleValue, ConfiguredForContinuous,
            PreStarted, Running, Stopping, Aborting, or IoComplete).
            </summary>
        </member>
        <member name="E:OpenLayers.Base.SubsystemBase.GeneralFailureEvent">
            <summary>
            Occurs when a general library failure is encountered.
            </summary>
        </member>
        <member name="E:OpenLayers.Base.SubsystemBase.DeviceRemovedEvent">
            <summary>
            Occurs when a device is removed from your system while your application is running.
            </summary>
        </member>
        <member name="E:OpenLayers.Base.SubsystemBase.QueueDoneEvent">
            <summary>
            Occurs when no OlBuffer objects are available on the queue and the operation stops.
            </summary>
        </member>
        <member name="E:OpenLayers.Base.SubsystemBase.QueueStoppedEvent">
            <summary>
            For analog input operations, occurs when a pre- or post-trigger acquisition operation 
            completes or when you stop a continuous analog input operation. For analog output operations, 
            occurs when a continuous analog output operation stops and the queue is emptied.  
            </summary>
        </member>
        <member name="E:OpenLayers.Base.SubsystemBase.BufferDoneEvent">
            <summary>
            For input operations, occurs when the OlBuffer object has been filled 
            with post-trigger data. For output operations, occurs when all the data in the OlBuffer object has
            been output. 
            If you stop an analog I/O operation, the event BufferDoneEvent is generated for the current buffer 
            and for up to eight inprocess buffers before a QueueStoppedEvent event occurs. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SubsystemType">
            <summary>
            Returns the subsystem type (AnalogInput, AnalogOutput, DigitalInput,
            DigitalOutput, CounterTimer, or QuadratureDecoder).
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.StopOnError">
            <summary>
            Gets or sets the stop-on-error condition (stop if overrun or underrun
            occurs, or continue if overrun or underrun occurs).
            </summary>
            <remarks>
            If StopOnError is True, the subsystem automatically stops
            when an overrun or underrun error occurs. If StopOnError is False,
            the subsystem continues to run when an overrun or underrun error occurs.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.AsynchronousStop">
            <summary>
            Gets or sets the stop behavior (synchronous or asynchronous) of the subsystem.
            </summary>
            <remarks>
            If you set the AsynchronousStop property to True, control returns to your program
            after <see cref="M:OpenLayers.Base.SubsystemBase.Stop"/> is called. If you set the AsynchronousStop property to False (the default
            setting), control does not return to your program after Stop is called until the <see cref="T:OpenLayers.Base.OlBuffer"/> object 
            completes. (It is recommended that you do not wait more than 20 seconds for the 
            stop to complete.)
            If you try to perform another operation while the stop is in 
            progress, an exception is raised with the error code "SubsystemStopping" and the
            exception message "The subsystem is in the process of stopping or aborting".
            </remarks>
            
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.ChannelType">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.Base.ChannelType"/> (SingleEnded or Differential) for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.DataFlow">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.Base.DataFlow"/> mode (Continuous, SingleValue,
            ContinuousPreTrigger, or ContinuousPrePostTrigger) of the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.Encoding">
            <summary>
            Gets and sets the data <see cref="T:OpenLayers.Base.Encoding"/> (Binary 
            or TwosComplement) of the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.Resolution">
            <summary>
            Gets and sets the resolution of the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SynchronizationMode">
             <summary>
             For subsystems that allow you to synchronize operations on multiple devices using a synchronization connector,
             gets and sets the synchronization mode (None, Master, or Slave).
             </summary>
             <remarks>
             If the synchronization mode is None, the subsystem is configured to ignore the synchronization circuit on the device.
             If the synchronization mode is Master, the synchronization connector on the device is configured to output a synchronization signal.
             If the synchronization mode is Slave, the synchronization connector on the device is configured to accept 
             a synchronization signal as an input.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsSingleEnded">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.ChannelType.SingleEnded"/> 
            channels; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.ChannelType"/> property to set the channel 
            configuration to SingleEnded.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsDifferential">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.ChannelType.Differential"/> 
            channels; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.ChannelType"/> property to set the channel 
            configuration to Differential.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsBinaryEncoding">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.Encoding.Binary"/> 
            data encoding; otherwise, returns False.
            </summary>		
            <remarks>Use the <see cref="T:OpenLayers.Base.Encoding"/> property to set the data encoding to Binary.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.MaxSingleEndedChannels">
            <summary>
            Returns the total number of <see cref="F:OpenLayers.Base.ChannelType.SingleEnded"/> channels supported by the subsystem.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.ChannelType"/> property to set the channel 
            configuration to SingleEnded.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.MaxDifferentialChannels">
            <summary>
            Returns the total number of <see cref="F:OpenLayers.Base.ChannelType.Differential"/> channels supported by the subsystem.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.ChannelType"/> property to set the channel 
            configuration to Differential.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.InternalSupportsWrapSingle">
            <summary>
            Returns True if the subsystem supports reusing a single buffer for continuous operations;
            otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.AnalogOutputSubsystem.WrapSingleBuffer"/> property to use
            a single buffer for the continuous operation. </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsTwosCompEncoding">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.Encoding.TwosComplement"/> data encoding;
            otherwise, returns False.
            </summary>		
            <remarks>Use the <see cref="T:OpenLayers.Base.Encoding"/> property to set the data encoding to 
            TwosComplement.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsSimultaneousStart">
            <summary>
            Returns True if the subsystem supports starting multiple subsystems simultaneously;
            otherwise, returns False. 
            </summary>	
            <remarks>Use the <see cref="T:OpenLayers.Base.SimultaneousStart"/> class to set up and 
            manage the simultaneous start list.</remarks>	
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsBuffering">
             <summary>
             Returns True if the subsystem supports continuous acquisition to or from 
             <see cref="T:OpenLayers.Base.OlBuffer"/> objects; otherwise, returns False.
             </summary>
             <remarks>Use the <see cref="T:OpenLayers.Base.OlBuffer"/> and <see cref="T:OpenLayers.Base.BufferQueue"/> classes
             to set up buffering for your operation. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsContinuous">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.DataFlow.Continuous"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.DataFlow"/> property to set the data flow mode to 
            Continuous.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsSingleValue">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.DataFlow.SingleValue"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.DataFlow"/> property to set the data flow mode to 
            SingleValue.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsContinuousPreTrigger">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.DataFlow.ContinuousPreTrigger"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.DataFlow"/> property to set the data flow mode to 
            ContinuousPreTrigger.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsContinuousPrePostTrigger">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.DataFlow.ContinuousPrePostTrigger"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="T:OpenLayers.Base.DataFlow"/> property to set the data flow mode to 
            ContinuousPrePostTrigger.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsProgrammableGain">
             <summary>
             Returns True if the subsystem supports programmable gain for the <see cref="T:OpenLayers.Base.ChannelListEntry"/> objects;
             otherwise, returns False.
             </summary>
             <remarks>Use the <see cref="P:OpenLayers.Base.ChannelListEntry.Gain"/> property to set the gain for a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsChannelListInhibit">
            <summary>
            Returns True if the subsystem supports inhibition of a 
            <see cref="T:OpenLayers.Base.ChannelList"/> entry; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.ChannelListEntry.Inhibit"/> property to set the inhibit state for a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsInterrupt">
            <summary>
            Returns True if the subsystem supports interrupt-driven I/O; otherwise,
            returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.NumberOfChannels">
             <summary>
             Returns the total number of channels that are supported by the subsystem.  
             </summary>
             <remarks>
             This total number of channels includes both native and non-native channels that are
             supported for the subsystem. For example, if the analog input subsystem supports
             the ability to stream both analog and digital input data, the digital input channels 
             will be included with the analog input channels in the total channel count.
             See also <seealso cref="T:OpenLayers.Base.ChannelListEntry"/> and <seealso cref="T:OpenLayers.Base.SupportedChannels"/>.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsSoftwareResolution">
            <summary>
            Returns True if the subsystem supports software-programmable resolution;
            otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.AnalogSubsystem.Resolution"/> property to specify 
            the resolution for the subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.NumberOfResolutions">
            <summary>
            Returns the number of resolutions that are supported by the subsystem.
            </summary>
            <remarks>To get an array of available resolutions that are supported by the subsystem, use the <see cref="P:OpenLayers.Base.SubsystemBase.SupportedResolutions"/> property.
            Use the <see cref="P:OpenLayers.Base.AnalogSubsystem.Resolution"/> property to specify  
            the resolution for the subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportedResolutions">
            <summary>
            Returns an array of available resolutions that are supported by the subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.AnalogSubsystem.Resolution"/> property to specify  
            the resolution for the subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.FifoSize">
            <summary>
            Returns the size of the FIFO on the device that is associated with the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsWaveformModeOnly">
            <summary>
            Returns True if the subsystem supports waveform-based operations using 
            the onboard FIFO only; otherwise, returns False.
            If this property is True, the buffer wrap mode must be set to <see cref="P:OpenLayers.Base.AnalogOutputSubsystem.WrapSingleBuffer"/>. 
            In addition, the buffer size must be less than or equal to the 
            <see cref="P:OpenLayers.Base.SubsystemBase.FifoSize"/>.
            </summary>		
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.ReturnsFloats">
            <summary>
            Returns True if the subsystem returns data as floating-point values; otherwise, 
            returns False indicating that the subsystem returns data as integer values.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsCurrentOutput">
            <summary>
            Returns True if the subsystem supports current outputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsSetSingleValues">
            <summary>
            Returns True if the subsystem supports updating multiple channels simultaneously with a single value 
            (using <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.Base.SingleValuesInfoRaw[])"/> or
            <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.Base.SingleValuesInfoVolts[])"/>);
            otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.SupportsSynchronization">
            <summary>
            Returns True if the subsystem supports synchronization with other devices 
            (using <see cref="P:OpenLayers.Base.SubsystemBase.SynchronizationMode"/>); otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SubsystemBase.IsRunning">
            <summary>
            Returns True if the subsystem is currently running; otherwise, returns False.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SubsystemBase.States">
            <summary>
            Returns the current state of the subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.Initialized">
            <summary>
            The subsystem is initialized, but not configured.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.ConfiguredForSingleValue">
            <summary>
            The subsystem is configured for a single-value operation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.ConfiguredForContinuous">
            <summary>
            The subsystem is configured for a continuous operation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.PreStarted">
            <summary>
            The subsystem was prestarted for a continuous operation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.Running">
            <summary>
            The subsystem is running.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.Stopping">
            <summary>
            The subsystem is in the process of stopping.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.Aborting">
            <summary>
            The subsystem is in the process of aborting.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemBase.States.IoComplete">
            <summary>
            The final analog output sample has been written from the FIFO on the device.
            </summary>
            <remarks>This is a transient state that may not be detected by your application.</remarks>
        </member>
        <member name="T:OpenLayers.Base.SubsystemBase.InternalStates">
            <summary>
            Subsystem states that DT kernel mode drivers use.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.SetDefaultConfig">
            <summary>
            Set driver config struct to it's defaults
            </summary>	
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.FindClosestGain(System.Double)">
            <summary>
            This method navigates through the subsystem supported gains.
            It returns the closest gain available to user input gain
            </summary>
            <param name="userGain"> The gain requested by the caller</param>
            <returns> The subsystem supported gain which is closest to user required gain</returns>
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.VoltsToRawValue(System.Double,System.Double)">
             <summary>
             Converts a voltage value into a raw count.
             </summary>
             <param name="volts">The voltage value to convert.</param>
             <param name="gain">The gain that was applied to input signal to produce the voltage.</param>
             <returns>
             The raw count that is associated with the voltage value. 
            </returns>
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.RawValueToVolts(System.UInt16,System.Double)">
            <summary>
            Converts a raw count into a voltage value.
            </summary>
            <param name="code">The raw count to convert.</param>
            <param name="gain">The gain to apply to the value. The gain is 
            typically applied to the input signal at acquisition time.</param>
            <returns>The voltage value that is associated with the raw count.</returns>
            <remarks>Use this method when the subsystem has a resolution of 16 bits or less.</remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.RawValueToVolts(System.Int32,System.Double)">
            <summary>
            Converts a raw count into a voltage value.
            </summary>
            <param name="code">The raw count to convert.</param>
            <param name="gain">The gain to apply to the value. The gain is 
            typically applied to the input signal at acquisition time.</param>
            <returns>The voltage value that is associated with the raw count.</returns>
            <remarks>Use this method when the subsystem has a resolution of greater than 16 bits.</remarks>		
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.RawValueToSensor(System.UInt16,System.Double,System.Double,System.Double)">
             <summary>
             Converts a raw count to a sensor value in engineering units.
             </summary>
             <param name="code">The raw count to convert.</param>
             <param name="gain">The gain of the input signal, which is
             used to convert the raw count to a prescaled voltage value.</param>
             <param name="sensorGain">The sensor gain that is applied to the prescaled voltage value.</param>
             <param name="sensorOffset">The sensor offset that is applied to the prescaled voltage value.</param>
             <returns>The sensor value that is associated with the raw count.</returns>
             <remarks>Use this method when the subsystem has a resolution of 16 bits or less.
            
             The scaling occurs in two steps. First, the raw count is converted to a 
             prescaled voltage by applying the gain for the input signal.
             Then, the prescaled voltage value is scaled using the equation 
             y = mx + b, where y is the scaled sensor value, m is the sensor gain,
             x is the prescaled value in voltage, and b is the sensor offset.
             </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogSubsystem.RawValueToSensor(System.Int32,System.Double,System.Double,System.Double)">
             <summary>
             Converts a raw count to a sensor value in engineering units.
             </summary>
             <param name="code">The raw count to convert.</param>
             <param name="gain">The gain of the input signal, which is
             used to convert the raw count to a prescaled voltage value.</param>
             <param name="sensorGain">The sensor gain that is applied to the prescaled voltage value.</param>
             <param name="sensorOffset">The sensor offset that is applied to the prescaled voltage value.</param>
             <returns>The sensor value that is associated with the raw count.</returns>
             <remarks>Use this method when the subsystem has a resolution greater than 16 bits.
            
             The scaling occurs in two steps. First, the raw count is converted to a 
             prescaled voltage by applying the gain for the input signal.
             Then, the prescaled voltage value is scaled using the equation 
             y = mx + b, where y is the scaled sensor value, m is the sensor gain,
             x is the prescaled value in voltage, and b is the sensor offset. 
            </remarks>
        </member>
        <member name="E:OpenLayers.Base.AnalogSubsystem.IOCompleteEvent">
            <summary>
            Occurs when the last data point has been output from an analog output channel, or when the last
            sample has been copied to an analog input buffer on devices that support TTL and analog threshold
            stop trigger.  
            In some cases, this event is raised well after the data is transferred from the buffer (and,
            therefore, well after BufferDoneEvent and QueueDoneEvents occur).
            </summary>
        </member>
        <member name="E:OpenLayers.Base.AnalogSubsystem.DriverRunTimeErrorEvent">
            <summary>
            Occurs when the device driver detects one of the following error conditions during runtime: FifoOverflow,
            FifoUnderflow, DeviceOverClocked, TriggerError, or DeviceError. See <see cref="T:OpenLayers.Base.OlError"/> for more information.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.NumberOfRanges">
            <summary>
            Returns the number of available voltage ranges for the analog subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.AnalogSubsystem.VoltageRange"/> property to set the range.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.SupportedVoltageRanges">
            <summary>
            Returns an array of supported voltage ranges for the analog subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.AnalogSubsystem.VoltageRange"/> property to set the range.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.NumberOfSupportedGains">
            <summary>
            Returns the number of available gains for the analog subsystem.
            </summary>
            <remarks>To get an array of supported gain value for the subsystem, use the <see cref="P:OpenLayers.Base.AnalogSubsystem.SupportedGains"/> property.
            Use the <see cref="P:OpenLayers.Base.ChannelListEntry.Gain"/> property to set the gain for a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.SupportedGains">
            <summary>
            Returns an array of available gains for the analog subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.ChannelListEntry.Gain"/> property to set the gain for a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.VoltageRangeLow">
            <summary>
            Gets or sets the lower voltage range for the analog subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.VoltageRangeHigh">
            <summary>
            Gets or sets the upper voltage range for the analog subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.Resolution">
            <summary>
            Returns the resolution of the analog subsystem.
            </summary>
            <remarks>The resolution is fixed for analog input and analog output subsystem; therefore, the Resolution property
            cannot be set for an analog input or output subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.VoltageRange">
            <summary>
            Gets or sets the current voltage range for the analog subsystem.
            </summary>
            <example> 
            This example sets the voltage range of the analog input subsystem to
            the first range in the list of supported voltage ranges.
            <code language="cs">
            ainSS.VoltageRange = ainSS.SupportedVoltageRanges[0];
            </code>
            <code language="vb">
            ainSS.VoltageRange = ainSS.SupportedVoltageRanges(0)
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.QueuedBufferDones">
            <summary>
            Returns the number of Buffer Done Events queued to be sent when <see cref="P:OpenLayers.Base.AnalogSubsystem.SynchronousBufferDone"/> is true.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogSubsystem.SynchronousBufferDone">
             <summary>
             Gets or sets the way Buffer Done events are executed (asynchronously or synchronously). 
             If False, each Buffer Done event is executed asynchronously in its own thread.
             If True, all Buffer Done events are executed synchronously from a single worker thread.
             </summary>
             <remarks>
             If your program is running under a heavy CPU load and this property is False, .NET may call your Buffer Done
             delegates out of order under certain circumstances. To avoid this problem, it is recommended that you
             set this property to True.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns an AnalogInputSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.AnalogInputSubsystem(System.Int32)"/> method rather than this constructor
            to return an analog input subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the analog input subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the analog input subsystem.</param>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose pattern for this subsystem.
            </summary>
            <param name="disposing">true if called externally; false if called by Finalize</param>
            <remarks>Overrides must call through to this base class.</remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.ToString">
            <summary>
            Returns a description of the analog input subsystem and element.
            </summary>
            <returns>A string that describes the analog input subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.Config">
            <summary>
            Configures the subsystem based on the current property settings.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.AutoCalibrate">
             <summary>
             Calibrates the subsystem through software, performing an auto-zero function.
             </summary>
             <remarks>
             To determine if the specified subsystem supports this capability, use the
             <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsAutoCalibrate"/> property. If this property 
             returns a value of True, the subsystem can be calibrated through software.
             Ensure that the subsystem is not running when you call this method, or an error is returned.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.Start">
            <summary>
            Starts a continuous operation on the analog input subsystem.
            </summary>
            <remarks>
            This method overrides the Start method in the base class.
            </remarks>	 
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.Stop">
            <summary>
            Stops a continuous operation on the analog input subsystem after the 
            current buffer has been filled.
            </summary>
            <remarks>
            This method overrides the Stop method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.Abort">
            <summary>
            Stops a continuous operation on the subsystem immediately without waiting
            for the current buffer to be filled.
            </summary>
            <remarks>
            This method overrides the Abort method in the base class.
            </remarks>		
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsVolts(System.Int32,System.Double)">
            <summary>
            Acquires a single value from an analog input channel and returns the data in voltage. 
            </summary>
            <param name="physicalChannel">The physical analog input channel to sample.</param>
            <param name="gain">The gain to apply to the input signal.</param>
            <returns>The acquired value in voltage.</returns>
            <remarks>
            For subsystems that support thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True),
            a voltage value is returned only if the specified channel is configured for a <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> of None. If 
            the channel is configured for any other <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>, an exception is raised.
            <para>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for VoltageIn using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </para>
            </remarks>
            <example> 
            This example shows a typical use of GetSingleValueAsVolts.
            <code lang="C#">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Get an AnalogInputSubsystem object for element 0.
            AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
            // Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            ainSS.Config ();
            // Acquire a value from analog input channel 0 using a gain of 1, and
            // return the data in voltage.	
            double valueInVolts = ainSS.GetSingleValueAsVolts (0,1.0);
            </code>
            <code lang="VB">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog input subsystem 
            ainSS = device.AnalogInputSubsystem(0)
            ' Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            ainSS.Config()
            ' Acquire a value from analog input channel 0 using a gain of 1, and
            ' return the data in voltage.	
            Dim voltageValue As Double = ainSS.GetSingleValueAsVolts(0, 1)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsSensor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Acquires a single value from an analog input channel and returns it in the 
            engineering units of the specified sensor. 
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <param name="gain">Gain to apply to the input signal to get the prescaled voltage value. </param>
            <param name="sensorGain">Sensor gain value to apply to the prescaled voltage value.
            The default value is 1.</param>
            <param name="sensorOffset">Sensor offset value to apply to the prescaled voltage value.
            The default value is 0.</param>
            <returns>The scaled value in the engineering units of the sensor.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for VoltageIn using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            <para>
            The sensor gain and offset are used to scale a sample from raw counts to a sensor format. 
            The scaling occurs in two steps.
            First, the raw count value is acquired and converted to prescaled voltage using 
            the gain applied to the channel.
            Then, the sensor gain and sensor offset parameters are applied to the prescaled voltage
            value using the linear equation y = mx + b,
            where y is the sensor value, m is the sensor gain, x is the prescaled value in voltage,
            and b is the sensor offset.
            </para>
            </remarks>      	
            <example> 
            This example shows a typical use of GetSingleValueAsSensor.
            <code lang="C#">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Get an AnalogInputSubsystem object for element 0.
            AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
            // Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            ainSS.Config ();
            // Acquire a single value from analog input channel 0, apply a gain of 1
            // to the input, and return the data in the engineering units of the 
            // sensor using a sensor gain of 100 and an offset of 2. 	
            double sensorValue = ainSS.GetSingleValueAsSensor (0,1.0,100,2);
            </code>
            <code lang="VB">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog input subsystem 
            ainSS = device.AnalogInputSubsystem(0)
            ' Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            ainSS.Config()
            ' Acquire a single value from analog input channel 0, apply a gain of 1
            ' to the input, and return the data in the engineering units of the 
            ' sensor using a sensor gain of 100 and an offset of 2. 	
            Dim sensorValue As Double = ainSS.GetSingleValueAsSensor(0, 1.0, 100, 2)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsRaw(System.Int32,System.Double)">
            <summary>
            Acquires a single value from an analog input channel and returns it in raw counts.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <param name="gain">Gain to apply to the input signal.</param>
            <returns>The analog input value in raw counts.</returns>
            <example> 
            This example shows a typical use of GetSingleValueAsRaw.
            <code lang="C#">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Get an AnalogInputSubsystem object for element 0.
            AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
            // Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            ainSS.Config ();
            // Acquire a single value from analog input channel 0, apply a gain  
            // of 1 to the input, and return the data in raw counts.
            int rawCount = ainSS.GetSingleValueAsRaw (0,1.0);
            </code>
            <code lang="VB">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog input subsystem 
            ainSS = device.AnalogInputSubsystem(0)
            ' Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            ainSS.Config()
            ' Acquire a single value from analog input channel 0, apply a gain of 1 
            ' to the input, and return the data in raw counts.
            Dim rawValue As Integer = ainSS.GetSingleValueAsRaw(0, 1)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsVolts(System.Double)">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/>
            is True), simultaneously acquires a single value from each analog input channel and returns the data as an array of voltages 
            based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <remarks>
            For subsystems that support thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True),
            any channel that is configured for a <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> of None returns
            a voltage value and any channel that is configured for any other <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> returns
            a temperature value.
            <para>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each channel is configured
            for VoltageIn using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </para>
            </remarks>
            <param name="gain">Gain to apply to the input signal.</param>
            <returns>An array of analog input values in voltage. Each index item of the array corresponds to a channel
            index in the <see cref="P:OpenLayers.Base.SubsystemBase.SupportedChannels"/> collection for the analog input subsystem.</returns>   
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleCjcValuesAsTemperature(OpenLayers.Base.TemperatureUnit)">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/>
            is True), supports thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True), 
            and supports that ability to return data as floating-point values (<see cref="P:OpenLayers.Base.SubsystemBase.ReturnsFloats"/> is True),
            acquires the CJC temperature for each input channel on the subsystem,
            and returns the CJC temperatures, in the units you specify, as floating-point values.
            </summary>
            <remarks>
            This function is seldom needed. It is provided in the rare case when you want to implement your own temperature conversion 
            algorithms in software based on the CJC values.
            To use this function, the subsystem must be configured for a single value operation. Refer to your driver documentation 
            for more information.
            </remarks>
            <param name="tempUnit">The <see cref="T:OpenLayers.Base.TemperatureUnit"/> of the CJC values that are returned.</param>
            <returns>The CJC temperature of each input channel, in the units you specified. 
            These temperatures are represented as floating-point (double) values.</returns>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsTemperature(OpenLayers.Base.TemperatureUnit)">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True) and
            thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True), simultaneously acquires a 
            single temperature value from each analog input channel and returns the data, in the units you specify,
            as an array of floating-point values based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <param name="tempUnit">The <see cref="T:OpenLayers.Base.TemperatureUnit"/> of the temperature values that are returned.
            </param>
            <returns>The temperature value of each input channel, in the units you specified. The temperatures are represented 
            as floating-point (double) values.
            </returns>
            <remarks>
            For subsystems that support thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True),
            any channel that is configured for a <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> of None returns
            a voltage value and any channel that is configured for any other <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> returns
            a temperature value.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleCjcValueAsTemperature(System.Int32,OpenLayers.Base.TemperatureUnit)">
            <summary>
            For subsystems that support thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True) 
            and can return data as floating-point values (<see cref="P:OpenLayers.Base.SubsystemBase.ReturnsFloats"/> is True),
            acquires the CJC temperature for the specified input channel,
            and returns the CJC temperature, in the units you specify, as a floating-point value.
            </summary>
            <remarks>
            This function is seldom needed. It is provided in the rare case when you want to implement your own temperature 
            conversion algorithms in software based on the CJC temperature.
            To use this function, the subsystem must be configured for a single value operation. 
            </remarks>
            <param name="physicalChannel">The physical analog input channel to sample.</param>
            <param name="tempUnit">The <see cref="T:OpenLayers.Base.TemperatureUnit"/> of the CJC value that is returned.</param>
            <returns>The CJC temperature of the specified input channel, in the units you specified. 
            This temperature is represented as a floating-point (double) value.</returns>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsTemperature(System.Int32,OpenLayers.Base.ThermocoupleType,OpenLayers.Base.TemperatureUnit)">
             <summary>
             For subsystems that support thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True), 
             acquires a single temperature value from an analog input channel using the specified thermocouple type and temperature unit, 
             and returns the temperature as a floating-point value.
             </summary>
             <param name="physicalChannel">Physical analog input channel to sample.</param>
             <param name="thermocoupleType">The <see cref="T:OpenLayers.Base.ThermocoupleType"/> that is connected to the specified physical channel.</param>
             <param name="tempUnit">The <see cref="T:OpenLayers.Base.TemperatureUnit"/> for the specified thermocouple type.</param>
             <returns>The temperature of the specified input channel, in the specified units, represented as a floating-point value.</returns>
             <remarks>
             A temperature value is returned only if the specified channel is configured for a <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> other than None.
             If the channel is configured for a <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> of None, an exception is raised.  
              <para>
             If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
             for Thermocouple measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
             </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsTemperature(System.Int32,OpenLayers.Base.RTDType,OpenLayers.Base.SensorWiringConfiguration,System.Double,OpenLayers.Base.TemperatureUnit)">
             <summary>
             For subsystems that support RTDs (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsRTD"/> is True), 
             acquires a single temperature value from an analog input channel using the specified RTD type, R0 coefficient, sensor wiring configuration, and temperature unit, 
             and returns the temperature as a floating-point value.
             </summary>
             <param name="physicalChannel">Physical analog input channel to sample.</param>
             <param name="rtdType">The <see cref="T:OpenLayers.Base.RTDType"/> that is connected to the specified physical channel.</param>
             <param name="sensorWiringConfiguration">The <see cref="T:OpenLayers.Base.SensorWiringConfiguration"/> that was used to connect the RTD to the specified physical channel.</param>
             <param name="RtdR0"> The nominal resistance (<see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/>) of the RTD at zero degrees C.</param>
             <param name="tempUnit">The <see cref="T:OpenLayers.Base.TemperatureUnit"/> for the specified RTD.</param>
             <returns>The temperature of the specified input channel, in the specified units, represented as a floating-point value.</returns>
             <remarks>
             If the value of the rtdType parameter is set to Custom, you must set the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/>,
             <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/>,
             <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/>, 
             and <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> properties of the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> to 
             supply the coefficients for the Callendar-Van Dusen transfer function. Otherwise, 
             the values that were stored internally for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/>,
             <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/>, 
             and <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> properties are used, based on the value of the rtdType parameter. 
             <para>
             If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
             for Rtd measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
             </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsTemperature(System.Int32,OpenLayers.Base.SensorWiringConfiguration,System.Double,System.Double,System.Double,OpenLayers.Base.TemperatureUnit)">
            <summary>
            For subsystems that support thermistors (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermistor"/> is True), 
            acquires a single temperature value from the specified analog input channel based on the specified wiring configuration, A, B, and C coefficients, and temperature unit, 
            and returns the temperature as a floating-point value.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <param name="sensorWiringConfiguration">The <see cref="T:OpenLayers.Base.SensorWiringConfiguration"/> that is used to connect the thermistor to the specified physical channel.</param>
            <param name="thermistorACoefficient"> The A coefficient that is used in the Steinhart-Hart transfer function for the thermistor.</param>
            <param name="thermistorBCoefficient"> The B coefficient that is used in the Steinhart-Hart transfer function for the thermistor.</param>
            <param name="thermistorCCoefficient"> The C coefficient that is used in the Steinhart-Hart transfer function for the thermistor.</param>
            <param name="tempUnit">The <see cref="T:OpenLayers.Base.TemperatureUnit"/> for the specified thermistor.</param>
            <returns>The temperature of the specified input channel, in the specified units, represented as a floating-point value.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for Thermistor measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsResistance(System.Int32)">
            <summary>
            For subsystems that support resistance measurements  (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsResistance"/> is True), 
            acquires a single resistance value from the specified analog input channel, and returns the resistance as a floating-point value, in ohms.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <returns>The resistance value of the specified input channel, in ohms, represented as a floating-point value.</returns>
            <remarks>
            The resistance measurement depends on the excitation current setting. See your hardware manual for
            setting the current source and current value.
            If the hardware supports more than one current source, use <see cref="P:OpenLayers.Base.SupportedChannelInfo.ExcitationCurrentSource"/> 
            propety to set the current source. 
            If the hardware supports internal current Source, use <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportedExcitationCurrentValues"/>
            to determine the available current values and set <see cref="P:OpenLayers.Base.SupportedChannelInfo.ExcitationCurrentValue"/>
            property to one of the available current values.
            <para>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for Resistance measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </para>
            </remarks> 
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsCurrent(System.Int32)">
            <summary>
            For subsystems that support current measurements (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsCurrent"/> is True), 
            acquires a single current value from the specified analog input channel, and returns the current measurement as a floating-point value, in amperes.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <returns>The current value of the specified input channel, in amperes, represented as a floating-point value.</returns>
            <remarks>
            When the channel is configured for a current measurement, a built-in resistor is switched in across the channel input terminals.
            Refer to the user's manual for your device to determine the value of the built-in resistor across the channel input terminals, and to
            determine the maximum current value that can be measured.
            <para>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for Current measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </para>
            </remarks> 
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsBridgeBasedSensor">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True) and
            bridge-based measurements (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsBridgeBasedSensors"/> is True),
            simultaneously acquires a single value from each channel
            and returns an array of values based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <returns>Array of values in the engineering units of the bridge-based sensor.</returns>
            <remarks>
            This method can be used only on subsystems that support simultaneous acquisition.
            <para>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each channel is configured
            for Bridge measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsNormalizedBridgeOutput">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True) and
            bridge-based measurements (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsBridgeBasedSensors"/> is True),
            simultaneously acquires a single value from each channel and returns an array of nominal values, in mV/V, based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <returns>Array of nominal values, in mV/V.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each channel is configured
            for Bridge measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsBridgeBasedSensor(System.Int32)">
            <summary>
            For subsystems that support <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsBridgeBasedSensors"/>, acquires a single value from a bridge-based sensor,
            and returns a value in the engineering units of the sensor based on its <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <returns>Value, in engineering units, of the bridge-based sensor that is connected to specified channel.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for Bridge measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsNormalizedBridgeOutput(System.Int32)">
            <summary>
            For subsystems that support <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsBridgeBasedSensors"/>, acquires a single value from the channel
            and returns the nominal value, in mV/V, based on its <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <returns>The nominal value, in mV/V, from bridge that is connected to the specified channel.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for Bridge measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsStrain">
            <summary>
             For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True) and strain gage measurements 
             (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsStrainGage"/> is True), simultaneously acquires a single value from each channel,
            and returns an array of microstrain values based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <returns>Array of microstrain values.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each channel is configured
            for StrainGage measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValueAsStrain(System.Int32)">
            <summary>
            For subsystems that support strain gage measurements (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsStrainGage"/> is True), 
            acquires a single microstrain value from the channel based on its <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <returns>Microstrain value from the strain gage that is connected to the specified channel.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that the channel is configured
            for StrainGage measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsSensor(System.Double,System.Double,System.Double)">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True), 
            simultaneously acquires a single value from each analog input channel and returns an array of values in the
            engineering units of the specified sensors.
            </summary>
            <param name="gain">Gain to apply to the input signal.</param>
            <param name="sensorGain">Sensor gain value to apply to the prescaled voltage value.</param>
            <param name="sensorOffset">Sensor offset value to apply to the prescaled voltage value.</param>
            <returns>An array of scaled values in the engineering units of the sensor. Each index item
            of the array corresponds to a channel index in the
            <see cref="P:OpenLayers.Base.SubsystemBase.SupportedChannels"/> collection for the analog input subsystem.</returns>
            <remarks>
             If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each
            channel is configured for VoltageIn measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            <para>
            The sensor gain and offset are used to scale a sample from raw counts to a sensor format. 
            The scaling occurs in two steps.
            First, the raw count values are acquired and converted to prescaled voltages using 
            the gain applied to the channels.
            Then, the sensor gain and sensor offset parameters are applied to the prescaled voltage
            values using the linear equation y = mx + b,
            where y is the sensor value, m is the sensor gain, x is the prescaled value in voltage,
            and b is the sensor offset.
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsCurrent">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True) and
            current measurements (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsCurrent"/> is True), simultaneously acquires a single value from each channel 
            and returns an array of values (in amperes) based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <returns>Array of current measurement values, in amperes.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each
            channel is configured for Current measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsResistance">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True) and
            resistance measurements (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsResistance"/> is True), simultaneously acquires a single value from each channel
            and returns an array of values (in ohms) based on each channel's <see cref="T:OpenLayers.Base.SupportedChannelInfo"/>.        
            </summary>
            <returns>Array of resistance values, in ohms.</returns>
            <remarks>
            If your device supports multiple sensor types for each channel (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor"/> is True), ensure that each
            channel is configured for Resistance measurements using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property before calling this method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsRaw(System.Double)">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold"/> is True), 
            simultaneously acquires a single value from each input channel and returns the data as an array of raw counts.
            </summary>
            <remarks>
            If your device supports streaming digital inputs, counter/timers, and/or quadrature decoder inputs 
            through the analog input subsystem, this method returns the data for all the analog input channels,
            digital input ports, counter/timer channels, and/or quadrature decoder channels. For meaningful 
            digital input, counter/timer, and/or quadrature decoder data, ensure that you configure and/or 
            start an operation on these subsystems before calling GetSingleValuesAsRaw.
            </remarks>
            <param name="gain">Gain to apply to the input signal.</param>
            <returns>An array of data values in raw counts. Each index item of the array
            corresponds to a channel index in the <see cref="P:OpenLayers.Base.SubsystemBase.SupportedChannels"/> collection for the analog input subsystem.</returns>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.MoveFromBufferInprocess(OpenLayers.Base.OlBuffer,System.Int32)">
            <summary>
            Moves samples from the <see cref="T:OpenLayers.Base.OlBuffer"/> object that is currently being
            filled into a new OlBuffer object. 
            </summary>
            <param name="dtBuffer">The name of the new OlBuffer object in which to copy the data
            from the <see cref="T:OpenLayers.Base.OlBuffer"/> object that is being filled.</param>
            <param name="numberOfSamples">The number of samples to copy.</param>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.SetDefaultConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:OpenLayers.Base.AnalogInputSubsystem.logger">
            <summary>
            Provides an interface to the <see cref="T:OpenLayers.Base.MultiRecordAcquisition"/> object for the analog input subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.AnalogInputSubsystem.mSupportsTemperatureDataInStream">
            <summary>
            True for boards that do temperature conversion on board and return buffers of floating point 
            temperature values.  ex : DT9871
            </summary>
        </member>
        <member name="F:OpenLayers.Base.AnalogInputSubsystem.mSupportsCjcSourceInternal">
            <summary>
            True for boards that has the CJC applied internally
            </summary>
        </member>
        <member name="F:OpenLayers.Base.AnalogInputSubsystem.mSupportsCjcSourceChannel">
            <summary>
            Returns True if the subsystem supports channels that are used for cold junction compensation (CJC); otherwise, returns False.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.AnalogInputSubsystem.GetOneBuffer(OpenLayers.Base.SupportedChannelInfo,System.Int32,System.Int32)">
            <summary>
            Using continuous acquisition, acquires a buffer of data NumberOfSample long from the specified channel. This method
            uses the current clock frequency, trigger, etc., for the acquisition.  This method is synchronous and returns only
            after the requested data has been acquired or a calculated timeout value has been exceeded.
            </summary>
            <param name="ChannelInfo"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            from which to acquire data.</param>
            <param name="NumberOfSamples">Number of samples to acquire</param>
            <param name="TimeoutMSecs">Timeout value, in milliseconds, to wait for buffer completion.  A value of -1 means the timeout is infinite. </param>
            <returns>An <see cref="T:OpenLayers.Base.OlBuffer"/> object with the specified number of samples.</returns>
            <remarks>
            This method allocates a buffer and starts the continuous analog input operation automatically using the current configuration of the analog input
            subsystem. This method is synchronous and returns only after the requested data has been acquired or the specified timeout value, in milliseconds,
            has been exceeded. No BufferDoneEvents occur. If the buffer is not filled before the specified timeout value is exceeded, AnalogInputSubsystem.Abort is called and a
            TimeoutException is raised. If a GeneralFailureEvent or DriverRuntimeErrorEvent occurs during acquisition, an OlException with the appropriate
            error code is raised. Once the buffer is returned, you can copy the data from the buffer into an array using the OlBuffer methods.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream">
            <summary>
            Enables or disables the subsystem from returning CJC values in the data stream. 
            </summary>
            <remarks>
            This function is seldom needed. It is provided only for analog input subsystems that support 
            the capability of converting temperature data (based on CJC values) in hardware. 
            <para>
            If you disable the subsystem from returning CJC values in the data stream 
            (ReturnCjcTemperaturesInStream is False; the default state), the subsystem returns a corrected and 
            linearized value for each input channel. Every sample in the data stream corresponds to a single 
            (typically, floating-point) value that represents either the temperature (in degrees C) or the voltage 
            of the input channel, based on its <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>.
            No CJC values are returned in the data stream.
            </para> 
            <para>
            If you enable the subsystem to return CJC values in the data stream (ReturnCjcTemperaturesInStream is True),
            the subsystem returns both an input value and CJC value for each channel; you can then implement your own temperature 
            conversion algorithms in software to convert the data as desired. Two (typically floating-point) values are returned 
            in the data stream for each channel: the first value represents the temperature or voltage of the input channel (based on
            the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> of the input), and the second value represents the 
            CJC temperature, in degrees C. Generally, in this configuration, a thermocouple type of None is specified for 
            each channel. If you return CJC values in the data stream, ensure that you allocate a buffer that
            is twice as large to accommodate the CJC values (number of samples x 2).
            </para>
            <para>
            To use this function, the subsystem must be configured for a continuous operation using the 
            <see cref="P:OpenLayers.Base.SubsystemBase.DataFlow"/> property. This feature is supported only
            if the subsystem supports thermocouples (see <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/>)
            and the subsystem supports interleaved CJC values in the data stream
            (see <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsInterleavedCjcTemperaturesInStream"/>).
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.TemperatureFilterType">
            <summary>
            Obsolete property. This property have been deprecated and may not
            be supported in future versions of library. Use DataFilterType. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.DataFilterType">
            <summary>
            For devices, like the TEMPpoint and VOLTpoint instruments 
            that support programmable filter types for measuring temperature, gets and sets
            the filter type. 
            </summary>
        </member>
        <member name="E:OpenLayers.Base.AnalogInputSubsystem.PreTriggerBufferDoneEvent">
            <summary>
            Occurs when the OlBuffer object is filled with pre-trigger data (for an analog input operation only).
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.TriggeredScan">
            <summary>
            Provides an interface to the <see cref="T:OpenLayers.Base.TriggeredScan"/> object for the analog input subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiRecordAcquisition">
            <summary>
            Returns True if the subsystem supports multi-record acquisition; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsAutoCalibrate">
             <summary>
             Returns True if the subsystem supports auto-calibration; otherwise, returns False.
             </summary>
             <remarks>
             During auto-calibration, the specified subsystem performs an auto-zero function. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple">
            <summary>
            Returns True if the subsystem supports thermocouple inputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsRTD">
            <summary>
            Returns True if the subsystem supports RTD inputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsCurrent">
            <summary>
            Returns True if the subsystem supports current measurements; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiSensor">
            <summary>
            Returns True if the subsystem supports reading data from multiple sensor types; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermistor">
            <summary>
            Returns True if the subsystem supports thermistor inputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsResistance">
            <summary>
            Returns True if the subsystem supports resistance measurements; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsTemperatureDataInStream">
             <summary>
             Returns True if the subsystem supports temperature conversions in hardware, 
             returning temperature data in the stream; otherwise, returns False.
             </summary>
             <remarks>
             For thermocouples, data is converted and linearized based on the specified <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>
             and the value of the internal CJC source on the device. 
             For RTDs, data is converted and linearized based on the specified <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/>.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsInterleavedCjcTemperaturesInStream">
            <summary>
            (Has meaning only if SupportsTemperatureDataInStream is True.) Returns True if the device can optionally 
            interleave CJC temperature data with A/D data (either voltage or temperature depending on the 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>), in the data stream; otherwise, returns False. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsCjcSourceInternal">
            <summary>
            Returns True if the subsystem supports a CJC (cold junction compensation) source that is internal to the hardware; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsCjcSourceChannel">
            <summary>
            Returns True if the subsystem supports channels that are used for cold junction compensation (CJC); otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportedCjcChannels">
            <summary>
            Returns an array containing the channels that can be used for cold junction compensation (CJC) on the specified subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsSimultaneousSampleHold">
            <summary>
            Returns True if the subsystem supports acquisition on all channels simultaneously; otherwise, returns False.
            </summary>
            <remarks>
            To acquire a single value from all channels simultaneously, use one of the following methods:
            <see cref="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsRaw(System.Double)"/>, 
            <see cref="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsSensor(System.Double,System.Double,System.Double)"/>, 
            <see cref="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsTemperature(OpenLayers.Base.TemperatureUnit)"/>, or
            <see cref="M:OpenLayers.Base.AnalogInputSubsystem.GetSingleValuesAsVolts(System.Double)"/>. For continuous operations, add the
            channels to a <see cref="T:OpenLayers.Base.ChannelList"/>.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsInProcessFlush">
            <summary>
            Returns True if the subsystem allows you to move data from the current
            OlBuffer object while it is being filled; otherwise, returns False.
            </summary>
            <remarks>
            Use the <see cref="M:OpenLayers.Base.AnalogInputSubsystem.MoveFromBufferInprocess(OpenLayers.Base.OlBuffer,System.Int32)"/> method to move data from the current <see cref="T:OpenLayers.Base.OlBuffer"/> object.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsTriggeredScan">
            <summary>
            Returns True if the subsystem supports triggered scan operations;
            otherwise, returns False.
            </summary>
            <remarks>
            See the <see cref="T:OpenLayers.Base.TriggeredScan"/> class for more information on triggered scan operations.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsACCoupling">
            <summary>
            Returns True if the subsystem supports AC coupling, where the DC offset is removed; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsDCCoupling">
            <summary>
            Returns True if the subsystem supports DC coupling, where the DC offset is included; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsIepe">
            <summary>
            Returns True if the subsystem supports IEPE (accelerometer) inputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsInternalExcitationCurrentSrc">
            <summary>
            Returns True if the subsystem supports an internal excitation current source; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsExternalExcitationCurrentSrc">
            <summary>
            Returns True if the subsystem supports an external excitation current source; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportedExcitationCurrentValues">
            <summary>
            Returns an array containing the available values for the internal excitation current source.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsTemperatureFilters">
            <summary>
            Obsolete property. This property have been deprecated and may not
            be supported in future versions of library. Use SupportsDataFilters instead.  
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsDataFilters">
            <summary>
            Returns True if the subsystem supports programmable filter types;
            otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsInternalExcitationVoltageSrc">
            <summary>
            Returns True if the subsystem supports an internal excitation voltage source; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsExternalExcitationVoltageSrc">
            <summary>
            Returns True if the subsystem supports an external excitation voltage source; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsShuntCalibration">
            <summary>
            Returns True if the subsystem supports shunt calibration; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource">
             <summary>
             Gets and sets the <see cref="T:OpenLayers.Base.ExcitationVoltageSource"/> to apply to the subsystem.
             </summary>
             <remarks>
             By default, the excitation voltage source is disabled for the subsystem.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageValue">
             <summary>
             Gets and sets the value of the internal excitation voltage that is applied across the bridge for each channel of the subsystem.
             </summary>
             <remarks>
             This value is applicable only when the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource"/> property is set to Internal.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.MinExcitationVoltageValue">
            <summary>
            Returns the minimum allowable excitation voltage that is supported
            by the subsystem if the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource"/> property is set to Internal.
            </summary>
            <remarks>Set the excitation voltage source to Internal using the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.MaxExcitationVoltageValue">
            <summary>
            Returns the maximum allowable excitation voltage that is supported
            by the subsystem if the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource"/> property is set to Internal.
            </summary>
            <remarks>Set the excitation voltage source to Internal using the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsPerChannelVoltageExcitation">
            <summary>
            Returns True if the device supports setting the voltage excitation
            source and/or value per channel; otherwise, returns False if the voltage excitation source/value
            must be set for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsStrainGage">
            <summary>
            Returns True if the subsystem supports strain gage measurements; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsBridgeBasedSensors">
            <summary>
            Returns True if the subsystem supports bridge-based sensors or general-purpose bridge measurements; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.AnalogInputSubsystem.SupportsRemoteSense">
            <summary>
            Returns True if the subsystem supports the use of remote sense leads; otherwise, returns False.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.AnalogOutputSubsystem">
            <summary>
            The AnalogOutputSubsystem class provides the properties, methods, and events for performing analog 
            output operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.AnalogOutputSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="F:OpenLayers.Base.AnalogOutputSubsystem.DontUpdateChannel">
            <summary>
            Used by the <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.Base.SingleValuesInfoVolts[])"/> and <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.Base.SingleValuesInfoRaw[])"/>,
            to ensure that unspecified analog output channels (i.e. those channel not specified in the singleValuesInfo array) are not updated.
            The output channel maintains the last value that was written to it. 
            </summary>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns an AnalogOutputSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.AnalogOutputSubsystem(System.Int32)"/> method rather than this constructor
            to return an analog output subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the analog output subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the analog output subsystem.</param>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose pattern for this subsystem.
            </summary>
            <param name="disposing">true if called externally; false if called by Finalize</param>
            <remarks>Overrides must call through to this base class.</remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.Finalize">
            <summary>
            Finalize method
            </summary>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.ToString">
            <summary>
            Returns a description of the analog output subsystem and element.
            </summary>
            <returns>A string that describes the analog output subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.Start">
             <summary>
             Starts a continuous operation on the analog output subsystem.
             </summary>
             <remarks>
             This method overrides the Start method in the base class.
            </remarks>			
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.Stop">
             <summary>
             Stops a continuous operation on the analog output subsystem after
             all the data in the current buffer has been output.
             </summary>
             <remarks>
             This method overrides the Stop method in the base class.
            </remarks>		
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.Abort">
             <summary>
             Stops a continuous operation on the analog output subsystem immediately 
             without waiting for all the data in the current buffer to be output.
             </summary>
             <remarks>
             This method overrides the Abort method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.Mute">
            <summary>
            Attenuates the output voltage of the subsystem to 0 V over a hardware-dependent number of samples.
            </summary>
            <remarks>
            Refer to the user's manual for your device to determine if the subsystem supports the ability to mute and unmute the output, and to determine the number of samples required for the muting process.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.UnMute">
            <summary>
            If the subsystem is muted, returns the output voltage of the subsystem to its current level over a hardware-dependent number of samples.
            </summary>
            <remarks>
            Refer to the user's manual for your device to determine if the subsystem supports the ability to mute and unmute the output, and to determine the number of samples required for the muting process.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValueAsVolts(System.Int32,System.Double)">
            <summary>
            Writes a single value, as a voltage, to an analog output channel.
            </summary>
            <param name="channel">The physical analog output channel to update.</param>
            <param name="inValue">The voltage value, as a double, to output.</param>
            <example> 
            This example shows a typical use of SetSingleValueAsVolts.
            <code language="cs">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem (0);
            //Set the data flow mode to SingleValue	
            aoutSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            aoutSS.Config ();
            // Send a value of 5 V to DAC0
            aoutSS.SetSingleValueAsVolts(0, 5);
            </code>
            <code language="vb">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem(0)
            ' Set the data flow mode to SingleValue
            aoutSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            aoutSS.Config()
            ' Send a value of 5 V to DAC0
            aoutSS.SetSingleValueAsVolts(0, 5)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValueAsRaw(System.Int32,System.Int32)">
            <summary>
            Writes a single value, as a raw count, to an analog output channel.
            </summary>
            <param name="channel">The physical analog output channel to update.</param>
            <param name="inRawValue">The raw count, as an integer, to output.</param>
            <example> 
            This example shows a typical use of SetSingleValueAsRaw.
            <code language="cs"> 
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem (0);
            //Set the data flow mode to SingleValue	
            aoutSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            aoutSS.Config ();
            // Send a raw count value of 256 to DAC0
            aoutSS.SetSingleValueAsRaw(0, 256);
            </code>
            <code language="vb">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem(0)
            ' Set the data flow mode to SingleValue
            aoutSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            aoutSS.Config()
            ' Send a raw count of 256 to DAC0
            aoutSS.SetSingleValueAsRaw(0, 256)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.Base.SingleValuesInfoRaw[])">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.SubsystemBase.SupportsSingleValue"/> is True), 
            outputs a single raw count on each analog output channel that is specified in the singleValuesInfo array.  
            If an analog output channel is not specified in this array, the value of the output channel will not change;
            the output channel maintains the last value that was written to it. 
            </summary>
            <param name="singleValuesInfo">An array of <see cref="T:OpenLayers.Base.SingleValuesInfoRaw"/> structures, which specify
            the analog output channels to update and the raw count value to output on each channel.</param>
        </member>
        <member name="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.Base.SingleValuesInfoVolts[])">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.Base.SubsystemBase.SupportsSingleValue"/> is True), 
            outputs a single voltage value on each analog output channel that is specified in the singleValuesInfo array.  
            If an analog output channel is not specified in this array, the value of the output channel will not change;
            the output channel maintains the last value that was written to it. 
            </summary>
            <param name="singleValuesInfo">An array of <see cref="T:OpenLayers.Base.SingleValuesInfoVolts"/> structures, 
            which specify the analog output channels to update and the voltage value to output on each channel.</param>
        </member>
        <member name="P:OpenLayers.Base.AnalogOutputSubsystem.WrapSingleBuffer">
            <summary>
            Gets and sets the wrap mode. If WrapSingleBuffer is True, the device driver continuously reuses 
            the first buffer queued to the subsystem. If WrapSingleBuffer is False, the device driver uses all 
            the buffers queued to the subsystem (this is the default mode). 
            </summary>
            <remarks>Set this property to True for waveform generation operations on the <see cref="T:OpenLayers.Base.AnalogOutputSubsystem"/>.</remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogOutputSubsystem.SupportsWrapSingle">
            <summary>
            Returns True if the subsystem supports reusing a single buffer for continuous operations;
            otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.Base.AnalogOutputSubsystem.WrapSingleBuffer"/> property to use
            a single buffer for the continuous operation. </remarks>
        </member>
        <member name="P:OpenLayers.Base.AnalogOutputSubsystem.SupportsMute">
            <summary>
            Returns True if the subsystem supports the ability to mute and/or unmute the output voltage.  
            </summary>
            <remarks>Use the <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.Mute"/> method
            to attenuate the output voltage to 0 V. If the output voltage is muted, use the <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.UnMute"/> method
            to return the output voltage to its current level.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.OlBuffer">
            <summary>
            The OlBuffer class encapsulates a data buffer that is used in a continuous I/O operation.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.#ctor(System.Int32,OpenLayers.Base.AnalogSubsystem)">
             <summary>
             Creates and returns an OlBuffer object, and allocates an internal data buffer that will 
             contain a specified number of samples.
             </summary>
             <param name="inNumSamples">Maximum number of samples that the internal buffer can contain. 
             This parameter determines the size of the internal buffer. Note that if you use the 
             <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> property to return CJC data in the 
             data stream, ensure that you set the size of the internal buffer to be twice as large to
             accommodate the returned CJC values for each channel (iNumSamples = number of samples per channel x 2).
             </param>
             <param name="inSubsystem">The subsystem (AnalogInputSubsystem or AnalogOutputSubsystem) with 
             which the OlBuffer object is initially associated. </param>
             <remarks>
             The values for voltage range, channel list, data encoding, 
             and resolution that are applied to the OlBuffer object are determined by the 
             subsystem with which it is associated. Initially (and by default), these values are determined
             by the subsystem that is specified in the constructor above.
             <para>
             If, however, you later use the OlBuffer object with a different subsystem type, these values
             are determined by subsystem with which it is used. For example, if the OlBuffer object 
             was initially associated with an analog output subsystem, and then put on an analog input 
             subsystem queue, the values for voltage range, channel list, data encoding, and resolution 
             will be updated to reflect the settings of the analog input subsystem when the OlBuffer object
            	is completed by the device driver.
            	</para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.Finalize">
            <summary>
            Object Finalize method.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.Reallocate(System.Int32)">
             <summary>
             Reallocates the internal data buffer of the OlBuffer object to contain the specified number of samples.
            	The existing internal data buffer is deallocated and any data that it contained is lost.
             </summary>
             <param name="inNumSamples">Maximum number of samples that the internal data buffer can contain.
             This parameter determines the size of the internal buffer. Note that if you use the 
             <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> property to return CJC data in the 
             data stream, ensure that you set the size of the internal buffer to be twice as large to
             accommodate the returned CJC values for each channel (iNumSamples = number of samples per channel x 2).
             </param>
            <returns>True if allocation was successful; otherwise, returns False.</returns>
        </member>
        <member name="F:OpenLayers.Base.OlBuffer.disposed">
            <summary>
            flag to track dispose call
            </summary>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.Dispose">
            <summary>
            Deallocates the internal buffer of the OlBuffer object.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.Dispose(System.Boolean)">
            <summary>
            Deallocates the internal buffer of the OlBuffer object.  
            </summary>
            <param name="disposing">True if called externally; False if called by Finalize.</param>
            <remarks>Overrides must call through to this base class.</remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsResistance(OpenLayers.Base.ChannelListEntry)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into resistance values,
            and then copies these resistance values into a user-declared array of 64-bit floating-point (double) values.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <returns>An array of resistance values, represented as 64-bit floating-point (double) values, that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence of the 
            ChannelListEntry is copied.
            This method raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> property for the channel is not Resistance.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsTemperatureDouble(OpenLayers.Base.ChannelListEntry,OpenLayers.Base.TemperatureUnit)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into temperature values,
            and then copies these temperature values into a user-declared array of 64-bit floating-point (double) values.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <param name="tempUnit">The units (Celsius, Fahrenheit, or Kelvin) for the temperature values.</param>
            <returns>An array of temperature values that are associated with a specified ChannelListEntry, 
            represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the buffer into temperature values, 
            and then copies this data into a user-declared array of 64-bit floating-point values (double). 
            <para> For thermocouple channels, the data is converted into temperature based on the channel's <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property.
            </para> 
            <para>For RTD channels, the data is converted into temperature based on the channel's <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/>, 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/>, <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/>, 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/>, and <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> properties.
            </para> 
            <para>For thermistor channels, the data is converted into temperature based on the channel's <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermistorACoefficient"/>, 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermistorBCoefficient"/>, and <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermistorCCoefficient"/> properties.
            </para> 
            <para>
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is converted and copied. 
            </para>
            <para>
            If <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsTemperatureDataInStream"/> is True, this method 
            raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> is set to None.
            If <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> is set to True, the CJC values 
            (in temperature) are interleaved with the channel data, where the first value represents the temperature of the input 
            channel and the second value represents the CJC temperature, in degrees C; the returned array 
            will be twice the number of valid samples (<see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>).
            </para>
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsTemperatureByte(OpenLayers.Base.ChannelListEntry,OpenLayers.Base.TemperatureUnit,System.Int32)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into temperature values,
            and then copies these temperature values into a user-declared array of bytes.  Each temperature value is stored as
            an Int32, and takes 4 bytes.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <param name="tempUnit">The units (Celsius, Fahrenheit, or Kelvin) for the temperature values.</param>
            <param name="scale">The amount by which to scale each temperature value. By default, this is 1.</param>
            <returns>An array of temperature values that is associated with a specified ChannelListEntry, 
            represented as bytes.
            </returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the buffer into temperature values,
            and then copies this data into a user-declared array of bytes. 
            <para> For thermocouple channels, the data is converted into temperature based on the channel's <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property.
            </para> 
            <para>For RTD channels, the data is converted into temperature based on the channel's <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/>, 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/>, <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/>, 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/>, and <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> properties.
            </para> 
            <para>For thermistor channels, the data is converted into temperature based on the channel's <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermistorACoefficient"/>, 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermistorBCoefficient"/>, and <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermistorCCoefficient"/> properties.
            </para> 
            <para>
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is converted and copied. 
            </para>
            <para>
            If <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsTemperatureDataInStream"/> is True, this method 
            raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> is set to None.
            If <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> is set to True, the CJC values 
            (in temperature) are interleaved with the channel data, where the first value represents the temperature of the input 
            channel and the second value represents the CJC temperature, in degrees C; the returned array 
            will be twice the number of valid samples (<see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>).
            </para>
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsVoltsByte(OpenLayers.Base.ChannelListEntry,System.Int32)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into voltage values,
            and then copies these voltage values into a user-declared array of bytes.  Each voltage value is stored as
            an Int32, and takes 4 bytes. 
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <param name="scale">The amount by which to scale each voltage value. By default, this is 1.</param>
            <returns>An array of voltage values that is associated with a specified ChannelListEntry, 
            represented as bytes.
            </returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the buffer into voltage values,
            and then copies this data into a user-declared array of bytes. 
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is converted and copied. 
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawByte">
             <summary>
             Copies the data, as raw counts, from the internal buffer of the OlBuffer object into a user-declared array of bytes. 
             </summary>
             <returns>An array of raw counts represented as bytes.</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer into a user-declared array of bytes.
             This method is useful for file I/O operations. Since each sample takes more than one array entry, other uses may be limited.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawByte(OpenLayers.Base.ChannelListEntry)">
             <summary>
             Copies only the data associated with a specified ChannelListEntry, as raw counts, from the internal buffer of the 
             OlBuffer object into a user-declared array of bytes. 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as bytes.</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the OlBuffer object, the data for each 
             occurrence of the ChannelListEntry is copied.
             This method is useful for file I/O operations. Since each sample takes more than one array entry, other uses may be limited.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawUInt16">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is Binary, 
             copies the data, as raw counts, from the internal data buffer of an OlBuffer object into a 
             user-declared array of unsigned, 16-bit integers (ushort).
             </summary>
             <returns>An array of raw counts represented as unsigned 16-bit integers (ushort).</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer of the OlBuffer object
             into a user-declared array of unsigned 16-bit integers (ushort).
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawInt16">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is TwosComplement, 
             copies the data, as raw counts, from the internal buffer of the OlBuffer object into a user-declared array
             of signed, 16-bit integers (short).
             </summary>
             <returns>An array of raw counts represented as signed 16-bit integers (short).</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer of an OlBuffer object
             into a user-declared array of signed 16-bit integers (short).
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawUInt32">
             <summary>
             Used when the resolution of the subsystem is greater than 16 bits, 
             copies the data, as raw counts, from the internal buffer of an OlBuffer object into
             a user-declared array of unsigned, 32-bit integers (uint).
             </summary>
             <returns>An array of raw counts represented as unsigned 32-bit integers (uint).</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer of an OlBuffer
             object into a user-declared array of unsigned 32-bit integers (uint).
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawUInt32(OpenLayers.Base.ChannelListEntry)">
             <summary>
             Used when the resolution of the subsystem is greater than 16-bits, copies only the data associated 
             with a specified ChannelListEntry, as raw counts, from the internal buffer of an OlBuffer object 
             into a user-declared array of unsigned 32-bit integers (uint). 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as unsigned 32-bit integers (uint).</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the buffer, the data for each 
             occurrence of the ChannelListEntry is copied.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawUInt16(OpenLayers.Base.ChannelListEntry)">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is Binary, 
             copies only the data associated with a specified ChannelListEntry, as raw counts, from the
             internal buffer of an OlBuffer object into a user-declared array of unsigned 16-bit integers (ushort). 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as unsigned 16-bit integers (ushort).</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the buffer, the data for each 
             occurrence of the ChannelListEntry is copied.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRawInt16(OpenLayers.Base.ChannelListEntry)">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is TwosComplement, 
             copies only the data associated with a specified ChannelListEntry, as raw counts, from the internal buffer 
             of an OlBuffer object into a user-declared array of signed 16-bit integers (short). 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as signed 16-bit integers (short).</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the buffer, the data for each 
             occurrence of the ChannelListEntry is copied.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.PutDataAsRaw(System.UInt16[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is 16 bits or less, copies all the data, as raw counts, 
             from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="data">The user-specified array of raw counts to copy, represented as unsigned 16-bit integers (ushort).</param>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.PutDataAsRaw(System.UInt32[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is greater than 16 bits, copies all the data, 
             as raw counts, from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="data">The user-specified array of raw counts to copy, represented as unsigned 32-bit integers (uint).</param>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.PutDataAsRaw(OpenLayers.Base.ChannelListEntry,System.UInt16[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is 16 bits or less, copies only the raw count values for a specified 
             ChannelListEntry from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="data">The user-specified array containing the channel data, in raw counts, to copy.
             This data is represented as unsigned 16-bit integers (ushort).</param>
             <remarks>
             <para>
             Note that if the ChannelListEntry occurs more than once in the array, the data for each occurrence 
             of the ChannelListEntry is copied. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.PutDataAsRaw(OpenLayers.Base.ChannelListEntry,System.UInt32[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is greater than 16 bits, copies only the raw count values for a specified 
             ChannelListEntry from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="data">The user-specified array containing the channel data, in raw counts, to copy.
             This data is represented as unsigned 32-bit integers (uint).</param>
             <remarks>
             <para>
             Note that if the ChannelListEntry occurs more than once in the array, the data for each occurrence of the ChannelListEntry is copied. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.PutDataAsVolts(System.Double[])">
            <summary>
             Copies voltages from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             This method copies all the voltage values from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="data">The user-specified array containing the voltage values to copy. The data is represented as 64-bit floating-point values (double).</param>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.PutDataAsVolts(OpenLayers.Base.ChannelListEntry,System.Double[])">
            <summary>
             Copies voltages from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             This method copies only the voltage values for a specified 
             ChannelListEntry from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="data">The user-specified array containing the channel data, in voltage, to copy.
             This data is represented as 64-bit floating-point values (double).</param>
             <remarks>
             <para>
             Note that if the ChannelListEntry occurs more than once in the array, the data for each occurrence of the ChannelListEntry is copied. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsSensor(OpenLayers.Base.ChannelListEntry)">
            <summary>
            This method converts only the data for a specified ChannelListEntry in the internal buffer of an
            OlBuffer object into sensor values (using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorGain"/>
            and <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorOffset"/>), and then copies these sensor values
            into a user-declared array of 64-bit floating-point values (double). 
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/>, which represents the channel whose data you want to copy.</param>
            <returns>A user-declared array of sensor values associated with all the samples for a given ChannelListEntry, represented as 64-bit floating-point values (double).</returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the internal buffer of 
            an OlBuffer object into sensor values, then copies this data into a user-declared array of 64-bit floating-point values (double). 
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is copied. 
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsSensor(OpenLayers.Base.ChannelListEntry,System.Int32,System.Int32)">
            <summary>
            This method converts a range of samples for each occurrence of ChannelListEntry in the
            internal buffer of an OlBuffer object into sensor values (using the
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorGain"/> and <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorOffset"/>),
            and then copies these sensor values into a user-declared array of 64-bit floating-point values (double).
            It allocates and returns an array size equal to the number of valid samples.  
            The samples that are outside of the requested range are 0.0.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="startSample">The first sample in the OlBuffer object that you want to convert and copy;
            this number is zero-based.</param>
            <param name="endSample">The last sample in the range that you want to convert and copy; 
            this number is inclusive.</param>
            <returns>A user-declared array of sensor values associated with a range of samples 
            for a given ChannelListEntry, represented as 64-bit floating-point values (double).</returns>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsSensor">
             <summary>
             Converts the data from the internal buffer of an OlBuffer object into sensor values (using the 
             <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorGain"/> and <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorOffset"/>),
             and then copies these sensor values into a user-declared array of 64-bit floating-point values (double).
             </summary>
             <returns>A user-specified array of sensor values, represented as 64-bit floating-point values (double).
             </returns>
             <remarks>
             This method copies all the samples from the buffer into a user-declared array of 64-bit floating-point values (double). 
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsVolts(OpenLayers.Base.ChannelListEntry)">
            <summary>
            For a specific channel, converts the data from the internal buffer of an OlBuffer object into voltage values,
            and then copies these voltage values into a user-declared array of 64-bit floating-point values (double).
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to copy.</param>
            <returns>An array of voltages that are associated with a specified ChannelListEntry, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the buffer into voltage values, and then
            copies this data into a user-declared array of 64-bit floating-point values (double). 
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is copied. 
            <para>
            For thermocouple channels (<see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> property is Thermocouple), 
            the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property is typically set to None before using 
            this method. However, if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property
            is set to a value other than None, this method returns the value of the channel in temperature.
            Additionally, if <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> 
            is set to True, the CJC values (in temperature) are interleaved with the channel data, where the first value represents the temperature or
            voltage of the input channel (based on the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>), and the second 
            value represents the CJC temperature, in degrees C; the returned array will be twice the number of valid samples
            (<see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>).
            </para>
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsVolts(OpenLayers.Base.ChannelListEntry,System.Int32,System.Int32)">
            <summary>
            Converts a range of samples for a specified channel in the internal buffer of an OlBuffer object
            into voltage values, and then copies these voltage values into a user-specified array.
            This method converts and copies one sample for each occurrence of channelNum in the <see cref="T:OpenLayers.Base.ChannelList"/>.
            This version of the method allocates and returns an array size equal to the number of valid samples.  
            The samples that are outside of the requested range are 0.0.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="startSample">The first sample in the internal buffer of the OlBuffer object that you want to convert and copy;
            this number is zero-based.</param>
            <param name="endSample">The last sample in the range that you want to convert and copy; 
            this number is inclusive.</param>
            <returns>A user-specified array of voltage values, which represent a range of samples 
            for a given channel.</returns>
            <remarks>
            For thermocouple channels (<see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> is Thermocouple), 
            the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property is typically set to None before using 
            this method. However, if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property
            is set to a value other than None, this method returns the values of the channels in temperature.
            Additionally, if <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> 
            is set to True, the CJC values (in temperature) are interleaved with the channel data, where the first value represents the temperature or
            voltage of the input channel (based on the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>), and the second 
            value represents the CJC temperature, in degrees C; the returned array will be twice the number of valid samples
            (<see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>).
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsVolts">
            <summary>
            Converts the data from the internal buffer of an OlBuffer object into voltage values,
            and then copies these voltage values into a user-declared array of 64-bit floating-point values (double).
            </summary>
            <returns>Returns a user-specified array of voltage values, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            This method copies all the data, as voltages, from the internal buffer of an OlBuffer object
            into a user-declared array of 64-bit floating-point values (double).
            <para>
            For thermocouple channels (<see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> is Thermocouple), 
            the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property is typically set to None before using 
            this method. However, if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property
            is set to a value other than None, this method returns the values of the channels in temperature. 
            Additionally, if <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> 
            is set to True, the CJC values (in temperature) are interleaved with the channel data, where the first value 
            represents the temperature or voltage of the input channel (based on the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>),
            and the second value represents the CJC temperature, in degrees C; the returned array will be twice the number of valid samples
            (<see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.SampleAt(System.Int32)">
            <summary>
            Returns the raw count value at the specified index of the internal buffer that is 
            encapsulated by the OlBuffer object. 
            </summary>
            <param name="index">The zero-based index number of the internal buffer.</param>
            <returns>The raw count value. This value is represented as a signed, 32-bit integer (int).</returns>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsRpm(OpenLayers.Base.ChannelListEntry,System.Int32)">
            <summary>
            For a specified ChannelListEntry, converts the tachometer data from the internal buffer of an OlBuffer object into RPM values,
            and then copies these values into a user-declared array of 64-bit floating-point (double) values.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <param name="pulsesPerRevolution">Specifies the number of pulses per revolution for the tachometer.</param>
            <returns>An array of RPM values, represented as 64-bit floating-point (double) values, that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            This method raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.SubsystemType"/> is not a tachometer.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsStrain(OpenLayers.Base.ChannelListEntry)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into microstrain values,
            and then copies these microstrain values into a user-declared array of 64-bit floating-point (double) values.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <returns>An array of microstrain values, represented as 64-bit floating-point (double) values, that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence of the 
            ChannelListEntry is copied.
            This method raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> is not StrainGage.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsStrain">
            <summary>
            Converts the data from the internal buffer of an OlBuffer object into strain values,
            and then copies these strain values into an array of 64-bit floating-point values (double).
            </summary>
            <returns>Returns a user-specified array of strain values, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            Any non-Strain Gage channels in the ChannelList return 32-bit, raw, unsigned integer values.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsBridgeBasedSensor(OpenLayers.Base.ChannelListEntry)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into
            native data values from a bridge-based sensor.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <returns>An array of values, represented as 64-bit floating-point (double) values, that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            This method raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> is not Bridge or Strain Gage.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsBridgeBasedSensor">
            <summary>
            Converts the data from the internal buffer of an OlBuffer object into native data values 
            from a bridge-based sensor.  
            </summary>
            <returns>Returns a user-specified array of values, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            Any non-bridge channels in the ChannelList return 32-bit, raw, unsigned integer values.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsNormalizedBridgeOutput(OpenLayers.Base.ChannelListEntry)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into
            (mV/Vexc) data values from a bridge-based sensor.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <returns>Returns a user-specified array of mV/V values, represented as 64-bit floating-point values (double), that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            This method raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> is not StrainGage or Bridge.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsNormalizedBridgeOutput">
            <summary>
            Converts the data from the internal buffer of an OlBuffer object into (mV/Vexc) data values from a bridge-based sensor.  
            </summary>
            <returns>Returns a user-specified array of mV/V values, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            Any non-bridge channels in the ChannelList return 32-bit, raw, unsigned integer values.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.OlBuffer.GetDataAsCurrent(OpenLayers.Base.ChannelListEntry)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into current values,
            and then copies these current values into a user-declared array of 64-bit floating-point (double) values.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <returns>An array of current values, represented as 64-bit floating-point (double) values, that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence of the 
            ChannelListEntry is copied.
            This method raises an exception if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> is not set Current.
            </remarks>	
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.Item(System.Int32)">
            <summary>
            Returns the data, as a raw count, at the specified index in the internal buffer of
            the OlBuffer object.
            </summary>
            <returns>The raw count, represented as a signed, 32-bit integer (int).</returns>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.SampleSizeInBytes">
            <summary>
            Returns the size, in bytes, of the samples in the internal buffer of the OlBuffer object.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.ValidSamples">
             <summary>
             Returns the number of valid samples in the internal buffer of the OlBuffer object.
             </summary>
             <remarks>
             For analog input operations, the ValidSamples property is set to the number of samples in the completed buffer under normal circumstances.
             However, in some cases, like if <see cref="M:OpenLayers.Base.AnalogInputSubsystem.Abort"/> is 
             called in the middle of an operation, ValidSamples reflects the number
             of samples in the buffer when Abort was called. In addition, if Abort or
             <see cref="M:OpenLayers.Base.AnalogInputSubsystem.Stop"/> is called, any OlBuffer objects 
             whose state is Inprocess will have a ValidSamples of 0.
             <para>
             If your device supports thermocouples (<see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsThermocouple"/> is True), 
             and <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> 
             is set to True, CJC values (in temperature) are interleaved with the channel data in the buffer, where the first value 
             represents the temperature or voltage of the input channel (based on the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/>), 
             and the second value represents the CJC temperature, in degrees C. In this case, the returned array will be twice the number of valid samples
             (<see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>).
             </para>
             <para>
             For analog output operations, ValidSamples is always equal to the maximum number of samples
             that the buffer was allocated to hold. 
             If you are using thermocouples and <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ReturnCjcTemperaturesInStream"/> is set to True,
             CJC values will be interleaved with the channel data; therefore, the returned array will be twice the number of valid samples. 
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.InternalValidSamples">
            <summary>
            This is the same property as ValidSamples except that we use it internally as R/W
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.BufferSizeInBytes">
            <summary>
            Returns the size of the internal data buffer, in bytes.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.BufferSizeInSamples">
            <summary>
            Returns the size of the internal data buffer, in samples.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.State">
            <summary>
            Returns the current state (Idle, Queued, InProcess, Completed, or Released) 
            of the OlBuffer object.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.InternalState">
            <summary>
            This property is the same as State except that we use it internally as R/W
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.RawDataFormat">
            <summary>
            Returns the format of the raw data (Int16, Uint16, Int32, Float, or Double).
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.Tag">
            <summary>
            Gets or sets a user-defined value.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.Encoding">
            <summary>
            Returns the data encoding of the raw data (Binary or TwosComplement).
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.VoltageRange">
            <summary>
            Returns the upper and lower limits of the voltage range for the associated subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.Resolution">
            <summary>
            Returns the resolution of the associated subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlBuffer.ChannelListOffset">
            <summary>
            Returns the index into the <see cref="T:OpenLayers.Base.ChannelList"/> that corresponds to the 
            first sample in the internal buffer of the OlBuffer object. 
            </summary>
        </member>
        <member name="T:OpenLayers.Base.OlBuffer.BufferState">
            <summary>
            Contains the possible values for the state of an <see cref="T:OpenLayers.Base.OlBuffer"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.OlBuffer.BufferState.Idle">
            <summary>The OlBuffer object has been created, but has not been queued to a subsystem.</summary>
        </member>
        <member name="F:OpenLayers.Base.OlBuffer.BufferState.Queued">
            <summary>The OlBuffer object has been queued to a subsystem.</summary>
        </member>
        <member name="F:OpenLayers.Base.OlBuffer.BufferState.InProcess">
            <summary>The OlBuffer object has been sent to the device driver for processing.
            A maximum of eight OlBuffer objects can be in process at one time.</summary>
        </member>
        <member name="F:OpenLayers.Base.OlBuffer.BufferState.Completed">
            <summary>For an input operation, the internal buffer of the OlBuffer object has been filled 
            with data, and has not been put back on the queue for the subsystem.
            For an output operation, all the data in the internal buffer of the OlBuffer object has 
            been output, and the OlBuffer object has not been put back on the queue for the subsystem.</summary>
        </member>
        <member name="F:OpenLayers.Base.OlBuffer.BufferState.Released">
            <summary>The internal buffer of the OlBuffer object has been deallocated.</summary>
        </member>
        <member name="T:OpenLayers.Base.BufferQueue">
            <summary>
            The BufferQueue class provides an interface for queuing <see cref="T:OpenLayers.Base.OlBuffer"/> objects to a device's subsystem for 
            continuous I/O operations.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.BufferQueue.QueueBuffer(OpenLayers.Base.OlBuffer)">
             <summary>
             Adds an <see cref="T:OpenLayers.Base.OlBuffer"/> object to the subsystem queue. 
              </summary>
             <remarks>
             If the subsystem is incompatible with the specified <see cref="T:OpenLayers.Base.OlBuffer"/> object,
             an exception is raised.
             </remarks>
            
             <param name="inBuffer">The <see cref="T:OpenLayers.Base.OlBuffer"/> object to add to the subsystem queue.</param>
        </member>
        <member name="M:OpenLayers.Base.BufferQueue.DequeueBuffer">
            <summary>
            Removes the <see cref="T:OpenLayers.Base.OlBuffer"/> object from the front of the subsystem queue, and returns it to the user.
            </summary>
            <returns>The <see cref="T:OpenLayers.Base.OlBuffer"/> object from the front of the queue.</returns>
        </member>
        <member name="M:OpenLayers.Base.BufferQueue.FreeAllQueuedBuffers">
            <summary>
            Removes all <see cref="T:OpenLayers.Base.OlBuffer"/> objects from the subsystem queue and deallocates the associated internal buffer.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BufferQueue.QueuedCount">
            <summary>
            Returns the number of <see cref="T:OpenLayers.Base.OlBuffer"/> objects that are on the subsystem 
            queue (OlBuffer objects are in the queued state).
            </summary>
            <remarks>
            When you start a continuous operation, the device takes up to eight OlBuffer objects from the 
            subsystem queue and begins filling the associated internal buffers (for input operations) or
            outputting data from the associated internal buffers (for output operations) at the 
            specified clock rate. 
            The state of these OlBuffer objects changes from queued to inprocess. 
            Every time an OlBuffer object transitions from the queued state to the inprocess state, the 
            value of the QueuedCount property decreases by one and the value of the InProcessCount property 
            increases by 1.
            For example, assume that you call QueueBuffer for 10 OlBuffer objects; the QueuedCount is now 10 and 
            the InProcessCount is 0. Once you call Start, up to 8 OlBuffer objects are moved from the queued 
            state to the inprocess state. 
            The QueuedCount is now 2 and the InProcessCount is now 8. 
            As each OlBuffer object is completed, an event is generated allowing you to process the buffer.
            Assume that you do not put the OlBuffer objects back on the queue after processing them. 
            In this case, the QueuedCount decreases while the InProcessCount remains the same (as a new 
            inprocess OlBuffer object replaces a completed OlBuffer object) until
            the QueuedCount gets to 0, then the InProcessCount starts decreasing until all the OlBuffer objects
            are completed.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.BufferQueue.InProcessCount">
            <summary>
            Returns the number of <see cref="T:OpenLayers.Base.OlBuffer"/> objects that have been taken from subsystem queue and sent to the device for processing (buffers are in the inprocess state). 
            </summary>
            <remarks>
            When you start a continuous operation, the device takes up to eight OlBuffer objects from the 
            subsystem queue and begins filling the associated internal buffers (for input operations) or 
            outputting data from the associated internal buffers for output operations) at the specified 
            clock rate. The state of these OlBuffer objects changes from queued to inprocess. 
            Every time an OlBuffer object transitions from the queued state to the inprocess state, the value
            of the QueuedCount property decreases by one and the value of the InProcessCount property
            increases by 1. For example, assume that you call QueueBuffer for 10 OlBuffer objects;
            the QueuedCount is now 10 and the InProcessCount is 0. Once you call Start, up to 8 OlBuffer objects
            are moved from the queued state to the inprocess state. 
            The QueuedCount is now 2 and the InProcessCount is now 8. 
            As each OlBuffer object is completed, an event is generated allowing you to process the buffer.
            Assume that you do not put the OlBuffer objects back on the queue after processing them.
            In this case, the QueuedCount decreases while the 
            InProcessCount remains the same (as a new inprocess OlBuffer object replaces a completed OlBuffer object)
            until the QueuedCount gets to 0, then the InProcessCount starts decreasing until all the OlBuffer
            objects are completed.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.ChannelList">
             <summary>
             A ChannelList specifies a collection of <see cref="T:OpenLayers.Base.ChannelListEntry"/> objects for use in
             a continuous I/O operation.
             Each ChannelListEntry object encapsulates a physical channel connection 
             for a specific subsystem.
             </summary>
             <remarks>A ChannelList is typically used in continuous analog input and analog output operations. You can
             add and/or insert a channel to the ChannelList by physical channel number, by name, or as a ChannelListEntry object. </remarks>
             <example> 
             The following example demonstrates how to add and insert channels in the ChannelList, and set the gain for a channel.
             
             <code language="cs"> 
             // Get a DeviceMgr object and Device object.
             Device device = DeviceMgr.Get()
             device = deviceMgr.GetDevice (devicename);
             // Get an AnalogInputSubsystem object.
             AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
             // Create a ChannelListEntry object for analog input channel 0.
             ChannelListEntry ch0 = new ChannelListEntry ( ainSS.SupportedChannels.GetChannelInfo (SubsystemType.AnalogInput, 0 ) );
             // Add the ChannelListEntry object ch0 to the ChannelList.
             ainSS.ChannelList.Add (ch0);
            
             // Insert analog input channel 1 as a physical channel into the first position (index 0) of the channel list.
             // This will push ChannelListEntry object ch0 to the 2nd position (index 1) of the channel list. 
             ainSS.ChannelList.Insert (0, 1);
             
             // For the ChannelListEntry at index 0 (which is analog input channel 1), change the gain to 2 using the Item property.
             ainSS.ChannelList[0].Gain = 2;
             </code>
             <code language="vb">
             ' Get a DeviceMgr object
             deviceMgr As DeviceMgr = DeviceMgr.Get()
             ' Allocate the device with the specified device number
             device = deviceMgr.GetDevice(deviceName)
            	' Allocate the first element of the analog input subsystem 
             ainSS = device.AnalogInputSubsystem(0)
             ' Create a ChannelListEntry object for analog input channel 0.
             Dim ch0 As New ChannelListEntry(ainSS.SupportedChannels.GetChannelInfo(SubsystemType.AnalogInput, 0))
             ' Add the ChannelListEntry object ch0 to the ChannelList.
             ainSS.ChannelList.Add(ch0)
             
             ' Insert analog input channel 1 as a physical channel into the first position (index 0) of the channel list.
             ' This will push ChannelListEntry object ch0 to the 2nd position (index 1) of the channel list. 
             ainSS.ChannelList.Insert(0, 1)
            
             ' For the ChannelListEntry at index 0 (which is analog input channel 1), change the gain to 2 using the Item property.
             ainSS.ChannelList(0).Gain = 2
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Add(System.Int32)">
            <summary>
             Adds a channel to the end of the ChannelList.
             </summary>
             <param name="physicalChannelNumber">
             The number of the physical channel on the specified subsystem to add to the ChannelList.
            </param>
             <returns>A <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the physical channel that was added. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <remarks>
             Adds a channel, specified as a physical channel number, to the end of the ChannelList
             and returns a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the channel.
             <para>
             This method provides a simple way to add channels into the ChannelList, 
             particularly if you are adding channels that are native to the subsystem type
             (such as analog input channels on an analog input subsystem). For native channels,
             the physical channel number always equals the logical channel number. While non-native
             channels, such as digital inputs that are streamed through the analog input subsystem, 
             can also be added this way, the physical channel number is not the same as the logical
             channel number, so you may find it easier to add a channel by name or by <see cref="T:OpenLayers.Base.ChannelListEntry"/> object instead.
            </para>
            </remarks>
             <example> 
             This example demonstrates how to add a analog input channel 0 by physical
             channel number to the ChannelList.
             <code language="cs">
             ch = ainSS.ChannelList.Add (0);
            </code>
             <code language="vb">
             ch = ainSS.ChannelList.Add(0)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Insert(System.Int32,System.Int32)">
            <summary>
             Inserts a channel at the specified index of the ChannelList.
            </summary>
             <param name="index">Zero-based index of the ChannelList at which to insert the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object.</param>
             <param name="physicalChannelNumber">The physical channel number of the 
             specified subsystem to add to the ChannelList.</param>
             <returns>A <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the physical channel that was inserted. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <remarks>
             Inserts a channel, specified as a physical channel number, at the specified index
             of the ChannelList and returns a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the channel.
             <para>
             This method provides a simple way to insert channels into the ChannelList, 
             particularly if you are inserting channels that are native to the subsystem type
             (such as analog input channels on an analog input subsystem). For native channels,
             the physical channel number always equals the logical channel number. While non-native
             channels, such as digital inputs that are streamed through the analog input subsystem, 
             can also be inserted this way, the physical channel number is not the same as the logical
             channel number, so you may find it easier to insert a channel by name or by <see cref="T:OpenLayers.Base.ChannelListEntry"/> object instead.
            </para>
            </remarks>
             <example> 
             This example demonstrates how to insert analog input channel 3 (by physical
             channel number) at index 0 of the ChannelList.
             <code language="cs"> 
             ch = ainSS.ChannelList.Insert (0, 3);
            </code>
            <code language="vb">
             ch = ainSS.ChannelList.Insert(0,3)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Add(OpenLayers.Base.ChannelListEntry)">
            <summary>
             Adds a channel to the end of the ChannelList.
             </summary>
             <remarks>
             Adds the specified <see cref="T:OpenLayers.Base.ChannelListEntry"/> object to the end of the ChannelList.
             </remarks>
             <param name="value"><see cref="T:OpenLayers.Base.ChannelListEntry"/> object to add to the ChannelList.</param>
             <returns>The index at which the ChannelListEntry object has been added to the
             ChannelList.</returns>
             <example> 
             This example demonstrates how to add a ChannelListEntry to the 
             ChannelList.
             <code language="cs"> 
             // Create a ChannelListEntry object for analog input channel 2
             // of the AnalogInputSubsystem (ainSS).
             ChannelListEntry ch2 = new ChannelListEntry ( ainSS.SupportedChannels.GetChannelInfo (SubsystemType.AnalogInput, 2 ) );
             // Add the ChannelListEntry object ch2 to the ChannelList.
             ainSS.ChannelList.Add (ch2);
            </code>
             <code language="vb">
             ' Create a ChannelListEntry object for analog input channel 2
             ' of the AnalogInputSubsystem (ainSS).
             Dim ch2 As New ChannelListEntry(ainSS.SupportedChannels.GetChannelInfo(SubsystemType.AnalogInput, 2))
             ' Add the ChannelListEntry object ch2 to the ChannelList.
             ainSS.ChannelList.Add(ch2)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Insert(System.Int32,OpenLayers.Base.ChannelListEntry)">
            <summary>
             Inserts a channel at the specified index of the ChannelList.
            </summary>
             <remarks>
             Inserts a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object at the specified index of the ChannelList.
             </remarks>
             <param name="index">Zero-based index at which to insert the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object.</param>
             <param name="value">The <see cref="T:OpenLayers.Base.ChannelListEntry"/> object to insert.</param>
             <example> 
             This example inserts ChannelListEntry ch3 at index 1 of the ChannelList for an
             AnalogInputSubsystem (ainSS).
             <code language="cs">
             // Create a ChannelListEntry object for analog input channel 3
             // of the AnalogInputSubsystem (ainSS).
             ChannelListEntry ch3 = new ChannelListEntry ( ainSS.SupportedChannels.GetChannelInfo (SubsystemType.AnalogInput, 3 ) );
             // Insert the ChannelListEntry object ch3 at index 1 of the ChannelList.
             ainSS.ChannelList.Insert (1, ch3);
            </code>
             <code language="vb">
             ' Create a ChannelListEntry object for analog input channel 3
             ' of the AnalogInputSubsystem (ainSS).
             Dim ch3 As New ChannelListEntry(ainSS.SupportedChannels.GetChannelInfo(SubsystemType.AnalogInput, 3))
             ' Insert the ChannelListEntry object ch3 at index 1 of the ChannelList.
             ainSS.ChannelList.Insert(1, ch3)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Add(System.String)">
            <summary>
             Adds a channel to the end of the ChannelList.
             </summary>
             <remarks>
             Adds a channel, specified by name, to the end of the ChannelList
             and returns a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the channel.
             </remarks>
             <param name="physicalChannelName">
             The name of the channel to add to the ChannelList. The channel name must match a channel
             name contained in the <see cref="T:OpenLayers.Base.SupportedChannels"/> object for the specified subsystem.
            </param>
             <returns>A <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the physical channel that was added. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <example> 
             This example demonstrates how to add a channel by name to the ChannelList.
             <code language="cs"> 
             //Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels[1].Name = " Sensor";
             //Add the channel named Sensor to the ChannelList.
             ch = ainSS.ChannelList.Add("Sensor");
             </code>
             <code language="vb">
             'Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels(1).Name = "Sensor"
             'Add the channel named Sensor to the ChannelList.
             ch = AinSS.ChannelList.Add("Sensor")
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Insert(System.Int32,System.String)">
            <summary>
             Inserts a channel at the specified index of the ChannelList.
            </summary>
             <remarks>
             Inserts a channel, specified by name, at the specified index
             of the ChannelList and returns a <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the channel.
             </remarks>
             <param name="index">Zero-based index of the ChannelList at which to insert the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object.</param>
             <param name="physicalChannelName">The name of a channel on the specified subsystem to add to the ChannelList.
             The channel name must match the name of a channel contained in the <see cref="T:OpenLayers.Base.SupportedChannels"/> object for the specified subsystem type.</param>
             <returns>A <see cref="T:OpenLayers.Base.ChannelListEntry"/> object for the physical channel that was inserted. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <example> 
             This example inserts the analog input channel with the name Sensor at index 2
             of the ChannelList and returns a ChannelListEntry object (ch).
             <code language="cs"> 
             //Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels[1].Name = " Sensor";
             //Insert the channel named Sensor at index 2 of the ChannelList.
             ch = ainSS.ChannelList.Insert(2, "Sensor");
             </code>
             /// <code language="vb">
             'Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels(1).Name = "Sensor"
             'Insert the channel named Sensor at index 2 of the ChannelList.
             ch = AinSS.ChannelList.Insert(2, "Sensor")
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.IndexOf(OpenLayers.Base.ChannelListEntry)">
            <summary>
             Searches for the specified channel and returns the zero-based index of the first occurrence of the channel within the ChannelList.
            </summary>
             <remarks>
             Searches for the specified <see cref="T:OpenLayers.Base.ChannelListEntry"/> object and returns the zero-based index of the 
             first occurrence of the ChannelListEntry object within the ChannelList.
             </remarks>
             <param name="value">The <see cref="T:OpenLayers.Base.ChannelListEntry"/> object to locate.</param>
             <returns>
             If found, returns the zero-based index of the first occurrence of the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object within the 
            	ChannelList; otherwise, returns -1.
             </returns>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.IndexOf(System.Int32)">
            <summary>
             Searches for the specified channel and returns the zero-based index of the first occurrence of the channel within the ChannelList.
            </summary>
             <remarks>
             Searches for the specified physical channel number and returns 
             the zero-based index of the first occurrence of the physical channel
             number within the ChannelList.
             </remarks>
             <param name="physicalChannelNumber">The number of the physical channel for the associated subsystem to locate.</param>
             <returns>
             If found, returns the zero-based index of the first occurrence of the 
             phyiscal channel number within the ChannelList; otherwise, returns -1.
             </returns>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Remove(OpenLayers.Base.ChannelListEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:OpenLayers.Base.ChannelListEntry"/> object from the ChannelList.
            </summary>
            <param name="value">The <see cref="T:OpenLayers.Base.ChannelListEntry"/> object to remove from the ChannelList.</param>
            <example> 
            This example removes the first instance of ChannelListEntry object Ch0
            from the ChannelList object.
            <code language="cs">
            AinSS.ChannelList.Remove(Ch0);
            </code>
            <code language="vb">
            AinSS.ChannelList.Remove(Ch0)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.OnClear">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.OnInsert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.OnRemove(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.Contains(OpenLayers.Base.ChannelListEntry)">
            <summary>
            Returns True if the ChannelList contains a specific <see cref="T:OpenLayers.Base.ChannelListEntry"/> 
            object; otherwise, returns False.
            </summary>
            <param name="value">The <see cref="T:OpenLayers.Base.ChannelListEntry"/> object to locate in the ChannelList.</param>
            <returns>Returns True if the ChannelList contains the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object; 
            otherwise, returns False.</returns>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.RemoveEntry(System.Int32)">
            <summary>
            Remove the channel list entry at the specified location.  The entries
            that follow the removed entry move up to occupy the vacated spot.
            </summary>
            <param name="entryNumber">Channel list entry number</param>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.InsertEntry(System.Int32,OpenLayers.Base.SubsystemType,System.Int32,System.Int32,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Add the specified channel to the channel list at the specified entry number.  subsystemChannel
            specifies the word number for logical channels with multi-word data.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.ChannelList.InsertEntry(System.Int32,System.Int16,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Adds an entry to the Channel List.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ChannelList.Item(System.Int32)">
            <summary>
            Returns or replaces the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object at the specified index of the ChannelList.
            </summary>
            <remarks>Index must be less than ChannelList.Count.</remarks>
            <example> 
            This example replaces the ChannelListEntry at index 1 of the ChannelList
            with ChannelListEntry Ch3.
            <code language="cs">
            AinSS.ChannelList[1] = Ch3;
            </code>
            <code language="vb">
            AinSS.ChannelList(1) = Ch3
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.Base.ChannelList.CGLDepth">
            <summary>
            Returns the maximum number of channels or <see cref="T:OpenLayers.Base.ChannelListEntry"/> objects that the ChannelList can contain.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SupportedChannels">
             <summary>
             The SupportedChannels class describes, through a collection of <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> objects, the
             channels available for a particular subsystem.
             </summary>
             <remarks>
             It is often the case that a subsystem of one type is capable of including data in its
             data stream from a different subsystem type. For example, an analog input subsystem,
             which has its own native analog input channels, may also stream data from non-native 
             channels, such as a digital input port or counter/timer channel. Typically, these 
             non-native channels are described in a channel list with numbers beyond the range 
             of its native channels. The Open Layers for .NET Class Library allows you to deal 
             with non-native channels more easily by describing channels in terms of 
             subsystem type and logical channel numbers or channel names.
             </remarks>
             <example>
             <code>
            		// rename channel 0
            		ainSS.SupportedChannels[0].Name = "Pressure Sensor";
            
            		// add all available channels to the channel select list
            		int numChannels = ainSS.SupportedChannels.Count;
            		for (int i=0; i != numChannels-1; ++i)
            		{
            			// get the channel using the physical channel number
            			SupportedChannelInfo curChannel = ainSS.SupportedChannels[i];
            			lbAin.Items.Add (curChannel.Name);
            		}
             </code>
             </example>
        </member>
        <member name="M:OpenLayers.Base.SupportedChannels.GetChannelInfo(OpenLayers.Base.SubsystemType,System.Int32)">
            <summary>
            Returns a SupportedChannelInfo object for the specified subsystem type
            and logical channel number.
            </summary>
            <remarks>
            If the channel has multiple logical channel words, this method returns
            the SupportedChannelInfo object for logical channel word 0.
            </remarks> 
            <param name="ssType">Subsystem type.</param>
            <param name="subsystemChannel">Logical channel number for the subsystem type.</param>
            <returns>SupportedChannelInfo object associated with the specified channel.</returns>
        </member>
        <member name="M:OpenLayers.Base.SupportedChannels.GetChannelInfo(System.String)">
            <summary>
            Returns the SupportedChannelInfo object for the specified channel name.
            </summary>
            <remarks>
            If the channel has multiple logical channel words, this method returns
            the SupportedChannelInfo object for logical channel word 0.
            </remarks> 
            <param name="name">Channel name</param>
            <returns>SupportedChannelInfo object associated with the specified channel.</returns>
        </member>
        <member name="M:OpenLayers.Base.SupportedChannels.GetChannelInfo(OpenLayers.Base.SubsystemType,System.Int32,System.Int32)">
            <summary>
            Returns the SupportedChannelInfo object for the specified subsystem type,
            logical channel, and logical channel word.
            </summary>
            <remarks>
            For channels like 32-bit counter/timers that return multi-word data,
            the logical channel word, which is zero-based, maps the physical channel
            to the data word that it returns. For example, a logical channel word of 0
            indicates that this channel returns the first 16-bits of data. A logical 
            channel word of 1 indicates that this channel returns the second 16-bits 
            of data. For channels that do not return multi-word data, the value of 
            the logical channel word is -1. 
            </remarks> 
            <param name="ssType">Subsystem type.</param>
            <param name="subsystemChannel">Logical channel number for the subsystem type.</param>
            <param name="channelWord">Logical channel word for the specified logical channel number.</param>
            <returns>SupportedChannelInfo object associated with the logical channel word.</returns>
        </member>
        <member name="M:OpenLayers.Base.SupportedChannels.GetChannelInfo(System.Int32)">
            <summary>
            Returns the SupportedChannelInfo object for the specified physical channel number.
            </summary>
            <remarks>
            If the channel has multiple logical channel words, this method returns
            the SupportedChannelInfo object for logical channel word 0.
            </remarks> 
            <param name="physicalChannel">Physical channel number of the subsystem.</param>
            <returns>SupportedChannelInfo object associated with the specified channel.</returns>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannels.Item(System.Int32)">
             <summary>
             Returns the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object at the specified index ([index])
             of the <see cref="T:OpenLayers.Base.SupportedChannels"/> object.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannels.Count">
            <summary>
            Returns the number of <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> objects in the SupportedChannels collection.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SupportedChannelInfo">
            <summary>
            The SupportedChannelInfo class describes a specific channel of a subsystem. You 
            access a SupportedChannelInfo object using the <see cref="T:OpenLayers.Base.SupportedChannels"/> class. 
            </summary>
            <remarks>
            When you get a subsystem of a specified type, the software automatically determines
            the number of available channels for the subsystem and creates a SupportedChannelInfo
            object for each channel, containing the following information:
            physical channel number, logical channel number, logical channel word, channel name,
            sensor gain, and sensor offset.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.RTDType">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.Base.RTDType"/> for the RTD that is connected to the channel. This property is used 
            in the Callendar-Van Dusen transfer function to convert raw counts to temperature. 
            </summary>        
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType">
             <summary>
             Gets and sets the <see cref="T:OpenLayers.Base.ThermocoupleType"/> that is connected to this channel.
             </summary>
             <remarks>
             By default, a J thermocouple type is used.
             The thermocouple type is used to convert a sample from raw counts to a
             temperature value in Celsius, Fahrenheit, or Kelvin. The software supplies the appropriate
             linearization algorithm based on the specified thermocouple type.
             To get the range for a specified thermocouple type, use the <see cref="M:OpenLayers.Base.Utility.GetThermocoupleRange(OpenLayers.Base.ThermocoupleType,System.Double@,System.Double@,OpenLayers.Base.TemperatureUnit)"/> method.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.CjcChannel">
             <summary>
             Gets the CJC (cold junction compensation) channel that is associated with this input channel.
             </summary>
             <remarks>
             This property applies only to devices that support a channel (not an internal source) as the CJC source.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.SensorGain">
             <summary>
             Gets and sets the gain value to apply to the sensor that is connected to this channel.
             </summary>
             <remarks>
             By default, the sensor gain is 1.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.SensorOffset">
             <summary>
             Gets and sets the offset value to apply to the sensor that is connected to this channel.
             </summary>
             <remarks>
             By default, the sensor offset is 0.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.Name">
            <summary>
            Gets and sets the name of the associated channel.  
            </summary>
            <remarks>
            Each SupportedChannelInfo object in a SupportedChannels collection object
            must have a unique name. By default, the channels have the following names,
            which you can modify, if you wish:
            For analog input channels, the channels are named Ain0, Ain1, and so on.
            For analog output channels, the channels are named Aout0, Aout1, and so on.
            For digital input channels, the channels are named Din0, Din1, and so on.
            For counter/timer channels, the channels are named CT0 Word 0, 
            CT0 Word 1, CT1 Word 0, CT1 Word 1, and so on.
            For quadrature decoder channels, the channels are named Quad0 Word 0, 
            Quad0 Word 1, Quad1 Word 0, Quad1 Word 1, and so on.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.SubsystemType">
            <summary>
            Returns the type of subsystem (AnalogInput, AnalogOutput, DigitalInput,
            DigitalOutput, CounterTimer, or QuadratureDecoder) that is associated
            with this channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.LogicalChannelNumber">
            <summary>
            Returns the zero-based logical channel number that is associated with this channel. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.LogicalChannelWord">
            <summary>
            For channels with multi-word data (such as a 32-bit counter), returns
            the zero-based word number that is associated with this channel. 
            For channels without multi-word data, returns -1. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.PhysicalChannelNumber">
            <summary>
            Returns the physical channel number that is associated with this channel. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.Subsystem">
            <summary>
            Returns the subsystem object (<see cref="T:OpenLayers.Base.AnalogInputSubsystem"/>,
             <see cref="T:OpenLayers.Base.AnalogOutputSubsystem"/>, 
            <see cref="T:OpenLayers.Base.DigitalInputSubsystem"/>, <see cref="T:OpenLayers.Base.DigitalOutputSubsystem"/>,
            <see cref="T:OpenLayers.Base.CounterTimerSubsystem"/>, <see cref="T:OpenLayers.Base.TachSubsystem"/>,
            or <see cref="T:OpenLayers.Base.QuadratureDecoderSubsystem"/>) 
            that is associated with this channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.Coupling">
             <summary>
             Gets and sets the <see cref="T:OpenLayers.Base.CouplingType"/> to apply to the channel.
             </summary>
             <remarks>
             By default, DC coupling is selected for all channels.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.ExcitationCurrentSource">
             <summary>
             Gets and sets the <see cref="T:OpenLayers.Base.ExcitationCurrentSource"/> to apply to the channel.
             </summary>
             <remarks>
             By default, the excitation current source is disabled for all channels.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.ExcitationCurrentValue">
             <summary>
             Gets and sets the value of the excitation current source to apply to the channel.
             </summary>
             <remarks>
             This value is applicable only when the excitation current source is internal.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.LogicalSsBaseClockFrequency">
            <summary>
            Returns the frequency of the base clock for the logical subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageOffsetNullingValueInVolts">
             <summary>
             Gets and sets the value of the bridge output (in volts) in the unstrained/unloaded condition.
             Internally, this value is subtracted from any measurements before the voltage is converted to strain.
             </summary>
             <remarks>
             A balanced bridge under ideal conditions with zero strain applied produces zero volts. In practice, however, the output of a bridge in an
             unstrained condition is offset from zero slightly due to imperfect matching of bridge resistances.
             To perform offset nulling, read the value of the bridge in an unstrained condition using the AnalogInputSubsystem.GetSingleValueAsVolts
             method, and then specify the value that you read using this property. All subsequent data is then offset by this reference value. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageShuntCalibrationValue">
             <summary>
             Gets and sets the shunt calibration value, in microstrain, for the bridge. Internally, the software multiplies the
             channel measurement with this value to adjust the gain of the device.
             </summary>
             <remarks>
             For an analog input channel that supports a strain gage input and shunt calibration, you can use shunt calibration to correct
             span errors in the measurement path. You can also use shunt calibration to verify the integrity of the setup by turning on the
             shunt resistor before you acquire data.
             <para>
             If you want to use the internal shunt calibration resistor provided by the device, ensure that
             the internal RSHUNT+ and RSHUNT– lines are connected across the gage and that no strain is applied to the specimen, and then
             enable the resistor by setting the
             <see cref="P:OpenLayers.Base.SupportedChannelInfo.StrainGageShuntCalibrationResistorEnabled"/> property to True. (Be
             sure to set this value back to False when the shunt calibration procedure is complete.)
             </para>
             <para>
             Once the shunt resistor is enabled, read the value of the bridge using the AnalogInputSubsystem.GetSingleValueAsStrain method. Then,
             divide the expected value of the bridge by the actual value that you 
             read, and specify the result, in microstrain, using this property. 
             </para>
             <para>
             Refer to the user's manual for your device for more information on shunt calibration.  
             </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageBridgeConfiguration">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.Base.StrainGageBridgeConfiguration"/> of the strain gage that is connected to the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.BridgeConfiguration">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.Base.BridgeConfiguration"/> of the full-bridge-based sensor or general-purpose bridge that is connected to the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageLeadWireResistance">
            <summary>
            Gets and sets the lead wire resistance of the strain gage or bridge, in ohms.
            </summary>        
            <remarks>
            If remote sensing is used, specify 0 for this property.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageGageFactor">
            <summary>
            Gets and sets the gage factor, or sensitivity, of the strain gage.
            </summary>
            <remarks>
            This value is supplied by the manufacturer of the stain gage. Refer to the documentation for your strain gage for more information.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageNominalResistance">
            <summary>
            Gets and sets the resistance, in ohms, of the strain gage or bridge while it is not under strain/load.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGagePoissonRatio">
             <summary>
             Gets and sets the Poisson ratio for the strain gage.
             </summary>
             <remarks>
             The Poisson ratio is a material-dependent constant that is the ratio of transverse (perpendicular) contraction to axial strain.
             Specify the Poisson ratio when the analog input channel is configured for one of the following strain gage configurations:
             FullBridgeBendingPoisson, FullBridgeAxialPoisson, or HalfBridgePoisson.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageShuntCalibrationResistorEnabled">
             <summary>
             Specifies whether the internal shunt calibration resistor is enabled (switched in) or disabled (not used).
             </summary>
             <remarks>
             <para>
             If you want to use the internal shunt calibration resistor provided by the device, ensure that
             the internal RSHUNT+ and RSHUNT– lines are connected across the gage and that no strain is applied to the specimen, and then
             enable the resistor by setting this property to True. (Be sure to set this value back to False when the shunt
             calibration procedure is complete.)
             </para>
             <para>
             Once the shunt resistor is enabled, read the value of the strain gage or bridge using the AnalogInputSubsystem.GetSingleValueAsStrain method. Then,
             divide the expected value of the strain gage or bridge by the actual value that you read, and specify the result, in microstrain,
             using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.StrainGageShuntCalibrationValue"/> property. 
             </para>
             <para>
             Refer to the user's manual for your device for more information on shunt calibration.  
             </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.SupportsInputTermination">
            <summary>
            Specifies whether input termination is supported for the analog input channel.
            </summary> 
            <remarks>
            If input termination is supported for the channel, you can enable or disable the bias return termination resistor using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.InputTerminationEnabled"/> property.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.InputTerminationEnabled">
            <summary>
            Specifies whether input termination is enabled (bias return termination resistor is switched in) or disabled (not used) for the analog input channel.
            </summary>
            <remarks>
            This property is used only if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.SupportsInputTermination"/> property is True.
            Refer to the hardware documentation for your device to determine when the bias return termination resistor should be enabled and disabled.
            Typically, the bias return termination resistor should be enabled for floating and grounded voltage and current sources, 
            and disabled for voltage and current sources that have a grounded reference.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.TransducerRatedOutputInMv">
            <summary>
            Gets and sets the rated output of a bridge-based sensor or transducer, such as a load cell, in terms of mV/V excitation.
            </summary>
            <remarks>
            This value is supplied by the manufacturer of the bridge-based sensor or transducer.
            The bridge-based sensor or transducer is based on the full-bridge configuration.  
            </remarks> 
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.TransducerCapacity">
            <summary>
            Gets and sets the full-scale range of the bridge-based sensor or transducer, such as a load cell, in its native engineering units.
            </summary>
            <remarks>
            This value is supplied by the manufacturer of the bridge-based sensor or transducer.
            The bridge-based sensor or transducer is based on the full-bridge configuration.  
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.IOType">
            <summary>
            Gets the measurement <see cref="T:OpenLayers.Base.IOType"/> that is supported by the channel. 
            </summary>
            <remarks>
            Some devices, such as the DT9829, support multiple sensor inputs for each channel and return a value of MultiSensor for the IOType property.
            If the channel has an IOType of MultiSensor, set the sensor type for the channel using the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property. 
            Most devices support only one IOType for each channel; setting the <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property is not applicable in this case.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType">
            <summary>
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> property for the channel is MultiSensor, gets and sets the type of measurement that is supported by the channel.
            </summary>
            <remarks>
            Some devices, such as the DT9829, support multiple sensor inputs for each channel and return a value of MultiSensor for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> property.
            If the channel has an <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> of MultiSensor, set the sensor type for the channel using the MultiSensor property. 
            Most devices support only one <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> for each channel; setting the MultiSensorType property is not applicable in this case.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.StrainGageTeds">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.StrainGageTeds"/> object.
            </summary>
            <remarks>Use this interface to read TEDS data directly from the strain gage hardware or from a data file for a strain gage (virtual TEDS).</remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.BridgeSensorTeds">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.Base.BridgeSensorTeds"/> object.
            </summary>
            <remarks>Use this interface to read TEDS data directly from the bridge-based sensor hardware, such as a load cell, or from a data file 
            for a bridge-based sensor (virtual TEDS).</remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.SupportedMultiSensorTypes">
            <summary>
            For channels that return an <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> of MultiSensor, returns an array containing the available sensor types (of type <see cref="T:OpenLayers.Base.IOType"/>) that the channel supports.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.ThermistorACoefficient">
            <summary>
            Gets and sets the A coefficient that is used in the Steinhart-Hart transfer function for the thermistor. 
            </summary>      
            <remarks>
            The Steinhart-Hart transfer function converts raw counts to temperature for thermistor measurements.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.ThermistorBCoefficient">
            <summary>
            Gets and sets the B coefficient that is used in the Steinhart-Hart transfer function for the thermistor.
            </summary>   
             <remarks>
            The Steinhart-Hart transfer function converts raw counts to temperature for thermistor measurements.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.ThermistorCCoefficient">
            <summary>
            Gets and sets the C coefficient that is used in the Steinhart-Hart transfer function for the thermistor.
            </summary>     
            <remarks>
            The Steinhart-Hart transfer function converts raw counts to temperature for thermistor measurements.
            </remarks>   
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.RtdR0">
            <summary>
            Gets and sets the nominal resistance of the RTD, in ohms, at 0 deg C.  
            Set the value of this property only if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> property is Custom or Pt3850 (unless you are using a 100 Ohm RTD).
            </summary>        
            <remarks>
            This property is used in the Callendar-Van Dusen transfer function to convert raw counts to temperature for RTD measurements. 
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3850 or Custom, specify a value of 100 (the default value), 500, or 1000 for the RtdR0 property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3750, a value of 1000 is used for the RtdR0 property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3911, a value of 100 is used for the RtdR0 property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3916, a value of 100 is used for the RtdR0 property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3920, a value of 98.129 is used for the RtdR0 property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3928, a value of 100 is used for the RtdR0 property.
            </remarks>    
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient">
            <summary>
            Gets and sets the A coefficient that used in the Callendar-Van Dusen transfer function for the RTD.
            Set the value of this property only if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> property is Custom.
            </summary>        
            <remarks>
            The Callendar-Van Dusen transfer function converts raw counts to temperature for RTD measurements. 
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3750, a value of 0.00381 is used for the RtdACoefficient  property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3850, a value of 0.0039083 is used for the RtdACoefficient  property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3911, a value of 0.0039692 is used for the RtdACoefficient  property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3916, a value of 0.0039739 is used for the RtdACoefficient  property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3920, a value of 0.0039787 is used for the RtdACoefficient  property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3928, a value of 0.0039888 is used for the RtdACoefficient  property.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient">
            <summary>
            Gets and sets the B coefficient that is used in the Callendar-Van Dusen transfer function for the RTD. 
            Set the value of this property only if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> property is Custom.
            </summary>   
            <remarks>
            The Callendar-Van Dusen transfer function converts raw counts to temperature for RTD measurements. 
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3750, a value of –0.000000602 is used for the RtdBCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3850, a value of –0.0000005775 is used for the RtdBCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3911, a value of –0.00000058495 is used for the RtdBCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3916, a value of –0.000000587 is used for the RtdBCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3920, a value of –0.0000005869 is used for the RtdBCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3928, a value of –0.0000005915 is used for the RtdBCoefficient  property.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient">
            <summary>
            Gets and sets the C coefficient that is used in the Callendar-Van Dusen transfer function for the RTD.
            Set the value of this property only if the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> property is Custom.
            </summary>   
            <remarks>
            The Callendar-Van Dusen transfer function converts raw counts to temperature for RTD measurements. 
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3750, a value of –0.0000000000060 is used for the RtdCCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3850, a value of –0.000000000004183 is used for the RtdCCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3911, a value of –0.000000000004233 is used for the RtdCCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3916, a value of –0.0000000000044 is used for the RtdCCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3920, a value of –0.000000000004167 is used for the RtdCCoefficient property.
            If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> is Pt3928, a value of –0.00000000000385 is used for the RtdCCoefficient property.
            </remarks>        
        </member>
        <member name="P:OpenLayers.Base.SupportedChannelInfo.SensorWiringConfiguration">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.Base.SensorWiringConfiguration"/> for the channel. 
            Set the value of this property when the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> or <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property
            is Rtd, Resistance, or Thermistor.
            </summary>
            <remarks>
            Ensure that the value of this property matches the wiring configuration for your channel.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.ChannelListEntry">
            <summary>
            A ChannelListEntry object encapsulates a physical channel connection that is
            associated with a specific subsystem.
            A <see cref="T:OpenLayers.Base.ChannelList"/> object is a collection of ChannelListEntry objects.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.ChannelListEntry.#ctor(OpenLayers.Base.SupportedChannelInfo)">
            <summary>
            Creates and returns a ChannelListEntry object for a specified channel, based on the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> information for that channel. 
            </summary>
            <remarks>
            If you add or insert a channel into a ChannelList by physical channel number or name (using the 
            <see cref="M:OpenLayers.Base.ChannelList.Add(System.Int32)"/> or <see cref="M:OpenLayers.Base.ChannelList.Insert(System.Int32,System.Int32)"/> methods), the ChannelListEntry
            object is automatically created and returned.
            </remarks>
            <param name="channelInfo">The <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object to use when 
            creating the ChannelListEntry object.</param>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.SubsystemType">
             <summary>
             Returns the subsystem type (AnalogInput, AnalogOutput, DigitalInput, DigitalOutput,
             CounterTimer, QuadratureDecoder, or Tachometer) for the ChannelListEntry object.
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.SensorGain">
            <summary>
             Returns the sensor gain value for the ChannelListEntry object.
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object associated with the channel. 
            <para>
             By default, the sensor gain is 1.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
             </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.SensorOffset">
             <summary>
             Returns the sensor offset value for the ChannelListEntry object.
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object associated with the channel. 
            <para>
             By default, the sensor offset is 0.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
             </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.LogicalChannelNumber">
             <summary>
             Returns the zero-based logical channel number for the 
             ChannelListEntry object. 
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.LogicalChannelWord">
            <summary>
            For channels with multi-word data (such as a 32-bit counter), returns
            the zero-based word number of this ChannelListEntry object. For channels without
            multi-word data, returns -1. 
            </summary>
            <remarks>
             This information is included in the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.PhysicalChannelNumber">
            <summary>
            Returns the physical channel number for the ChannelListEntry object. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.Gain">
            <summary>
            Gets and sets the gain to apply to the input signal of the associated ChannelListEntry object. 
            </summary>
            <remarks>
            The default value is 1. If the gain is not supported, the closest gain value that is supported by 
            the subsystem is applied to the channel. Performing a get on this
            property after a set will return the actual gain applied to the channel.
            </remarks>
            <example> 
            This example sets the gain of the channel at index 0 of the ChannelList to 2.
            <code language="cs">
            ainSS.ChannelList[0].Gain = 2;
            </code>
            <code language="vb">
            ainSS.ChannelList(0).Gain = 2
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.Inhibit">
            <summary>
            Gets and sets the inhibit state for the ChannelListEntry object. If True, the ChannelListEntry object 
            takes up an entry in the <see cref="T:OpenLayers.Base.ChannelList"/> and is factored into the conversion time, 
            but data is not returned for the ChannelListEntry object. If False (the default value), data is returned for 
            the ChannelListEntry object.
            </summary>
            <example> 
            This example sets the inhibit value to True for the channel at index 0 of the ChannelList.
            <code language="cs">
            ainSS.ChannelList[0].Inhibit = 1;
            </code>
            <code language="vb">
            ainSS.ChannelList(0).Inhibit = 1
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.Base.ChannelListEntry.Name">
             <summary>
             Gets the name of the channel that is associated with the ChannelListEntry object. 
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.Clock">
            <summary>
            The Clock class provides an interface for controlling the clock of a subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Clock.Frequency">
            <summary>
            Gets and sets the frequency of the internal clock source.
            </summary>
            <remarks>
            The driver sets the frequency of the internal clock as close as possible
            to the value that you specified in the Frequency property. You can 
            determine the actual frequency that was set on the hardware by reading
            the value of the Frequency property after the subsystem has been 
            configured (using the <see cref="M:OpenLayers.Base.SubsystemBase.Config"/> method).
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.Source">
            <summary>
            Gets and sets the current clock source (Internal or External).
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Clock.ExtClockDivider">
            <summary>
            Gets and sets the current value of the external clock divider.
            </summary>
            <remarks>
            The external clock divider is used to determine the frequency of
            the external clock source. The frequency of the external clock input
            divided by the external clock divider determines the frequency of
            at which to pace the operation.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.SupportsInternalClock">
            <summary>
            Returns True if the subsystem supports an internal clock source; otherwise, returns False.
            </summary>
            <remarks>Specify the clock source using the <see cref="P:OpenLayers.Base.Clock.Source"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.SupportsExternalClock">
            <summary>
            Returns True if the subsystem supports an external clock source; otherwise, returns False.
            </summary>
            <remarks>Specify the clock source using the <see cref="P:OpenLayers.Base.Clock.Source"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.MinFrequency">
            <summary>
            Returns the minimum allowable internal clock frequency supported
            by the subsystem.
            </summary>
            <remarks>Set the frequency of the internal clock using the <see cref="P:OpenLayers.Base.Clock.Frequency"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.MaxFrequency">
            <summary>
            Returns the maximum allowable internal clock frequency supported
            by the subsystem.
            </summary>
            <remarks>Set the frequency of the internal clock using the <see cref="P:OpenLayers.Base.Clock.Frequency"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.MinExtClockDivider">
            <summary>
            Returns the minimum allowable external clock divider value supported
            by the subsystem.
            </summary>	
            <remarks>Set the external clock divider using the <see cref="P:OpenLayers.Base.Clock.ExtClockDivider"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.MaxExtClockDivider">
            <summary>
            Returns the maximum allowable external clock divider value supported
            by the subsystem.
            </summary>
            <remarks>Set the external clock divider using the <see cref="P:OpenLayers.Base.Clock.ExtClockDivider"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Clock.BaseClockFrequency">
            <summary>
            Returns the frequency of the base clock for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Clock.SupportsSimultaneousClocking">
            <summary>
            Returns True if the subsystem supports simultaneous clocking.
            </summary>
            <remarks>
            Some subsystems allow you to read or update multiple channels on a single clock pulse. 
            This property allows you to determine whether multiple channels can be read or updated on a 
            single clock pulse.
            </remarks>	
        </member>
        <member name="T:OpenLayers.Base.CounterTimerSubsystem">
            <summary>
            The CounterTimerSubsystem class provides the properties, methods, and events for performing counter/timer operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.CounterTimerSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns a CounterTimerSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.CounterTimerSubsystem(System.Int32)"/> method rather than this constructor
            to return a counter/timer subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the counter/timer subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the counter/timer subsystem.</param>
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.Dispose(System.Boolean)">
            <summary>
            cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.ToString">
            <summary>
            Returns a description of the counter/timer subsystem and element.
            </summary>
            <returns>A string that describes the counter/timer subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.Start">
            <summary>
            Starts a continuous counter/timer operation.
            </summary>			
            <remarks>
            This method overrides the Start method in the base class.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.Stop">
            <summary>
            Stops the current continuous counter/timer operation.
            </summary>
            <remarks>
            This method overrides the Stop method in the base class.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.Abort">
            <summary>
            Stops a continuous operation on the counter/timer subsystem. 
            For this subsystem type, Abort behaves like <see cref="M:OpenLayers.Base.CounterTimerSubsystem.Stop"/>.
            </summary>
            <remarks>
            This method overrides the Abort method in the base class.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.ReadCount">
            <summary>
            Returns the current count of the counter/timer.
            This call is typically meaningful only 
            for counter/timer subsystems that are set up for <see cref="F:OpenLayers.Base.CounterMode.Count"/>,
            <see cref="F:OpenLayers.Base.CounterMode.UpDown"/>, or <see cref="F:OpenLayers.Base.CounterMode.ContinuousMeasure"/> mode.
            </summary>
            <returns>The current count of the counter/timer subsystem.</returns>
        </member>
        <member name="M:OpenLayers.Base.CounterTimerSubsystem.SetDefaultConfig">
            <summary>
            set driver config struct to defaults.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsCount">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.Count"/> (event counting) operations; otherwise, returns False.
            </summary>
            <remarks>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsRateGenerate">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.RateGenerator"/> operations;
            otherwise, returns False.
            </summary>
            <remarks>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsOneShot">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.OneShot"/> operations; otherwise,
            returns False.
            </summary>
            <remarks>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsOneShotRepeat">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.OneShotRepeat"/> operations; 
            otherwise, returns False.
            </summary>
            <remarks>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsUpDown">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.UpDown"/> operations; otherwise, 
            returns False.
            </summary>		
            <remarks>You do not specify the gate type in software for UpDown operations.
            <para>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsMeasure">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.Measure"/> 
            operations; otherwise, returns False.
            </summary>
            <remarks>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsContinuousMeasure">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.CounterMode.ContinuousMeasure"/>  
            operations; otherwise, returns False.
            </summary>
            <remarks>Set the operation mode of the counter/timer using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsHighToLowPulse">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.PulseType.HighToLow"/> output pulses; 
            otherwise, returns False. 
            </summary>
            <remarks>Set the pulse output type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsLowToHighPulse">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.PulseType.LowToHigh"/> output pulses; 
            otherwise, returns False. 
            </summary>
            <remarks>Set the pulse output type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateRising">
            <summary>
            Returns True if the <see cref="F:OpenLayers.Base.EdgeSelect.GateRising"/> signal (rising edge of the gate signal can be used in a 
            <see cref="F:OpenLayers.Base.CounterMode.Measure"/> or <see cref="F:OpenLayers.Base.CounterMode.ContinuousMeasure"/> operation on the subsystem; otherwise, returns False.
            </summary>
            <remarks>Set the edge that starts the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> property;
            set the edge that stops the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateFalling">
             <summary>
             Returns True if the <see cref="F:OpenLayers.Base.EdgeSelect.GateFalling"/> signal (falling edge of the gate signal) can be used in a 
            <see cref="F:OpenLayers.Base.CounterMode.Measure"/> or <see cref="F:OpenLayers.Base.CounterMode.ContinuousMeasure"/> operation on the subsystem; otherwise, returns False.
             </summary>
             <remarks>Set the edge that starts the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> property;
             set the edge that stops the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsClockRising">
            <summary>
            Returns True if the <see cref="F:OpenLayers.Base.EdgeSelect.ClockRising"/> signal (rising edge of the clock signal) can be used in a 
            <see cref="F:OpenLayers.Base.CounterMode.Measure"/> or <see cref="F:OpenLayers.Base.CounterMode.ContinuousMeasure"/> operation on the subsystem; otherwise, returns False.
            </summary>
            <remarks>Set the edge that starts the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> property;
            set the edge that stops the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsClockFalling">
            <summary>
            Returns True if the <see cref="F:OpenLayers.Base.EdgeSelect.ClockFalling"/> signal (falling edge of the clock signal) can be used in a 
            <see cref="F:OpenLayers.Base.CounterMode.Measure"/> or <see cref="F:OpenLayers.Base.CounterMode.ContinuousMeasure"/> operation on the subsystem; otherwise, returns False.
            </summary>
            <remarks>Set the edge that starts the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> property;
            set the edge that stops the operation with the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateNone">
            <summary>
            Returns True if the subsystem supports a software (<see cref="F:OpenLayers.Base.GateType.None"/>)
            gate type; otherwise, returns False.
            </summary>
            <remarks>Set the gate type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateHighLevel">
            <summary>
            Returns True if the counter/timer subsystem supports a <see cref="F:OpenLayers.Base.GateType.HighLevel"/>
            gate type; otherwise, returns False. 
            </summary>
            <remarks>Set the gate type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateLowLevel">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.GateType.LowLevel"/> gate type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the gate type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateHighEdge">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.GateType.HighEdge"/> gate type;
            otherwise, returns False.
            </summary>
            <remarks>Set the gate type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateLowEdge">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.GateType.LowEdge"/> gate type; 
            otherwise false.
            </summary>
            <remarks>Set the gate type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsGateLevel">
            <summary>
            Returs True if the subsystem supports a <see cref="F:OpenLayers.Base.GateType.Level"/> gate type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the gate type using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsVariablePulseWidth">
            <summary>
            Returns True if the subsystem supports programmable pulse widths; 
            otherwise, returns False.
            </summary>
            <remarks>If the subsystem supports programmable pulse widths, set the pulse width using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseWidth"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsCascading">
            <summary>
            Returns True if the subsystem supports cascading counter/timers; 
            otherwise, returns False.
            </summary>
            <remarks>Set the cascade mode using the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CascadeMode"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.CascadeMode">
            <summary>
            Gets and sets the cascade mode (Cascade or Single) for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.GateType">
            <summary>
            Gets and sets the gate type (None, HighLevel, LowLevel, 
            HighEdge, LowEdge, or Level) for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge">
            <summary>
            Gets and sets the start edge for a Measure or ContinuousMeasure
            operation on the subsystem.
            </summary>
            <remarks>
            To determine which edges are supported for the start edge, use the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.SupportedEdgeTypes"/> property for the subsystem element.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportedEdgeTypes">
            <summary>
            Returns an array containing the available edge types (of type <see cref="T:OpenLayers.Base.EdgeSelect"/>) that are supported by the subsystem. 
            </summary>
            <remarks>
            These edges are used by the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> and <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/>
            properties to set up a measure mode operation. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge">
            <summary>
            Gets and sets the stop edge for a Measure or ContinuousMeasure
            operation on the subsystem.
            </summary>
            <remarks>
            To determine which edges are supported for the stop edge, use the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.SupportedEdgeTypes"/> property for the subsystem element.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.PulseWidth">
             <summary>
             Gets and sets the output pulse width, in percentage, for the subsystem. By default, the pulse width is 50%.
             </summary>
             <remarks>
             In the case of a <see cref="F:OpenLayers.Base.CounterMode.OneShot"/> or <see cref="F:OpenLayers.Base.CounterMode.OneShotRepeat"/> operation, the pulse width is automatically set to 100%. 
             The value of the PulseWidth property is ignored.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.PulseType">
            <summary>
            Gets and sets the output pulse type (HighToLow or LowToHigh) for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode">
            <summary>
            Gets and sets the counter/timer mode (Count, RateGenerator, OneShot,
            OneShotRepeat, UpDown, Measure, or ContinuousMeasure) for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.CounterTimerSubsystem.SupportsInterrupt">
            <summary>
            Returns True if the subsystem supports interrupts; otherwise,
            returns False.
            </summary>
        </member>
        <member name="E:OpenLayers.Base.CounterTimerSubsystem.EventDoneEvent">
            <summary>
            Occurs on some devices, such as the DT340, when a digital input line changes state or when
            an interval timer operation is complete.
            </summary>
        </member>
        <member name="E:OpenLayers.Base.CounterTimerSubsystem.MeasureDoneEvent">
            <summary>
            Occurs when an edge-to-edge measurement (Measure) operation is complete.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.DigitalInputSubsystem">
            <summary>
            The DigitalInputSubsystem class provides the properties, methods, and events for performing
            digital input operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.DigitalInputSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns a DigitalInputSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.DigitalInputSubsystem(System.Int32)"/> method rather than this constructor
            to return a digital input subsystem. 
            </remarks>
            <param name="device">Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the digital input subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the digital input subsystem.</param>	
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.Dispose(System.Boolean)">
            <summary>
            cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.ToString">
            <summary>
            Returns a description of the digital input subsystem and element.
            </summary>
            <returns>A string that describes the digital input subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.Start">
            <summary>
            Starts a continuous operation on the digital input subsystem. 
            Currently, only Open Layers devices that support interrupt-on-change
            on the digital input subsystem can perform continuous digital input operations.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.Stop">
            <summary>
            Stops the current continuous digital input operation.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.Abort">
             <summary>
             Aborts the current continuous digital input operation.
             </summary>
             <remarks>
             For this subsystem type, Abort and <see cref="M:OpenLayers.Base.DigitalInputSubsystem.Stop"/> behave identically.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.GetSingleValue">
            <summary>
            Returns a single data value from the digital input subsystem.
            </summary>
            <returns>The value of the digital input port that is associated 
            with the digital input subsystem.</returns>	
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.WriteInterruptOnChangeMask(System.UInt32)">
            <summary>
            Selects a set of digital input lines on which to perform an interrupt-on-change operation.
            When any of the specified bits in the interruptOnChangeMask parameter changes
            state, the event InterruptOnChangeEvent gets raised. 
            </summary>
            <param name="interruptOnChangeMask"> Specifies the bit mask, where each bit represents 
            a digital input line. If a bit is set (value of 1), the event InterruptOnChangeEvent
            is generated when the corresponding digital line changes state. If a bit is not set (value is 0),
            the InterruptOnChangeEvent is not generated when the corresponding digital line changes state.</param>
            <remarks> Use the InterruptOnChangeHandler delegate to handle the 
            InterruptOnChangeEvent events as they occur.
            </remarks>	
        </member>
        <member name="M:OpenLayers.Base.DigitalInputSubsystem.ReadInterruptOnChangeMask">
            <summary>
            Returns a bit mask that indicates which lines within a digital input
            port will generate the event InterruptOnChangeEvent when they change state.
            </summary>
            <returns> The interrupt-on-change mask, where each bit represents
            a digital input line. If a bit is set, the event InterruptOnChangeEvent
            is generated when the corresponding digital line changes state.</returns>
        </member>
        <member name="P:OpenLayers.Base.DigitalInputSubsystem.SupportsInterruptOnChange">
            <summary>
            Returns True if the subsystem supports interrupt-on-change; otherwise,
            returns False.
            </summary>
        </member>
        <member name="E:OpenLayers.Base.DigitalInputSubsystem.InterruptOnChangeEvent">
            <summary>
            Add/remove a delegate to be called when the event InterruptOnChangeEvent occurs.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.DigitalOutputSubsystem">
            <summary>
            The DigitalOutputSubsystem class provides the properties, methods, and events for performing digital output operations.
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.DigitalOutputSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DigitalOutputSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns a DigitalOutputSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.DigitalOutputSubsystem(System.Int32)"/> method rather than this constructor
            to return a digital output subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the digital output subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the digital output subsystem.</param>
        </member>
        <member name="M:OpenLayers.Base.DigitalOutputSubsystem.Dispose(System.Boolean)">
            <summary>
            cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenLayers.Base.DigitalOutputSubsystem.ToString">
            <summary>
            Returns a description of the digital output subsystem and element.
            </summary>
            <returns>A string that describes the digital output subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DigitalOutputSubsystem.SetSingleValue(System.Int32)">
            <summary>
            Writes a single output value to the digital output subsystem.
            </summary>
            <param name="inCodeValue">The digital value to output.</param>	
        </member>
        <member name="T:OpenLayers.Base.DeviceMgr">
            <summary>
            The DeviceMgr is a singleton class that is responsible for managing Open Layers devices in 
            the system and for assigning <see cref="T:OpenLayers.Base.Device"/> objects. 
            </summary>
        </member>
        <member name="M:OpenLayers.Base.DeviceMgr.Get">
            <summary>
            Returns a DeviceMgr object.
            </summary>
            <returns>A DeviceMgr object.</returns>
            <remarks>
            You must call this method before you can perform any operation
            in the Open Layers for .NET Class Library.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DeviceMgr.GetDevice(System.String)">
            <summary>
            Returns a <see cref="T:OpenLayers.Base.Device"/> object for the specified device.
            </summary>
            <param name="deviceName">The name of the device as defined in the Open Layers Control Panel applet.</param>
            <returns>A <see cref="T:OpenLayers.Base.Device"/> object.</returns>
            <remarks>
            You must get a <see cref="T:OpenLayers.Base.Device"/> object for each Open Layers-compatible device that you want to use.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.DeviceMgr.HardwareAvailable">
            <summary>
            Returns a Boolean indicating whether an Open Layers-compatible device is plugged into the system;
            </summary>
            <returns>Returns True if an Open Layers-compatible device is plugged into the
            system; otherwise, returns False.</returns>
        </member>
        <member name="M:OpenLayers.Base.DeviceMgr.GetDeviceNames">
            <summary>
            Returns a list of all Open Layers-compatible devices plugged into the system. 
            </summary>
            <returns>An array of strings with the active device names.</returns>
        </member>
        <member name="T:OpenLayers.Base.SingleValuesInfoRaw">
            <summary>
            Used with <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.Base.SingleValuesInfoRaw[])"/>, specifies the analog output channel to update
            and the raw count value to output on that channel.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SingleValuesInfoRaw.PhysicalChannel">
            <summary>
            The number of the physical analog output channel to update. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SingleValuesInfoRaw.RawValue">
            <summary>
            The raw count value to output on the specified analog output channel. 
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SingleValuesInfoVolts">
            <summary>
            Used with <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.Base.SingleValuesInfoVolts[])"/>, specifies the analog output channel to update 
            and the voltage value to output on that channel.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SingleValuesInfoVolts.PhysicalChannel">
            <summary>
            The number of the physical analog output channel to update.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SingleValuesInfoVolts.Voltage">
            <summary>
            The voltage value to output on the specified analog output channel. 
            </summary>
        </member>
        <member name="T:OpenLayers.Base.ChannelDataType">
            <summary>
            Contains the possible values for the ChannelDataType parameter that is used 
            by the <see cref="P:OpenLayers.Base.OlBuffer.RawDataFormat"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelDataType.Int16">
            <summary>
            Signed, 16-bit values.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelDataType.Uint16">
            <summary>
            Unsigned, 16-bit values.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelDataType.Int32">
            <summary>
            Signed, 32-bit values.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelDataType.Float">
            <summary>
            32-bit float values.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelDataType.Double">
            <summary>
            64-bit float (double bit) values.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.TemperatureUnit">
            <summary>
            Contains the possible values for the tempUnit parameter that is used 
            by the <see cref="M:OpenLayers.Base.OlBuffer.GetDataAsTemperatureByte(OpenLayers.Base.ChannelListEntry,OpenLayers.Base.TemperatureUnit,System.Int32)"/> and
            <see cref="M:OpenLayers.Base.OlBuffer.GetDataAsTemperatureDouble(OpenLayers.Base.ChannelListEntry,OpenLayers.Base.TemperatureUnit)"/> methods.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TemperatureUnit.Celsius">
            <summary>
            Celsius
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TemperatureUnit.Fahrenheit">
            <summary>
            Fahrenheit
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TemperatureUnit.Kelvin">
            <summary>
            Kelvin
            </summary>
        </member>
        <member name="T:OpenLayers.Base.ThermocoupleType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> property in the SupportedChannelInfo class.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.None">
            <summary>
            None, return voltage for this channel
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.J">
            <summary>
            Type J
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.K">
            <summary>
            Type K
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.B">
            <summary>
            Type B
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.E">
            <summary>
            Type E
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.N">
            <summary>
            Type N
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.R">
            <summary>
            Type R
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.S">
            <summary>
            Type S
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ThermocoupleType.T">
            <summary>
            Type T
            </summary>
        </member>
        <member name="T:OpenLayers.Base.RTDType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> property in the SupportedChannelInfo class.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.RTDType.Pt3750">
            <summary>
            Temperature Coefficient of Resistance (TCR) value of 0.003750 Ohm / Ohm /° C used in the Callendar-Van Dusen transfer function for Platinum 1000 Ohm RTDs.
            This value is specified in the Low Cost standard. 
            If this value is set, a value of 1000 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/> property,
            a value of 0.00381 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/> property,
            a value of –0.000000602 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/> property,
            and a value of –0.0000000000060 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> property. These properties are used
            in the Callendar-Van Dusen equation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.RTDType.Pt3850">
            <summary>
            Temperature Coefficient of Resistance value of 0.003850 Ohm / Ohm /° C used in the Callendar-Van Dusen transfer function for Platinum 100, 500, and 1000 Ohm RTDs.
            This value is specified in the DIN/IEC 60751 and ASTM-E1137 standards.
            If this value is set, specify a value of 100, 500, or 1000 for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/> property. 
            A value of 0.0039083 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/> property,
            a value of –0.0000005775 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/> property,
            and a value of –0.000000000004183 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> property. These properties are used
            in the Callendar-Van Dusen equation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.RTDType.Pt3911">
            <summary>
            Temperature Coefficient of Resistance value of 0.003911 Ohm / Ohm /° C used in the Callendar-Van Dusen transfer function for Platinum 100 Ohm RTDs.
            This value is specified in the US Industrial Standard.
            If this value is set, a value of 100 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/> property, 
            a value of 0.0039692 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/> property,
            a value of –0.00000058495 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/> property,
            and a value of –0.000000000004233 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> property. These properties are used
            in the Callendar-Van Dusen equation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.RTDType.Pt3916">
            <summary>
            Temperature Coefficient of Resistance value of 0.003916 Ohm / Ohm /° C used in the Callendar-Van Dusen transfer function for Platinum 100 Ohm RTDs.
            This value is specified in the Japanese JISC 1604-1989 standard.
            If this value is set, a value of 100 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/> property, 
            a value of 0.0039739 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/> property,
            a value of –0.000000587 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/> property,
            and a value of –0.0000000000044 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> property. These properties are used
            in the Callendar-Van Dusen equation.
            </summary>		
        </member>
        <member name="F:OpenLayers.Base.RTDType.Pt3920">
            <summary>
            Temperature Coefficient of Resistance value of 0.003920 Ohm / Ohm /° C used in the Callendar-Van Dusen transfer equation to calculate temperature for a Platinum 100 Ohm RTDs.
            This value is specified in the SAMA RC21-4-1966 standard.
            If this value is set, a value of 98.129 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/> property, 
            a value of 0.0039787 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/> property,
            a value of –0.0000005869 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/> property,
            and a value of –0.000000000004167 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> property. These properties are used
            in the Callendar-Van Dusen equation.
            </summary>		
        </member>
        <member name="F:OpenLayers.Base.RTDType.Pt3928">
            <summary>
            Temperature Coefficient of Resistance value of 0.003928 Ohm / Ohm /° C used in the Callendar-Van Dusen transfer equation to calculate temperature for a Platinum 100 Ohm RTD. 
            If this value is set, a value of 100 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/> property, 
            a value of 0.0039888 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/> property,
            a value of –0.0000005915 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/> property,
            and a value of –0.00000000000385 is used for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> property. These properties are used
            in the Callendar-Van Dusen equation.
            </summary>		
        </member>
        <member name="F:OpenLayers.Base.RTDType.Custom">
            <summary>
            A user-defined value for the Temperature Coefficient of Resistance in the Callendar-Van Dusen transfer equation to calculate temperature.
            If this value is set, you must specify a value for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdR0"/>, <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdACoefficient"/>,
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdBCoefficient"/>, and <see cref="P:OpenLayers.Base.SupportedChannelInfo.RtdCCoefficient"/> properties, which are used
            in the Callendar-Van Dusen equation.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SensorWiringConfiguration">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.SensorWiringConfiguration"/> property in the SupportedChannelInfo class.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SensorWiringConfiguration.TwoWire">
            <summary>
            The sensor type (typically, an RTD, thermistor, or resistance measurement) uses two wires to connect to the device.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SensorWiringConfiguration.ThreeWire">
            <summary>
            The sensor type (typically, an RTD, thermistor, or resistance measurement) uses three wires to connect to the device.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SensorWiringConfiguration.FourWire">
            <summary>
            The sensor type (typically, an RTD, thermistor, or resistance measurement) uses four wires to connect to the device.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.TemperatureFilterType">
            <summary>
             Obsolete enumeration. This enum have been deprecated and may not
            	be supported in future versions of library. Use DataFilterType enum and DataFilterType property.
             </summary>
        </member>
        <member name="F:OpenLayers.Base.TemperatureFilterType.Raw">
            <summary>
            No filter. Provides fast response times, but the data may be difficult to interpret.
            Use when you want to filter the data yourself.
            <para>
            The Raw filter type returns the data exactly as it comes out of the Delta-Sigma A/D converters.
            Note that Delta-Sigma converters provide substantial digital filtering above the Nyquist frequency.
            </para>
            <para>
            Generally, the only time it is desirable to use the Raw filter is if 
            you are using fast responding thermocouples/RTDs, sampling them at higher speeds 
            (> 1 Hz), and need as much response speed as possible.
            </para>
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TemperatureFilterType.MovingAverage">
            <summary>
            Provides a compromise of filter functionality and response time. 
            This filter can be used in any application.
            <para>
            This low-pass filter takes the previous 16 samples, adds them together, and divides by 16. 
            </para>
            </summary>
        </member>
        <member name="T:OpenLayers.Base.DataFilterType">
            <summary>
             Contains the possible values for the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.DataFilterType"/> property 
             in the AnalogInputSubsystem class.
             </summary>
        </member>
        <member name="F:OpenLayers.Base.DataFilterType.Raw">
            <summary>
            No filter. Provides fast response times, but the data may be difficult to interpret.
            Use when you want to filter the data yourself.
            <para>
            The Raw filter type returns the data exactly as it comes out of the Delta-Sigma A/D converters.
            Note that Delta-Sigma converters provide substantial digital filtering above the Nyquist frequency.
            </para>
            <para>
            Generally, the only time it is desirable to use the Raw filter is if 
            you are using fast responding thermocouples/RTDs, sampling them at higher speeds 
            (> 1 Hz), and need as much response speed as possible.
            </para>
            </summary>
        </member>
        <member name="F:OpenLayers.Base.DataFilterType.MovingAverage">
            <summary>
            Provides a compromise of filter functionality and response time. 
            This filter can be used in any application.
            <para>
            This low-pass filter takes the previous 16 samples, adds them together, and divides by 16. 
            </para>
            </summary>
        </member>
        <member name="T:OpenLayers.Base.SubsystemType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SubsystemBase.SubsystemType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.AnalogInput">
            <summary>
            Analog input subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.AnalogOutput">
            <summary>
            Analog output subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.DigitalInput">
            <summary>
            Digital input subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.DigitalOutput">
            <summary>
            Digital output subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.QuadratureDecoder">
            <summary>
            Quadrature decoder subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.CounterTimer">
            <summary>
            Counter/timer subsystem
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SubsystemType.Tachometer">
            <summary>
            Tachometer subsystem
            </summary>
        </member>
        <member name="T:OpenLayers.Base.ChannelType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SubsystemBase.ChannelType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelType.SingleEnded">
            <summary>
            Single-ended channel configuration.  Use this configuration when you want to measure high-level signals, 
            noise is insignificant, the source of the input is close to the device, and all the input signals are 
            referred to the same common ground.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ChannelType.Differential">
            <summary>
            Differential channel configuration. Use this configuration when you want to measure low-level signals 
            (less than 1 V), you are using an A/D converter with high resolution (greater than 12 bits), 
            noise is a significant part of the signal, or common-mode voltage exists.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.Encoding">
            <summary>
            Contains the possible values for the SubsystemBase.<see cref="P:OpenLayers.Base.SubsystemBase.Encoding"/> and 
            OlBuffer.<see cref="P:OpenLayers.Base.OlBuffer.Encoding"/> properties, and 
            for the Encoding parameter of the <see cref="M:OpenLayers.Base.Utility.VoltsToRawValue(System.Double,OpenLayers.Base.Encoding,System.Double,System.Double,System.Int32)"/> and <see cref="M:OpenLayers.Base.Utility.RawValueToVolts(System.Int32,OpenLayers.Base.Encoding,System.Double,System.Double,System.Int32)"/> methods.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.Encoding.Binary">
            <summary>
            Binary data encoding
            </summary>
        </member>
        <member name="F:OpenLayers.Base.Encoding.TwosComplement">
            <summary>
            Twos complement data encoding
            </summary>
        </member>
        <member name="T:OpenLayers.Base.TriggerType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/>, <see cref="P:OpenLayers.Base.Trigger.PreTriggerSource"/>, and 
            <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerSource"/> properties.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TriggerType.Software">
            <summary>
            Software (internal) trigger. The trigger occurs when the <see cref="M:OpenLayers.Base.SubsystemBase.Start"/> method is executed.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TriggerType.TTLPos">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the rising edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TriggerType.DigitalEvent">
            <summary>
            A trigger is generated when an external digital event occurs.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TriggerType.TTLNeg">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the falling edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TriggerType.ThresholdPos">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A positive analog threshold trigger occurs when the device
            detects a positive-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TriggerType.ThresholdNeg">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A negative analog threshold trigger occurs when the device
            detects a negative-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.ClockSource">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.Clock.Source"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ClockSource.Internal">
            <summary>
            The internal clock is the clock source on the
            device that paces data acquisition or output for each channel 
            in the ChannelList, or that is used in a counter/timer operation.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ClockSource.External">
            <summary>
            An external clock source is an input signal attached to the device that
            paces data acquisition or output for each channel 
            in the ChannelList, or that is used in a counter/timer operation. 
            This clock source is useful when you want to operate at rates not 
            available with the internal clock or if you want to operate at uneven intervals.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.GateType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GateType.None">
            <summary>
            A gate type of None (software) enables the counter/timer operation immediately.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GateType.HighLevel">
            <summary>
            A HighLevel external gate type enables a counter/timer operation when 
            the external gate signal is high, and disables a counter/timer operation 
            when the external gate signal is low. Note that this gate type is used 
            only for event counting, frequency measurement, and rate generation operations.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GateType.LowLevel">
            <summary>
            A LowLevel external gate type enables a counter/timer operation when the external 
            gate signal is low, and disables the counter/timer operation when the external 
            gate signal is high. Note that this gate type is used only for event counting, 
            frequency measurement, and rate generation operations.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GateType.HighEdge">
            <summary>
            A HighEdge external gate type triggers a counter/timer operation on the
            transition from the low edge to the high edge (rising edge). Note that this gate 
            type is used only for one-shot and repetitive one-shot mode.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GateType.LowEdge">
            <summary>
            A LowEdge external gate type triggers a counter/timer operation on the transition
            from the high edge to the low edge (falling edge). Note that this gate type 
            is used only for one-shot and repetitive one-shot mode.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GateType.Level">
            <summary>
            A Level gate type enables a counter/timer operation on the transition from any 
            level on the gate input signal. Note that this gate type is used only for event
            counting, frequency measurement, and rate generation operations.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.PulseType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PulseType.HighToLow">
            <summary>
            The low portion of the total pulse output period is the active portion of
            the counter/timer clock output signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PulseType.LowToHigh">
            <summary>
            The high portion of the total pulse output period is the active portion of 
            the counter/timer pulse output signal.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.EdgeType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.TachSubsystem.EdgeType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeType.Falling">
            <summary>
            Falling edge of the tachometer signal.
            
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeType.Rising">
            <summary> 
            Rising edge of the tachometer signal. 
            
            </summary>
        </member>
        <member name="T:OpenLayers.Base.CounterMode">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.Count">
            <summary>
            Event counting mode. Use event counting mode to count events from the
            counter’s associated clock input source.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.RateGenerator">
            <summary>
            Rate generator mode. Use rate generation mode to generate a continuous 
            pulse output signal from the counter; this mode is sometimes referred 
            to as continuous pulse output or pulse train output. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.OneShot">
            <summary>
            One-shot mode. Use one-shot mode to generate a single pulse output signal
            from the counter when the operation is triggered (determined by the gate
            input signal). 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.OneShotRepeat">
            <summary>
            Repetitive one-shot mode. Use repetitive one-shot mode to generate a pulse 
            output signal each time the device detects a trigger (determined by the
            gate input signal). 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.UpDown">
            <summary>
            Up/down counting mode. Use up/down counting mode to increment or decrement
            the number of rising edges that occur on the counter’s associated clock input,
            depending on the level of the counter’s associated gate signal. If the gate
            signal is high, the C/T increments; if the gate signal is low, the C/T decrements.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.Measure">
            <summary>
            Edge-to-edge measurement mode. Use edge-to-edge measurement to measure the time
            interval between a specified start edge and a specified stop edge. When the start
            edge is detected, the counter starts incrementing, and continues incrementing 
            until the stop edge is detected. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CounterMode.ContinuousMeasure">
            <summary>
            Continuous edge-to-edge measurement mode. In continuous edge-to-edge measurement
            mode, the counter automatically performs an edge-to-edge measurement operation,
            where the counter starts incrementing when it detects the specified start edge 
            and stops incrementing when it detects the specified stop edge. When the operation
            completes, the counter remains idle until it is next read. On the next read,
            the current value of the counter (from the previous edge-to-edge measurement 
            operation) is returned and the next edge-to-edge measurement operation is 
            started automatically.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.EdgeSelect">
            <summary>
            Contains the possible values for the EdgeSelect parameter of the 
            <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> and <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/> properties.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.GateRising">
            <summary>
            The specified start or stop edge occurs on the rising edge of the counter's associated
            gate input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.GateFalling">
            <summary>
            The specified start or stop edge occurs on the falling edge of the counter's associated
            gate input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.ClockRising">
            <summary>
            The specified start or stop edge occurs on the rising edge of the counter's associated
            clock input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.ClockFalling">
            <summary>
            The specified start or stop edge occurs on the falling edge of the counter's associated
            clock input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.ADCConversionComplete">
            <summary>
            The specified start or stop edge occurs when the A/D conversion is complete.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.TachometerInputFalling">
            <summary>
            The specified start or stop edge occurs on the falling edge of the tachometer input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.TachometerInputRising">
            <summary>
            The specified start or stop edge occurs on the rising edge of the tachometer input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput0Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 0.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput0Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 0.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput1Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 1.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput1Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 1.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput2Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 2.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput2Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 2.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput3Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 3.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput3Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 3.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput4Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 4.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput4Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 4.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput5Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 5.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput5Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 5.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput6Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 6.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput6Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 6.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput7Falling">
            <summary>
            The specified start or stop edge occurs on the falling edge of digital input signal 7.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.DigitalInput7Rising">
            <summary>
            The specified start or stop edge occurs on the rising edge of digital input signal 7.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.CT0ClockInputFalling">
            <summary>
            The specified start or stop edge occurs on the falling edge of the clock input signal associated with counter/timer 0.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.CT0ClockInputRising">
            <summary>
            The specified start or stop edge occurs on the rising edge of the clock input signal associated with counter/timer 0.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.CT0GateInputFalling">
            <summary>
            The specified start or stop edge occurs on the falling edge of the gate input signal associated with counter/timer 0.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.EdgeSelect.CT0GateInputRising">
            <summary>
            The specified start or stop edge occurs on the rising edge of the gate input signal associated with counter/timer 0.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.DataFlow">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SubsystemBase.DataFlow"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.DataFlow.Continuous">
            <summary>
            Use continuous mode when you want to acquire or output data from multiple channels continuously.
            For analog input operations, this is post-trigger mode.
            For maximum flexibility, you can specify other parameters, such as the ChannelList, clock source
            and frequency, buffer, and so on.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.DataFlow.SingleValue">
            <summary>
            In a single-value operation, a single data value is read from or written 
            to a single channel immediately, and then the operation stops.
            You specify only the channel to read or update, and the gain for the channel.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.DataFlow.ContinuousPreTrigger">
            <summary>
            Use continuous pre-trigger mode when you want to continuously acquire data
            before a specific external trigger event occurs.
            For maximum flexibility, you can specify other parameters, such as the ChannelList, 
            clock source and frequency, buffer, and so on.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.DataFlow.ContinuousPrePostTrigger">
            <summary>
            Use continuous about-trigger mode when you want to continuously acquire data both before and after
            a specific external event occurs. This operation is equivalent to doing both a 
            pre-trigger and a post-trigger acquisition
            For maximum flexibility, you can specify other parameters, such as the ChannelList, clock source
            and frequency, buffer, and so on.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.CascadeMode">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CascadeMode"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CascadeMode.Cascade">
            <summary>
            Internally connects or cascades the clock output signal from one counter/timer
            to the clock input signal of the next counter/timer, in software. In this way,
            you can create a 32-bit counter out of two 16-bit counters, for example.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CascadeMode.Single">
            <summary>
            The counter/timer is not internally connected to another counter/timer. 
            </summary>
        </member>
        <member name="T:OpenLayers.Base.PowerSource">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.Device.PowerSource"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PowerSource.Internal">
            <summary>
            The device is powered by the internal system power.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PowerSource.External">
            <summary>
            The device is powered by an external power source.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.WrapMode.None">
            <summary>
            The operation continues indefinitely as long as you process the buffers 
            and put them back on the queue in a timely manner. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.WrapMode.Single">
            <summary>
            The first buffer is reused continuously. Some devices have a FIFO onboard for 
            analog output (waveform generation) operations. If the buffer fits into the FIFO, 
            the device driver downloads the buffer into the FIFO on the device.
            The driver (or device) outputs the data starting from the first location
            in the buffer. When it reaches the end of the buffer, the driver (or device)
            continues outputting data from the first location of the buffer, and the 
            process continues indefinitely until you stop it. 
            </summary>
        </member>
        <member name="T:OpenLayers.Base.QuadratureIndexMode">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.QuadratureDecoderSubsystem.IndexMode"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.QuadratureIndexMode.Disabled">
            <summary>
            If Disabled, the Index input signal has no effect on the operation
            of the quadrature decoder. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.QuadratureIndexMode.Low">
            <summary>
            If Low, then the quadrature decoder resets its value to 0 
            whenever it detects a falling edge on the Index input signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.QuadratureIndexMode.High">
            <summary>
            If High, then the quadrature decoder resets its value to 0 whenever
            it detects the rising edge on the Index input signal.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.HardwareInfo">
            <summary>
            This structure is used by the <see cref="M:OpenLayers.Base.Device.GetHardwareInfo"/> method 
            to return information about a Open Layers-compliant device.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.HardwareInfo.VendorId">
             <summary> 
             The identification number of the vendor. For most devices, this is 0x087 hexadecimal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.HardwareInfo.DeviceId">
            <summary> 
            The version number of the product. If only one version of the product exists,
            this number is 1. If two versions of the product exist, this number 
            could be 1 or 2.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.HardwareInfo.ProductId">
            <summary> 
            The product identification number, such as DT9832. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.HardwareInfo.BoardId">
            <summary> 
            This field contains the year (1 or 2 digits), week (1 or 2 digits), 
            test station (1 digit), and sequence number (3 digits) of the device 
            when it was tested in Manufacturing. For example, if BoardId 
            contains the value 5469419, this device was tested in 2005, 
            week 46, on test station 9, and is unit number 419.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.Range">
            <summary>
            This class is used by the <see cref="P:OpenLayers.Base.AnalogSubsystem.VoltageRange"/> and  
            <see cref="P:OpenLayers.Base.AnalogSubsystem.SupportedVoltageRanges"/> methods to return the lower and upper limits 
            of the voltage range for an analog subsystem.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Range.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of a Range object with
            the specified lower and upper limits of the voltage range.
            </summary>
            <param name="low">Gets or sets the lower limit of the voltage range.</param>
            <param name="high">Gets or sets the upper limit of the voltage range.</param>
        </member>
        <member name="F:OpenLayers.Base.Range.low">
            <summary>The lower limit of the voltage range.</summary>
        </member>
        <member name="F:OpenLayers.Base.Range.high">
            <summary> The upper limit of the voltage range.</summary>
        </member>
        <member name="P:OpenLayers.Base.Range.Low">
            <summary>
            Gets or sets the lower limit of the voltage range.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Range.High">
            <summary>
            Gets or sets the upper limit of the voltage range.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.CouplingType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.Coupling"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CouplingType.DC">
            <summary>
            DC coupling, where the DC offset is included.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.CouplingType.AC">
            <summary>
            AC coupling, where the DC offset is removed.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.ExcitationCurrentSource">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.ExcitationCurrentSource"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ExcitationCurrentSource.Internal">
            <summary> Internal excitation current source. </summary>
        </member>
        <member name="F:OpenLayers.Base.ExcitationCurrentSource.External">
            <summary> External excitation current source. </summary>
        </member>
        <member name="F:OpenLayers.Base.ExcitationCurrentSource.Disabled">
            <summary> Excitation current source is disabled (no excitation is applied).</summary>
        </member>
        <member name="T:OpenLayers.Base.ExcitationVoltageSource">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.ExcitationVoltageSource"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ExcitationVoltageSource.Internal">
            <summary> Internal excitation voltage source. </summary>
        </member>
        <member name="F:OpenLayers.Base.ExcitationVoltageSource.External">
            <summary> External excitation voltage source. </summary>
        </member>
        <member name="F:OpenLayers.Base.ExcitationVoltageSource.Disabled">
            <summary> Excitation voltage source is disabled (no excitation is applied).</summary>
        </member>
        <member name="T:OpenLayers.Base.SynchronizationModes">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SubsystemBase.SynchronizationMode"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.SynchronizationModes.None">
            <summary> No synchronization. The subsystem is configured to ignore the synchronization circuit.</summary>
        </member>
        <member name="F:OpenLayers.Base.SynchronizationModes.Master">
            <summary> Device is the master. The synchronization connector on the device is configured to output a synchronization signal.</summary>
        </member>
        <member name="F:OpenLayers.Base.SynchronizationModes.Slave">
            <summary> Device is a slave. The synchronization connector on the device is configured to accept a synchronization signal as an input. </summary>
        </member>
        <member name="T:OpenLayers.Base.ReferenceTriggerType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.None">
            <summary>
            Triggering is disabled.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.TTLPos">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the rising edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.DigitalEvent">
            <summary>
            A trigger is generated when an external digital event occurs.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.TTLNeg">
            <summary>
            An external digital (TTL) signal attached to the device. The trigger occurs when 
            the device detects a transition on the falling edge of the digital TTL signal.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.ThresholdPos">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A positive analog threshold trigger occurs when the device
            detects a positive-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.ThresholdNeg">
            <summary>
            Either an analog signal from an analog input channel or an external analog signal
            attached to the device. A negative analog threshold trigger occurs when the device
            detects a negative-going signal that crosses a threshold value. 
            The threshold level is generally set using an analog output subsystem on the device.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ReferenceTriggerType.SyncBus">
            <summary>
            An external Sync Bus signal attached to the device. For devices that support connecting multiple 
            devices together in a master/slave relationship using Sync Bus (RJ45) connectors, the Sync Bus 
            trigger occurs when the slave device detects a transition on the SyncBus trigger input of the Sync Bus connector.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.StrainGageBridgeConfiguration">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.StrainGageBridgeConfiguration"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.FullBridgeBending">
            <summary>
            This configurations uses four active gages to measure bending strain. This configuration rejects axial strain, compensates for temperature
            and compensates for lead resistance.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.FullBridgeBendingPoisson">
            <summary>
            This configuration uses four active gages to measure bending strain. This configuration also rejects axial strain, compensates for
            temperature, compensates for lead resistance, and compensates for the aggregate effect on the principle strain measurement due to the
            Poisson ratio of the specimen material.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.FullBridgeAxialPoisson">
            <summary>
            This configuration uses four active gages to measure axial strain. This configuration also compensates for temperature, rejects bending
            strain, compensates for lead resistance, and compensates for the aggregate effect on the principle strain measurement due to the Poisson
            ratio of the specimen material.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.HalfBridgePoisson">
            <summary>
            This configuration uses two active gages to measure either axial or bending strain. This configuration compensates for temperature,
            and compensates for the aggregate effect on the principle strain measurement due to the Poisson ratio of the specimen material.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.HalfBridgeBending">
            <summary>
            This configuration uses two active gages to measure bending strain. This configuration rejects axial strain and compensates for temperature. 
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.QuarterBridge">
            <summary>
            This configuration uses a single active gage to measure axial or bending strain. You must supply an external resistor that matches the nominal resistance of the bridge to
            complete the bridge externally.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.StrainGageBridgeConfiguration.QuarterBridgeTempCompensation">
            <summary>
            This configuration uses one active gage and one dummy gage to measure axial and bending strain while compensating for temperature.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.BridgeConfiguration">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.BridgeConfiguration"/> property.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.BridgeConfiguration.FullBridge">
            <summary>
            Full-bridge-based sensor or transducer, such as a load cell, or general-purpose bridge that use four active gages.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.BridgeConfiguration.HalfBridge">
            <summary>
            General-purpose bridge that use two active gages.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.BridgeConfiguration.QuarterBridge">
            <summary>
            General-purpose bridge that uses one active gage. You must supply an external resistor that matches the nominal resistance of the bridge to
            complete the bridge externally.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.IOType">
            <summary>
            Contains the possible values for the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/>.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.VoltageIn">
            <summary>
            The channel supports a voltage input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.VoltageOut">
            <summary>
            The channel supports a voltage output.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.DigitalInput">
            <summary>
            The channel supports a digital input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.DigitalOutput">
            <summary>
            The channel supports a digital output.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.QuadratureDecoder">
            <summary>
            The channel supports quadrature decoder operations.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.CounterTimer">
            <summary>
            The channel supports counter/timer operations.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Tachometer">
            <summary>
            The channel supports a tachometer input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Current">
            <summary>
            The channel supports a current input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Thermocouple">
            <summary>
            The channel supports a thermocouple input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Rtd">
            <summary>
            The channel supports an RTD input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.StrainGage">
            <summary>
            The channel supports a stain gage input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Accelerometer">
            <summary>
            The channel supports an IEPE (accelerometer) input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Bridge">
            <summary>
            The channel supports a bridge-based sensor or general-purpose bridge input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Thermistor">
            <summary>
            The channel supports a thermistor input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.Resistance">
            <summary>
            The channel supports a resistance measurement input.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.IOType.MultiSensor">
            <summary>
            The channel supports more than one sensor type. If the <see cref="P:OpenLayers.Base.SupportedChannelInfo.IOType"/> propery is MultiSensor, use the
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.MultiSensorType"/> property or the 
            <see cref="P:OpenLayers.Base.SupportedChannelInfo.SupportedMultiSensorTypes"/> property to determine which sensor types are supported for the channel.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.QuadratureDecoderSubsystem">
            <summary>
            The QuadratureDecoderSubsystem class provides the properties, methods, and events for performing quadrature decoder operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.QuadratureDecoderSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns a QuadratureDecoderSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.QuadratureDecoderSubsystem(System.Int32)"/> method rather than this constructor
            to return a quadrature decoder subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the quadrature decoder subsystem. </param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the quadrature decoder subsystem. </param>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.Dispose(System.Boolean)">
            <summary>
            cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.ToString">
            <summary>
            Returns a description of the quadrature decoder subsystem and element. 
            </summary>
            <returns>A string that describes the quadrature decoder subsystem and element.</returns>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.Start">
            <summary>
            Starts a quadrature decoder operation.
            </summary>				
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.Stop">
            <summary>
            Stops the current quadrature decoder operation.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.Abort">
            <summary>
            Stops a quadrature decoder operation. For this subsystem type, Abort behaves like <see cref="M:OpenLayers.Base.SubsystemBase.Stop"/>. 
            </summary>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.ReadCount">
            <summary>
            Returns the current count of the quadrature decoder. 
            </summary>
            <remarks>
            You can read the count of the quadrature decoder to determine relative or absolute position and/or
            rotational speed. 
            <para>
            For example, in an X/Y positioning application, you could use one quadrature 
            decoder to determine the position on the X-plane, and another quadrature decoder to determine
            the position on the Y-plane. You can also reset the value of the decoder to 0 whenever 
            a selected edge (high or low) of the Index signal goes high or low.
            </para>
            <para>
            To determine the rotation of a quadrature encoder, use the following formula: 
            Rotation degrees = Count/(4*N) x 360 degrees, where N is the number of pulses generated by the 
            quadrature encoder per rotation. For example, if every rotation of the quadrature encoder 
            generated 10 pulses, and the value read from the quadrature decoder is 20, the rotation of
            the quadrature encoder is 180 degrees (20/40 x 360 degrees). 
            </para>
            </remarks>
            <returns>The current value of the quadrature decoder.</returns>
        </member>
        <member name="M:OpenLayers.Base.QuadratureDecoderSubsystem.SetDefaultConfig">
            <summary>
            set driver config struct to defaults.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.QuadratureDecoderSubsystem.Element">
            <summary>
            Returns the element number of the subsystem. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.QuadratureDecoderSubsystem.SubsystemType">
            <summary>
            Returns the subsystem type (QuadratureDecoder). 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.QuadratureDecoderSubsystem.SupportsQuadratureDecoder">
            <summary>
            Returns True if the subsystem support quadrature decoder operations; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.QuadratureDecoderSubsystem.ClockPreScale">
            <summary>
            Gets and sets the clock prescale value for the quadrature decoder subsystem. 
            The ClockPreScale property allows you to filter the sampling frequency of the onboard base clock by 
            dividing down the base frequency. Values for this property range from 0 and 255, where 0 
            corresponds to an actual pre-scale value of 1, and 255 corresponds to an actual prescale value of 256. 
            </summary>		
            <remarks>
            For quadrature decoder operations, the onboard base clock of the hardware device is used to sample
            the A and B inputs. Use the <see cref="P:OpenLayers.Base.Clock.BaseClockFrequency"/> to get the base clock frequency that is 
            used by your device. From a software perspective, the software considers the A and B 
            inputs as external clock sources, therefore, you must specify the clock source as External using the
            <see cref="P:OpenLayers.Base.Clock.Source"/> property.
            <para>
            If you are using a device with a base clock of 36 MHz and specify a pre-scale value of 0, 
            the resulting sampling frequency is 36 MHz (36 MHz/1). Similarly, if you specify a pre-scale value of 255 
            when using a device with a 48 MHz base clock, the resulting sampling frequency is 18.75 kHz (48 MHz/256).
            </para>
            <para>
            The filter samples the incoming A and B signals twice, and when it samples a change in the state of any 
            of these signals and the change is present for two samples, the change on the inputs is valid. A minimum of
             4 clock pulses is needed to sample each edge of the A and B inputs in one cycle (for a total of 16 clock 
             pulses). In addition, the minimum time between one edge and the next edge is 112 ns. So, if you are using
             a 36 MHz sample frequency, the A and B inputs can have a maximum frequency of 2.23 MHz, or 
             a period of 448 ns. 
            </para>
            <para>
            In general, if the ClockPreScale value is set too low, the system is more 
             susceptible to noise on the inputs. If the ClockPreScale value is set too high, counts may be missed.
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.QuadratureDecoderSubsystem.X4Scaling">
             <summary>
             Gets and sets the quadrature decoder scaling mode (X1 or X4). 
             </summary>		
            <remarks>Setting this property to False selects X1 mode; 
             in X1 mode, the decoder generates one clock pulse for every complete cycle of the A and B inputs.
             <para>
             Setting this property to True selects X4 mode; 
             in X4 mode, the decoder generates one clock pulse for each edge of the A and B signals – 
             four edges for each cycle of the A and B inputs.
             </para>
             <para>
             Note that you must set the IndexMode property to Disabled if you set the X4Scaling property to True.
             </para></remarks>
        </member>
        <member name="P:OpenLayers.Base.QuadratureDecoderSubsystem.IndexMode">
            <summary>
            Gets/sets the index mode (Disabled, Low, or High) for the quadrature decoder subsystem. 
            </summary>		
            <remarks>
            <para>If you set this property to Disabled, then the Index input signal has no effect. Note that you must 
            set the IndexMode property to Disabled if you set the <see cref="P:OpenLayers.Base.QuadratureDecoderSubsystem.X4Scaling"/> property to True.
            </para>
            <para>
            If you set this property to Low, then the quadrature decoder resets its value to 0 whenever 
            it detects a low edge (falling edge) on the Index input signal. 
            </para>
            <para>
            If you set this property to High, then the quadrature decoder resets its value to 0 whenever it detects the high edge (rising edge) 
            on the Index input signal. 
            </para>
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.ReferenceTrigger">
            <summary>
            The ReferenceTrigger class provides an interface for controlling the reference trigger of a subsystem. For devices that support a reference 
            trigger, pre-trigger data acquisition stops and post-trigger acquisition starts when the reference trigger event occurs. 
            Post-trigger acquisition stops when the number of samples you specify for the post-trigger scan count has been reached.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.TriggerType">
            <summary>
            Gets and sets the reference trigger type (None, TTLPos, TTLNeg, DigitalEvent, ThresholdPos, or ThresholdNeg) 
            for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.Level">
            <summary>
            Gets and sets the threshold value for the reference trigger. By default, the threshold value is in voltage unless
            specified otherwise for the device; see the user's manual for your device for valid threshold value settings for the reference trigger.
            </summary>
            <remarks>This propery is valid only if TriggerType property is <see cref="F:OpenLayers.Base.ReferenceTriggerType.ThresholdPos"/>
            or <see cref="F:OpenLayers.Base.ReferenceTriggerType.ThresholdNeg"/> trigger type. The threshold level set by this property is
            the value after the gain is a applied to the threshold trigger channel. For example, if the voltage range of the
            subsystem is ±10 V, and the specified gain is 1, specify a threshold voltage level within ±10 V.
            Likewise, if the voltage range of the subsystem is ±10 V, and the specified gain is 10, specify a 
            threshold voltage level within ±1 V.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportedThresholdTriggerChannels">
            <summary>
            Returns an array containing the channels that can be used for ThresholdPos or ThresholdNeg <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/>s.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.ThresholdTriggerChannel">
            <summary>
            Gets and sets the number of the channel that the device monitors for the ThresholdPos or ThresholdNeg reference trigger event. 
            </summary>
            <remarks>This propery is valid only if the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property is ThresholdPos or ThresholdNeg.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.PostTriggerScanCount">
            <summary>
            Gets and sets the samples per channel to acquire after the reference trigger occurs. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsPostTriggerScanCount">
            <summary>
            Returns True if the subsystem supports acquiring a specified number of samples after the reference trigger occurs; 
            otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsPosExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.Base.ReferenceTriggerType.TTLPos"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsNegExternalTTLTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.ReferenceTriggerType.TTLNeg"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsPosThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.ReferenceTriggerType.ThresholdPos"/> reference trigger type;
             otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsNegThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.ReferenceTriggerType.ThresholdNeg"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsDigitalEventTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.ReferenceTriggerType.DigitalEvent"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.ReferenceTrigger.SupportsSyncBusTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.Base.ReferenceTriggerType.SyncBus"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.Base.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="T:OpenLayers.Base.SimultaneousStart">
            <summary>
            The SimultaneousStart class provides an interface for simultaneously starting multiple subsystems.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SimultaneousStart.AddSubsystem(OpenLayers.Base.SubsystemBase)">
            <summary>
            Adds a subsystem to the list of subsystems to simultaneously start. 
            </summary>
            <param name="subsystem">The subsystem to add to the simultaneous start list.</param>
        </member>
        <member name="M:OpenLayers.Base.SimultaneousStart.RemoveSubsystem(OpenLayers.Base.SubsystemBase)">
            <summary>
            Removes a subsystem from the list of subsystems to simultaneously start.
            </summary>
            <param name="subsystem">The subsystem to remove.</param>
        </member>
        <member name="M:OpenLayers.Base.SimultaneousStart.Clear">
            <summary>
            Removes all subsystems from the simultaneous start list.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SimultaneousStart.PreStart">
            <summary>
            Simultaneously prestarts all subsystems on the simultaneous start list.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SimultaneousStart.Start">
            <summary>
            Simultaneously starts all subsystems on the simultaneous start list.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.SimultaneousStart.GetSubsystemList">
            <summary>
            Returns an array of subsystems that are currently on the simultaneous start list.
            </summary>
            <returns>An array of subsystems that are currently on the simultaneous start list.</returns>
        </member>
        <member name="T:OpenLayers.Base.TachSubsystem">
            <summary>
            The TachSubsystem class provides the properties, methods, and events for performing tachometer operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.Base.Device.TachSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.TachSubsystem.#ctor(OpenLayers.Base.Device,System.Int32)">
            <summary>
            Returns a TachSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.Base.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.Base.Device.TachSubsystem(System.Int32)"/> method rather than this constructor
            to return a tachometer subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.Base.Device"/> object with which to associate the tachometer subsystem. </param>
            <param name="element">The <see cref="P:OpenLayers.Base.SubsystemBase.Element"/> number of the tachometer subsystem. </param>
        </member>
        <member name="M:OpenLayers.Base.TachSubsystem.Dispose(System.Boolean)">
            <summary>
            cleanup
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:OpenLayers.Base.TachSubsystem.ToString">
            <summary>
            Returns a description of the tachometer subsystem and element. 
            </summary>
            <returns>A string that describes the tachometer subsystem and element.</returns>
        </member>
        <member name="M:OpenLayers.Base.TachSubsystem.SetDefaultConfig">
            <summary>
            set driver config struct to defaults.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.SubsystemType">
            <summary>
            Returns the subsystem type (Tachometer). 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.Count">
            <summary>
            Returns the current count between two consecutive edges (rising to rising or falling to falling) of the tachometer signal. 
            </summary>
            <returns>The current value of the tachometer.</returns>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.SupportsFallingEdge">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.EdgeType.Falling"/> falling edges of the tachometer signal; 
            otherwise, returns False. 
            </summary>
            <remarks>Sets the edge type of the tachometer signal using the <see cref="P:OpenLayers.Base.TachSubsystem.EdgeType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.SupportsRisingEdge">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.Base.EdgeType.Rising"/> rising edges of the tachometer signal; 
            otherwise, returns False. 
            </summary>
            <remarks>Sets the edge type of the tachometer signal using the <see cref="P:OpenLayers.Base.TachSubsystem.EdgeType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.EdgeType">
            <summary>
            Gets and sets the edge type (Falling or Rising) for the tachometer subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.StaleDataFlagEnabled">
            <summary>
            Gets and sets the flag indicating whether or not the value of the tachometer is new. If StaleDataFlagEnabled is True,
            the most significant bit (MSB) of the value is set to 0 to indicate
            new data; reading the value before the measurement is complete returns an MSB of 1. If
            the StaleDataFlagEnabled is False, the MSB is always set to 0.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TachSubsystem.SupportsStaleDataFlag">
            <summary>
            Returns True if the subsystem supports stale data flag
            </summary>
        </member>
        <member name="T:OpenLayers.Base.Trigger">
            <summary>
            The Trigger class provides an interface for controlling how a subsystem is triggered. For devices that support a start trigger and a 
            reference trigger, the Trigger class is used to set up the start trigger, which starts pre-trigger data acquisition. Use the ReferenceTrigger
            class to control the reference trigger.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Trigger.TriggerType">
            <summary>
            Gets and sets the trigger type (Software, TTLPos, TTLNeg, DigitalEvent, ThresholdPos, or ThresholdNeg) 
            for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Trigger.PreTriggerSource">
            <summary>
            Gets and sets the pre-trigger source (Software, TTLPos, TTLNeg, DigitalEvent, 
            ThresholdPos, or ThresholdNeg) for the subsystem when using
            <see cref="F:OpenLayers.Base.DataFlow.ContinuousPreTrigger"/> or <see cref="F:OpenLayers.Base.DataFlow.ContinuousPrePostTrigger"/> mode. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Trigger.Level">
            <summary>
            Gets and sets the trigger threshold value. By default, the trigger threshold value is in voltage unless
            specified otherwise for the device; see the user's manual for your device for valid threshold value settings.
            </summary>
            <remarks>This propery is valid only if TriggerType property is <see cref="F:OpenLayers.Base.TriggerType.ThresholdPos"/>
            or <see cref="F:OpenLayers.Base.TriggerType.ThresholdNeg"/> trigger type. The threshold level set by this property is
            the value after the gain is a applied to the threshold trigger channel. For example, if the voltage range of the
            subsystem is ±10 V, and the specified gain is 1, specify a threshold voltage level within ±10 V.
            Likewise, if the voltage range of the subsystem is ±10 V, and the specified gain is 10, specify a 
            threshold voltage level within ±1 V.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportedThresholdTriggerChannels">
            <summary>
            Returns an array containing the channels that can be used for ThresholdPos or ThresholdNeg <see cref="P:OpenLayers.Base.Trigger.TriggerType"/>s.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Trigger.ThresholdTriggerChannel">
            <summary>
            Gets and sets the number of the channel that the device monitors for the ThresholdPos or ThresholdNeg trigger event. 
            </summary>
            <remarks>This propery is valid only if the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property is ThresholdPos or ThresholdNeg.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsSoftwareTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.Software"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsPosExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.TTLPos"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsNegExternalTTLTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.TTLNeg"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsSvPosExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.TTLPos"/> trigger type
            for a single-value operation; otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsSvNegExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.TTLNeg"/> trigger type 
            for a single-value operation; otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsPosThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.ThresholdPos"/> trigger type;
             otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsNegThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.ThresholdNeg"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Trigger.SupportsDigitalEventTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.Base.TriggerType.DigitalEvent"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="T:OpenLayers.Base.MultiRecordAcquisition">
            <summary>
            The MultiRecordAcquisition class provides support for acquiring multiple records from the device.
            </summary>
            <remarks>
            To determine if your device supports multi-record acquisition, use the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiRecordAcquisition"/> property.
            </remarks> 
        </member>
        <member name="M:OpenLayers.Base.MultiRecordAcquisition.GetTimeStampsAsSeconds(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns an array of timestamps, in seconds, for records that were acquired after the start trigger occurred.
            The returned array contains a recordCount worth of timestamps starting with recordIndex. 
            </summary>
            <param name="recordIndex">The index at which to start reading the timestamp.</param>
            <param name="recordCount">The number of records for which to read the timestamp. 
            If recordCount is -1, the timestamps for all available records are returned starting at the specified recordIndex.</param>
            <param name="actualRecordIndex"> The actual index at which the timestamp is available for the record.</param>
            <returns> An array of timestamps, in seconds, of the actual records that were acquired. </returns>
            <remarks> The system contains timestamps for up to 65536 (64K) records at a time. If the user does not read the records within
            the time that it takes to acquire 64K records, then the system overwrites old data with the new timestamps.</remarks>
        </member>
        <member name="M:OpenLayers.Base.MultiRecordAcquisition.GetTimeStampsAsSamples(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns an array of timestamps, in samples, for records that were acquired after the start trigger occurred.
            The returned array contains a recordCount worth of timestamps starting with recordIndex. 
            </summary>
            <param name="recordIndex">The index at which to start reading the timestamp.</param>
            <param name="recordCount">The number of records for which to read the timestamp.
            If recordCount is -1, the timestamps for all available records are returned starting at the specified recordIndex.</param>
            <param name="actualRecordIndex"> The actual index at which the timestamp is available for the record.</param>
            <returns> An array of timestamps, in samples, of the actual records that were acquired.  </returns>
            <remarks> The system contains timestamps for up to 65536 (64K) at a time. If the user does not read the records within
            that time that it takes to acquire 64K records, the system overwrites old data with the new timestamps.</remarks>
        </member>
        <member name="P:OpenLayers.Base.MultiRecordAcquisition.Enabled">
            <summary>
            Gets and sets whether multi-record acquisition mode is enabled for the subsystem.
            A value of True indicates that multi-record acquisition mode is enabled, and a value of False indicates that multi-record acquisition 
            mode is disabled.
            </summary>
            <remarks>
            To determine if your device supports multi-record acquisition, use the <see cref="P:OpenLayers.Base.AnalogInputSubsystem.SupportsMultiRecordAcquisition"/> property.
            When enabled, the device acquires the number of records specified by the <see cref="P:OpenLayers.Base.MultiRecordAcquisition.NumRecordsToAcquire"/> property.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.MultiRecordAcquisition.NumRecordsToAcquire">
             <summary>
             Gets and sets the number of records to acquire by the subsystem.
             </summary>
             <remarks>
             When it detects a trigger, the device acquires the number of samples specified in the
             <see cref="T:OpenLayers.Base.OlBuffer"/>, and then waits for the next trigger.
             The process is repeated until the number of records specified by the <see cref="P:OpenLayers.Base.MultiRecordAcquisition.NumRecordsToAcquire"/> property is reached.
             If this property is set to zero, acquisition continues until a stop or abort is issued.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.MultiRecordAcquisition.TriggerDelayInSamples">
            <summary>
            Gets and sets the delay, in samples, between the start trigger and start of data acquisition.
            </summary> 
            <remarks>
            Refer to the user's manual for your device to determine if the subsystem supports this capability.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.MultiRecordAcquisition.RetriggerDelayInSamples">
            <summary>
            Gets and sets the delay, in samples, between the end of the last record and acquisition of the next record.
            </summary>
            <remarks>
            Refer to the user's manual for your device to determine if the subsystem supports this capability.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.TriggeredScan">
            <summary>
            The TriggeredScan class provides support for scanning the entries in a <see cref="T:OpenLayers.Base.ChannelList"/>
            a specified number of times when the device detects a specified retrigger.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.Enabled">
            <summary>
            Gets and sets whether triggered scan mode is enabled for the subsystem. A value of True indicates 
            that triggered scan mode is enabled, and a value of False indicates that triggered scan mode is disabled.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.MultiScanCount">
             <summary>
             Gets and sets the maximum number of scans per retrigger that are supported by the subsystem.
             </summary>
             <remarks>
             When it detects an initial trigger (pre-trigger source or post-trigger source), the device scans
             the <see cref="T:OpenLayers.Base.ChannelList"/> a specified number of times (determined by the 
             <see cref="P:OpenLayers.Base.TriggeredScan.MultiScanCount"/> property),
             then stops. When the retrigger occurs, the process repeats. 
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.RetriggerSource">
             <summary>
             Gets and sets the retrigger source (Software, TTLPos, TTLNeg, DigitalEvent, ThresholdPos, or ThresholdNeg) 
             for the subsystem.
             </summary>
             <remarks>
             When it detects an initial trigger (pre-trigger source or post-trigger source), the device scans
             the <see cref="T:OpenLayers.Base.ChannelList"/> a specified number of times (determined by the <see cref="P:OpenLayers.Base.TriggeredScan.MultiScanCount"/> property),
             then stops. When the retrigger occurs, the process repeats. 
             If the RetriggerSource is Software, specify the frequency of the retrigger using the <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerFrequency"/> property.
             If the RetriggerSource is any of the external trigger sources, the ChannelList is retriggered whenever the 
             external retrigger event occurs.
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.RetriggerFrequency">
            <summary>
            Gets and sets the frequency of the internal (Software) retrigger source.
            </summary>
            <remarks>
            When the retrigger source is Software, use this method to specify the period between retriggers. 
            When it detects an initial trigger (pre-trigger source or post-trigger source), the device scans
            the <see cref="T:OpenLayers.Base.ChannelList"/> a specified number of times (determined by the <see cref="P:OpenLayers.Base.TriggeredScan.MultiScanCount"/> property),
            then stops. When the software retrigger occurs (determined by the RetriggerFrequency property), the process repeats.
            <para>
            Determine the frequency of the software retrigger as follows:
            </para>
            <para>
            Minimum Retrigger Period = (# of CGL entries x # of CGLs per trigger)/ A/D sample clock frequency + 2 us
            </para>
            <para>
            Maximum Retrigger Frequency = 1/Minimum Retrigger Period
            </para>
            <para>
            For example, if you have 512 <see cref="T:OpenLayers.Base.ChannelListEntry"/> objects in the ChannelList, are scanning the channel
            list 256 times every trigger or retrigger, and are using an A/D sample clock with a 
            frequency of 1 MHz, set the maximum retrigger frequency to 7.62 Hz, since
            7.62 Hz = 1/((512 * 256)/1 MHz + 2 us)
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.MaxMultiScanCount">
            <summary>
            Returns the maximum number of scans per retrigger that are supported by the subsystem.
            </summary>
            <remarks>Set the number of scans per retrigger using the <see cref="P:OpenLayers.Base.TriggeredScan.MultiScanCount"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.MinRetriggerFreq">
            <summary>
            Returns the minimum retrigger frequency that is supported by the subsystem.
            </summary>
            <remarks> Set the retrigger frequency of the internal (Software) retrigger using the 
            <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerFrequency"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.MaxRetriggerFreq">
            <summary>
            Returns the maximum retrigger frequency that is supported by the subsystem.
            </summary>
            <remarks> Set the retrigger frequency of the internal (Software) retrigger using the 
            <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerFrequency"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.SupportsInternalRetrigger">
            <summary>
            true if subsystem supports internal retriggered scan mode (retrigger source
            is on the device;	initial trigger is any available trigger source). otherwise false.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TriggeredScan.SupportsScanPerTriggerRetrigger">
            <summary>
            true if subsystem supports scan-per-trigger triggered scan mode (retrigger is the same as
            the initial trigger source).
            </summary>
        </member>
        <member name="T:OpenLayers.Base.Utility">
            <summary>
            The Utility class provides service-related properties and methods, allowing you
            to get information about assemblies and to convert data from raw counts to voltage and from voltage to raw counts.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Utility.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Utility.RawValueToVolts(System.Int32,OpenLayers.Base.Encoding,System.Double,System.Double,System.Int32)">
            <summary>
            Converts a data value from a raw count to voltage.
            </summary>
            <param name="code">Raw data count to convert.</param>
            <param name="encoding">The data encoding (Binary or TwosComplement) of the raw count.</param>
            <param name="minVoltage">The lower limit of the voltage range.</param>
            <param name="maxVoltage">The upper limit of the voltage range. </param>
            <param name="resolution">The resolution of the raw count.</param>
            <returns>The voltage value that is associated with the raw count.</returns>
        </member>
        <member name="M:OpenLayers.Base.Utility.VoltsToRawValue(System.Double,OpenLayers.Base.Encoding,System.Double,System.Double,System.Int32)">
            <summary>
            Converts a voltage value into a raw count.
            </summary>
            <param name="voltage">The voltage value to convert.</param>
            <param name="encoding">The data encoding (Binary or TwosComplement) for the raw count.</param>
            <param name="minVoltage">The lower limit of the voltage range.</param>
            <param name="maxVoltage">The upper limit of the voltage range.</param>
            <param name="resolution">The resolution of the raw count.</param>
            <returns>The raw count that is associated with the voltage.</returns>
        </member>
        <member name="M:OpenLayers.Base.Utility.GetThermocoupleRange(OpenLayers.Base.ThermocoupleType,System.Double@,System.Double@,OpenLayers.Base.TemperatureUnit)">
            <summary>
            Returns the temperature range for a given <see cref="T:OpenLayers.Base.ThermocoupleType"/>. 
            </summary>
            <param name="type">The <see cref="T:OpenLayers.Base.ThermocoupleType"/> whose temperature range you want to get.</param>
            <param name="minValue">The lower limit of the temperature range for the specified thermocouple type.</param>
            <param name="maxValue">The upper limit of the temperature range for the specified thermocouple type.</param>
            <param name="tempUnit">The units (Celsius, Fahrenheit, or Kelvin) for the temperature values.</param>        
        </member>
        <member name="M:OpenLayers.Base.Utility.ConvertTemperatureToVolts(OpenLayers.Base.ThermocoupleType,OpenLayers.Base.TemperatureUnit,System.Double)">
            <summary>
            For a given <see cref="T:OpenLayers.Base.ThermocoupleType"/> and temperature value, converts the temperature value into voltage.
            </summary>
            <param name="thermocoupleType">The <see cref="T:OpenLayers.Base.ThermocoupleType"/> that is associated with the temperature value.</param>
            <param name="tempUnit">The units (Celsius, Fahrenheit, or Kelvin) for the specified temperature value.</param>        
            <param name="temperature">The temperature value to convert.</param>
            <returns>The voltage value that is associated with the specified temperature value.</returns>
        </member>
        <member name="M:OpenLayers.Base.Utility.ConvertVoltsToTemperature(OpenLayers.Base.ThermocoupleType,OpenLayers.Base.TemperatureUnit,System.Double)">
            <summary>
            For a given <see cref="T:OpenLayers.Base.ThermocoupleType"/> and voltage value, converts the voltage value into temperature.
            </summary>
            <param name="thermocoupleType">The <see cref="T:OpenLayers.Base.ThermocoupleType"/> that is associated with the voltage value.</param>
            <param name="tempUnit">The units (Celsius, Fahrenheit, or Kelvin) to use with the converted temperature value.</param>        
            <param name="voltage">The voltage value to convert.</param>
            <returns>The temperature value that is associated with the specified voltage value.</returns>
        </member>
        <member name="M:OpenLayers.Base.Utility.ComputeRectangularRosette(System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            For a rectangular rosette, calculates the minimum and maximum principal strain values and their associated angles (in degrees).
            </summary>
            <param name="strain1">Data from strain gage 1.</param>
            <param name="strain2">Data from strain gage 2. The axis for strain gage 2 must be 45 degrees away from that of strain gage 1.</param>
            <param name="strain3">Data from strain gage 3. The axis for strain gage 3 must be 90 degrees away from that of strain gage 1.</param>
            <param name="minPrincipalStrain">The minimum strain value of the principal strain.</param>
            <param name="maxPrinicipalStrain">The maximum strain value of the principal strain.</param>
            <param name="minPrinicipalStrainAngle">The direction of the minimum principal axes relative to the direction of strain gage 1 (in degrees).</param>
            <param name="maxPrinicipalStrainAngle">The direction of the maximum principal axes relative to the direction of strain gage 1 (in degrees).</param>
        </member>
        <member name="M:OpenLayers.Base.Utility.ComputeDeltaRosette(System.Double[],System.Double[],System.Double[],System.Double[]@,System.Double[]@,System.Double[]@,System.Double[]@)">
            <summary>
            For a delta rosette, calculates the minimum and maximum principal strain values and their associated angles (in degrees).
            </summary>
            <param name="strain1">Data from strain gage 1.</param>
            <param name="strain2">Data from strain gage 2. The axis for strain gage 2 must be 60 degrees away from that of strain gage 1.</param>
            <param name="strain3">Data from strain gage 3. The axis for strain gage 3 must be 120 degrees away from that of strain gage 1.</param>
            <param name="minPrincipalStrain">The minimum strain value of the principal strain.</param>
            <param name="maxPrinicipalStrain">The maximum strain value of the principal strain.</param>
            <param name="minPrinicipalStrainAngle">The direction of the minimum principal axes relative to the direction of strain gage 1 (in degrees).</param>
            <param name="maxPrinicipalStrainAngle">The direction of the maximum principal axes relative to the direction of strain gage 1 (in degrees).</param>
        </member>
        <member name="P:OpenLayers.Base.Utility.AssemblyVersion">
            <summary>
            Returns the major, minor, revision, and build numbers of the assembly.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.OlError">
            <summary>
            An OlError object encapsulates an Open Layers error code.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlError.#ctor(OpenLayers.DeviceCollection.ErrorCode)">
            <summary>
            Creates and returns an OlError object.
            </summary>
            <param name="errorCode">The Open Layers <see cref="T:OpenLayers.DeviceCollection.ErrorCode"/> that is accessible using an OlException object. </param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlError.GetErrorCode(System.String)">
            <summary>
            Returns the error code that is associated with a specified error message
            in the DT-Open Layers for .NET Class Library.
            </summary>
            <param name="ErrString">The error message for which to return the error code.</param>
            <returns>The error code that is associated with the specified error message.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlError.GetErrorString(OpenLayers.DeviceCollection.ErrorCode)">
            <summary>
            Returns a description for the specified error code in the DT-Open Layers for .NET Class Library.
            </summary>
            <param name="ErrCode">The error code for which to return the description.</param>
            <returns>A description of the specified error code.</returns>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlError.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlError.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.OlException">
            <summary>
            The OlException class provides properites for handling Open Layers errors that can be 
            generated in the <see cref="N:OpenLayers.DeviceCollection"/> namespace.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For internal use only.
            </summary>
            <param name="si">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlException.ErrorCode">
            <summary>
            Returns the <see cref="T:OpenLayers.DeviceCollection.ErrorCode"/> from the Open Layers for .NET Class Library that is associated with this exception. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlException.Message">
            <summary>
            Returns the descriptive string for the exception.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlException.Subsystem">
            <summary>
            Returns the subsystem (AnalogInput, AnalogOutput, DigitalInput, DigitalOutput, 
            CounterTimer, or QuadratureDecoder) that raised the exception. If the exception
            is not related to a specific subsystem, returns null.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ErrorCode">
            <summary>
            Open Layers error codes that are accessible using an <see cref="T:OpenLayers.DeviceCollection.OlException"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoError">
            <summary>No error.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.Success">
            <summary>The operation was successful.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidElement">
            <summary>An invalid subsystem element was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidListSize">
            <summary>An attempt was made to set the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> to an invalid size.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidListEntry">
            <summary>An invalid <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> entry was specified in the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/>.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidChannel">
            <summary>An invalid <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidChannelType">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidTrigger">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidResolution">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Resolution"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidClockSource">
            <summary>An invalid clock <see cref="P:OpenLayers.DeviceCollection.Clock.Source"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidFrequency">
            <summary>An invalid clock <see cref="P:OpenLayers.DeviceCollection.Clock.Frequency"/> was specified.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidPulseType">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseType"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidPulseWidth">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseWidth"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidCounterMode">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidDataFlow">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> mode was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.SubsystemInUse">
            <summary>An attempt was made to access a subsystem that is already in use.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.SubsystemNotInUse">
            <summary>An operation was attempted on a subsystem that is not in use.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.AlreadyRunning">
            <summary>An operation was attempted on a running subsystem.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NotConfigured">
            <summary>An operation was attempted on a subsystem that was not configured (see <see cref="M:OpenLayers.DeviceCollection.SubsystemBase.Config"/>).</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.DataFlowMismatch">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> mode was set for the current operation.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NotRunning">
            <summary>The subsystem is not running.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidRange">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRange"/> was specified.</summary>		 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NotSupported">
            <summary>The operation is not supported.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidDivider">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.Clock.ExtClockDivider"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidGate">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> was set for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidChannelList">
            <summary>An invalid <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> channel entry was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.ADOverrun">
            <summary> Conversion is not complete within timeout period, resulting in A/D overrun condition.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoQueuedBuffers">
            <summary>No <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects were queued to the subsystem (see <see cref="M:OpenLayers.DeviceCollection.BufferQueue.QueueBuffer(OpenLayers.DeviceCollection.OlBuffer)"/>).</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CannotOpenDriver">
            <summary>The device driver cannot be initialized.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CantCascade">
            <summary>The subsystem cannot be cascaded (see <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CascadeMode"/>).</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.WrongCounterMode">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> was set for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidGain">
            <summary>An invalid <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Gain"/> was set for the <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidRetriggerFrequency">
            <summary>An invalid <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerFrequency"/> was requested for the current <see cref="T:OpenLayers.DeviceCollection.ChannelList"/>.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CommandTimeout">
            <summary>A command timed out in the device driver.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.EventCountOverFlow">
            <summary>An overflow occured while in event counting mode.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoSubsystemsOnSimultaneousStartList">
            <summary>No subsystems have been put on the <see cref="T:OpenLayers.DeviceCollection.SimultaneousStart"/> list.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoChannelInhibitList">
            <summary>Subsystem does not support channel inhibition (see <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Inhibit"/>). </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NotPrestarted">
            <summary>The subsystem has not been prestarted on the simultaneous start list (see <see cref="M:OpenLayers.DeviceCollection.SimultaneousStart.PreStart"/>).</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidInhibitState">
            <summary>All <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> entries in the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> are inhibited (see <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Inhibit"/>).</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.RequiredSubsystemInUse">
            <summary>The additional subsystem that is required for this operation is in use.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.WrapModeMismatch">
            <summary><see cref="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.WrapSingleBuffer"/> cannot be true for the requested operation.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BadRetriggerSource">
            <summary>An invalid <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerSource"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BadMultiScanCount">
            <summary>The <see cref="P:OpenLayers.Base.TriggeredScan.MultiScanCount"/> value exceeds the maximum number of scans for the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/>.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidRetrigger">
            <summary>Triggered scan is not supported when used with <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPrePostTrigger"/> mode or <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPreTrigger"/> mode. (See <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/>).</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidPreTrigger">
            <summary>The <see cref="P:OpenLayers.DeviceCollection.Trigger.PreTriggerSource"/> must be <see cref="F:OpenLayers.DeviceCollection.TriggerType.Software"/> when using <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPrePostTrigger"/> or <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPreTrigger"/> mode. (See <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/>).</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.GeneralFailure">
            <summary>A general failure occurred in the device driver.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BadEdge">
            <summary>An invalid counter edge was specified for the current counter/timer mode (see <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> or <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/>). </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.HalfCounterEntry">
            <summary>Only one 16-bit word of a 32-bit word was added to the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/>. Both words must be added.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidX4IndexCombination">
            <summary>Invalid combination of <see cref="P:OpenLayers.Base.QuadratureDecoderSubsystem.IndexMode"/> and <see cref="P:OpenLayers.Base.QuadratureDecoderSubsystem.X4Scaling"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidCouplingType">
            <summary> Invalid coupling type for the device. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidCurrentSource">
            <summary> Invalid excitation current source for the device.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidValue">
            <summary> Invalid value specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidWhenADRunning">
            <summary> Operation is prohibited while the A/D is running. Refer to your device documentation for details.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidSynchronizationMode">
            <summary> Invalid synchronization mode specified.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidWhenDARunning">
            <summary> Operation is prohibited while the D/A is running. Refer to your device documentation for details.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CannotAllocateBuffer">
            <summary>Cannot allocate the requested <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BufferAlreadyQueued">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has already been queued to a subsystem.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BufferInProcess">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has been removed from the queue and sent to the device driver for processing.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidBufferSize">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> The buffer size is invalid for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.OddSizeBuffer">
            <summary>The number of samples in the <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object must be a multiple of two for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BufferNotAllocated">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has been deallocated.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.DataWidthMismatch">
            <summary>An <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has been created using a data type that is not compatible with the subystem's <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Resolution"/>.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoValidSamples">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has 0 <see cref="P:OpenLayers.DeviceCollection.OlBuffer.ValidSamples"/>.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.ChannelNotInChannelList">
            <summary>The specified <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object is not in the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/>.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.SourceBufferTooSmall">
            <summary>The user-specified array is too small for the requested operation.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.DuplicateChannelName">
            <summary>Each <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object in <see cref="T:OpenLayers.DeviceCollection.SupportedChannels"/> must have a unique name.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BufferInUse">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object is in use.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.SubsystemIncompatible">
            <summary>The subsystem is incompatible with the data format of the <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.EmptyChannelList">
            <summary>The <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> must have at least one <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> entry for continuous operations.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidChannelListIndex">
            <summary>An invalid <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> index was specified.</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.SubsystemStopping">
            <summary>The subsystem is in the process of stopping or aborting. (See <see cref="M:OpenLayers.DeviceCollection.SubsystemBase.Stop"/> and/or <see cref="M:OpenLayers.DeviceCollection.SubsystemBase.Abort"/>.)</summary> 
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.FifoOverflow">
            <summary> The driver could not read data from the device FIFO (or Windows USB FIFO) fast enough, resulting in a FIFO overflow condition.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.FifoUnderflow">
            <summary>
            The driver could not write data to the device FIFO (or Windows USB FIFO) fast enough, resulting in a FIFO underflow condition.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.DeviceOverClocked">
            <summary> The A/D clock (usually the external A/D clock) is running too fast on the device. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.TriggerError">
            <summary> Generated by the driver when a trigger is detected but not acted on by the hardware. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.DeviceError">
            <summary> Generated by the driver due to a USB bus problem or hardware problem.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.InvalidError">
            <summary> An unknown error string was passed to GetErrorCode().</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoThermocoupleSupport">
            <summary> The subsystem does not support thermocouples.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoCjcChannel">
            <summary> No CJC channel was specified in the ChannelList.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoThermocoupleTypeSpecified">
            <summary> A <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> was not specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.ThermocoupleTypeSpecified">
            <summary> A <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> was specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.SetSingleValuesNotSupported">
            <summary> The <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.DeviceCollection.SingleValuesInfoRaw[])"/> and <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.DeviceCollection.SingleValuesInfoVolts[])"/> 
            methods are not supported by this subsystem.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.DuplicateChannelSpecified">
            <summary> A duplicate channel was specified for this operation.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.AutoCalibrateNotSupported">
            <summary> Auto-calibrate is not supported by this device.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoRTDSupport">
            <summary> The subsystem does not support RTDs.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoRTDTypeSpecified">
            <summary> An <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> was not specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.RtdTypeSpecified">
            <summary> An <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> was specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.ReturnsOhmsNotSupported">
            <summary> The subsystem does not support returning values as Ohms. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.AccessDenied">
            <summary> Access was denied to the subsystem or device. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.TedsError">
            <summary> TEDs input streaming error. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.NoThermistorSupport">
            <summary> The subsystem does not support Thermistor measurement.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CollectionNameMismatch">
            <summary> Device collection name mismatch. There is more than one collection present with the same name.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CollectionDeviceCountMismatch">
            <summary> Device collection device count mismatch.  Not all devices in the collection were found.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.ChannelNotOnMaster">
            <summary> The specified channel is invalid because it is not on the master device. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.BufferSizeNotMultiple">
            <summary> The number samples in all queued OlBuffer objects must be a multiple of the number of channels in the ChannelList for a DeviceCollection. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.CollectionNotFound">
            <summary> <see cref="T:OpenLayers.DeviceCollection.Device"/> not found. </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.ErrorCode.LastError">
            <summary> Last error code in the enumeration. </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.Device">
            <summary>
            A Device object encapsulates an Open Layers device collection and manages and distributes subsystems 
            for the individual devices contained within the device collection.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.#ctor(System.String)">
            <summary>
            Returns a Device object for a specified Open Layers-compliant device collection. 
            </summary>
            <param name="deviceName">Name of the device collection to open and initialize.</param>
            <returns>The Device object for the specified device collection.
            </returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.Finalize">
            <summary>
            Finalize
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.Dispose">
            <summary>
            Terminates the connection to all devices contained in the device collection.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.Initialize(System.String)">
            <summary>
            Opens the device collection that is specified in deviceName.
            </summary>
            <param name="deviceName">The user visible hardware device collection name.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.GetHardwareInfo">
            <summary>
            Returns hardware-specific information about the collection.
            </summary>
            <returns>The Vendor Id, Collection Id, and Number of Devices within the <see cref="T:OpenLayers.DeviceCollection.HardwareInfo"/> structure.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.GetNumSubsystemElements(OpenLayers.DeviceCollection.SubsystemType)">
            <summary>
            Returns the number of available subsystem elements for a given subsystem type.
            </summary>
            <param name="ssType">The type of subsystem.</param>
            <returns>The number of elements for the specified subsystem type.</returns>
            <remarks>
            Your device may support multiple instances, or elements, of the same subsystem type.
            Element numbering is zero-based; that is, the first instance of the subsystem is 
            called element 0, the second instance of the subsystem is called element 1, and so on.
            For example, if your device has two digital input ports, two subsystems of type 
            DigitalInput are available, differentiated as elements 0 and 1.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.AnalogInputSubsystem(System.Int32)">
            <summary>
            Returns an <see cref="T:OpenLayers.DeviceCollection.AnalogInputSubsystem"/> object.
            </summary>
            <param name="element">Instance of the analog input subsystem to open.</param>
            <returns>A new AnalogInputSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.Device.AnalogOutputSubsystem(System.Int32)">
            <summary>
            Returns an <see cref="T:OpenLayers.DeviceCollection.AnalogOutputSubsystem"/> object.
            </summary>
            <param name="element">Instance of the analog output subsystem to open.</param>
            <returns>A new AnalogOutputSubsystem object.</returns>
            <remarks>If the devices in the collection do not support D/A Synchronization, a Not Supported exception will be thrown.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Device.DeviceName">
            <summary>
            Returns the user-defined name of the device collection. You can modify this name
            in the Open Layers Device Collection Manager application.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Device.CollectionDevices">
            <summary>
            Returns an array of <see cref="T:OpenLayers.Base.Device"/> objects for each device in the collection.
            The array is ordered by the collection device numbers (0-n) with devices 0 and n being 
            at each end of the sync bus chain.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Device.SimultaneousStart">
            <summary>
            Provides an interface to the SimultaneousStart object.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Device.MasterIndex">
            <summary>
            Returns the index of the master <see cref="T:OpenLayers.Base.Device"/> object in the 
            <see cref="P:OpenLayers.DeviceCollection.Device.CollectionDevices"/> array.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.BufferDoneHandler">
             <summary>
             The BufferDoneHandler delegate is called when the event BufferDoneEvent occurs.
             </summary>
             <param name="sender">The subsystem that raised the event.</param>
             <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.BufferDoneEventArgs"/> object that is 
             associated with the event BufferDoneEvent.</param>
             <remarks>
             For input operations, the event BufferDoneEvent is raised when the internal buffer of an 
             <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has been 
             filled with post-trigger data. For output operations, this event is raised when all the data in
             the internal buffer of the OlBuffer object has been output. 
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.DriverRunTimeErrorEventHandler">
            <summary>
            The DriverRunTimeErrorEventHandler delegate is called when the DriverRunTimeErrorEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.DriverRunTimeErrorEventArgs"/> object that is 
            associated with the DriverRunTimeErrorEvent.</param>
            <remarks>
            The DriverRunTimeErrorEvent occurs when the device driver detects one of the following error conditions during runtime:
            <para>
            FifoOverflow - The driver could not read data from the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in a FIFO overflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            FifoUnderflow - The driver could not write data to the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in FIFO underflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            DeviceOverClocked - The A/D clock (usually external clock) is running too fast on the device. To deal with this
            error, slow down the A/D clock.
            </para>
            <para>
            TriggerError - The driver detected a trigger on the device but did not act on it.
            </para>
            <para>
            DeviceError	- Generated by the driver due to a USB bus or hardware problem. To deal with this error,
            stop connecting/disconnecting USB devices while streaming data to them.
            </para>
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.QueueDoneHandler">
            <summary>
            The QueueDoneHandler delegate is called when the event QueueDoneEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.GeneralEventArgs"/> object that is 
            associated with the event QueueDoneEvent.</param>
            <remarks>
            The event QueueDoneEvent is raised when no <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects are available
            on the queue and the operation stops. 
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.QueueStoppedHandler">
            <summary>
            The QueueStoppedHandler delegate is called when the event QueueStoppedEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.GeneralEventArgs"/> object that is 
            associated with the event QueueStoppedEvent.</param>
            <remarks>
            A QueueStoppedEvent is raised when Stop or Abort is called for a continuous analog I/O operation. 
            The event BufferDoneEvent is generated for the current buffer and for up to eight inprocess buffers before a QueueStoppedEvent event occurs.  
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.PreTriggerBufferDoneHandler">
             <summary>
             The PreTriggerBufferDoneHandler delegate is called when the event PreTriggerBufferDoneEvent occurs.
             </summary>
             <param name="sender">The subsystem that raised the event.</param>
             <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.BufferDoneEventArgs"/> object that is
             associated with the event PreTriggerBufferDoneEvent.</param>
             <remarks>
             The event PreTriggerBufferDone is raised when the internal buffer of an 
             <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object is 
             filled with pre-trigger data (for an input operation only). 
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.IOCompleteHandler">
             <summary>
             The IOCompleteHandler delegate is called when the event IOCompleteEvent occurs.
             </summary>
             <param name="sender">The subsystem that raised the event.</param>
             <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.IOCompleteEventArgs"/> object that is 
             associated with the event IOCompleteEvent.</param>
             <remarks>
             For analog input operations that use a reference trigger whose trigger type is something other than software (none),
             the event IOCompleteEvent is raised when the last post-trigger sample is copied into the user buffer. Devices
             that do not support a reference trigger will never receive this event for analog input operations.
             <para>
             For analog output operations, the event IOCompleteEvent is raised when the last data point has been output from 
             an analog output channel; in some cases, this event is raised well after the data is transferred from the buffer
             (and, therefore, well after the events BufferDoneEvent and QueueDoneEvents are raised). 
             </para>
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.GeneralFailureHandler">
            <summary>
            The GeneralFailureHandler delegate is called when the event GeneralFailureEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.GeneralEventArgs"/> object that is 
            associated with the event GeneralFailureEvent.</param>
            <remarks>
            The event GeneralFailureEvent is raised when a general library failure occurs.
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.DeviceRemovedHandler">
            <summary>
            The DeviceRemovedHandler delegate is called when the event DeviceRemovedEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.DeviceCollection.GeneralEventArgs"/> object that is 
            associated with the event DeviceRemovedEvent.</param>
            <remarks>
            The event DeviceRemovedEvent is raised when a device is removed from your system while your application is running.
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.BufferDoneEventArgs">
            <summary>
            A BufferDoneEventArgs object is passed to one of the following delegates when 
            the associated event occurs:
            <see cref="T:OpenLayers.DeviceCollection.BufferDoneHandler"/> delegate when the event 
            BufferDoneEvent occurs or <see cref="T:OpenLayers.DeviceCollection.PreTriggerBufferDoneHandler"/> delegate
            when the event PreTriggerBufferDoneEvent occurs.
            BufferDoneEventArgs contains the data that is associated with the event,
            including the subsystem that raised the event, the time stamp of when
            the event occurred, and the completed <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object.
            </summary>
            <remarks>
            For input operations, the event BufferDoneEvent is raised when the internal buffer of an
            <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has been filled with post-trigger data. For output 
            operations, this event is raised when all the data in the internal buffer of an
            <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object has been output. 
            <para>
            If you stop an analog I/O operation, the event BufferDoneEvent is generated for the
            current OlBuffer object and for up to eight inprocess OlBuffer objects before a QueueStoppedEvent event occurs.
            </para> 
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.GeneralEventArgs">
            <summary>
            GeneralEventArgs is the base class for all event data. GeneralEventArgs contains the data
            that is passed to all events, including the subsystem that raised the event, 
            and the time stamp of when the event occurred.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.GeneralEventArgs.DateTime">
            <summary>
            Returns the time stamp of when the associated event occurred.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.GeneralEventArgs.Subsystem">
            <summary>
            Returns the subsystem that raised the event.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.BufferDoneEventArgs.OlBuffer">
            <summary>
            Returns the completed <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/>  object.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.IOCompleteEventArgs">
            <summary>
            An IOCompleteEventArgs object is passed to the <see cref="T:OpenLayers.DeviceCollection.IOCompleteHandler"/> delegate when the event
            IOCompleteEvent occurs. IOCompleteEventArgs contains the data associated with the event IOCompleteEvent.
            For analog input operations, this includes the total number of samples per channel that were acquired from the
            time acquisition was started to the last post-trigger sample, and the subsystem that raised the event.
            For analog output operations, this is the subsystem that raised the event.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.IOCompleteEventArgs.LastSampleNumber">
            <summary>
            (For analog input operations only) returns the total number of samples per channel that were acquired from the
            time acquisition was started (with the start trigger) to the last post-trigger sample.  
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.DriverRunTimeErrorEventArgs">
            <summary>
            A DriverRunTimeErrorEventArgs object is passed to the <see cref="T:OpenLayers.DeviceCollection.DriverRunTimeErrorEventHandler"/> delegate when 
            when the event DriverRunTimeErrorEvent occurs.
            DriverRunTimeErrorEventArgs contains the error/warning that is generated by the device driver, an error
            message that describes the error/warning, the subsystem that raised the event, 
            and the time stamp of when the event occurred.
            </summary>
            <remarks>
            The DriverRunTimeErrorEvent occurs when the device driver detects one of the following error conditions:
            <para>
            FifoOverflow - The driver could not read data from the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in a FIFO overflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            FifoUnderflow - The driver could not write data to the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in FIFO underflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            DeviceOverClocked - The A/D clock (usually external clock) is running too fast on the device. To deal with this
            error, slow down the A/D clock.
            </para>
            <para>
            TriggerError - The driver detected a trigger on the device but did not act on it.
            </para>
            <para>
            DeviceError	- Generated by the driver due to a USB bus or hardware problem. To deal with this error,
            stop connecting/disconnecting USB devices while streaming data to them.
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.DriverRunTimeErrorEventArgs.ErrorCode">
            <summary>
            Returns the <see cref="T:OpenLayers.DeviceCollection.ErrorCode"/> from the Open Layers for .NET Class Library that
            is associated with the driver error. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.DriverRunTimeErrorEventArgs.Message">
            <summary>
            Returns the descriptive string for the driver error.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.OlDelegates">
            <summary>
            Open Layers-specific delegate support.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.EventMgr">
            <summary>
            The EventMgr class encapsulates the management of events initiated from the
            device driver or copy thread.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.StartBufferThreads">
            <summary>
            Start all buffer processeor threads regardless of whether or not the device contains channel(s) in the channel list
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.ResetBufferDoneCounts">
            <summary>
            Reset the collection and device buffer done counts as well as the buffer tag value.
            These must remain in sync to fire BufferDone events.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.AbortBufferThreads">
            <summary>
            Abort all buffer processor threads if they are currently running
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.WakeUpBufferThreads">
            <summary>
            Wake up all buffer processor threads that are currently running
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.WaitBufferThreadsDone">
            <summary>
            Wait until all buffer processor threads have completed
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.WakeUpSyncBufferDoneThread">
            <summary>
            Wake up the Synchronous buffer done thread to indicate that there is a buffer in the mBufferDoneEventQueue
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.ResetDevQueueFlags">
            <summary>
            Set all device queue stopped and done flags to false
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.SetDevQueueStoppedFlag(System.Int32)">
            <summary>
            Set the device queue stopped flag to true for the device at index devIndex.
            </summary>
            <param name="devIndex">Index of the device to set</param>
            <returns>True if all devices are stopped, otherwise false.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.SetDevQueueDoneFlag(System.Int32)">
            <summary>
            Set the device queue done flag to true for the device at index devIndex.
            </summary>
            <param name="devIndex">Index of the device to set</param>
            <returns>True if all devices queues are done, otherwise false.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.PurgeBuffers(System.Int32)">
            <summary>
            Purge buffers in the ReadyQueue until stopCount is reached.
            </summary>
            <param name="stopCount">The value of mColBuffersDoneCount to reach before stopping to purge buffers.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.EventMgr.ResetIOCompleteFlags">
            <summary>
            Set the aggregate IO Complete data points count to zero and reset all device IO Complete flags to false
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.BufferProcessorThread">
            <summary>
            The BufferProcessorThread class is used to process an <see cref="T:OpenLayers.Base.OlBuffer"/> object 
            by merging the data into the appropriate portion of an <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object.  
            A separate BufferProcessorThread is needed for each device in a device collection and the thread is woken up to 
            process the buffer when a BufferDoneEvent occurs on the given device or when a buffer is dequeued from the
            subsytem's buffer queue.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SynchronousBufferDoneThread">
            <summary>
            The SynchronousBufferDoneThread class is used to provide a single thread to create all buffer done events
            when the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.SynchronousBufferDone"/> property is set.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.OlError">
            <summary>
            An OlError object encapsulates an Open Layers error code.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.OlError.#ctor(OpenLayers.Base.ErrorCode)">
            <summary>
            Creates and returns an OlError object.
            </summary>
            <param name="errorCode">The Open Layers <see cref="T:OpenLayers.Base.ErrorCode"/> that is accessible using an OlException object. </param>
        </member>
        <member name="M:OpenLayers.Base.OlError.GetErrorCode(System.String)">
            <summary>
            Returns the error code that is associated with a specified error message
            in the DT-Open Layers for .NET Class Library.
            </summary>
            <param name="ErrString">The error message for which to return the error code.</param>
            <returns>The error code that is associated with the specified error message.</returns>
        </member>
        <member name="M:OpenLayers.Base.OlError.GetErrorString(OpenLayers.Base.ErrorCode)">
            <summary>
            Returns a description for the specified error code in the DT-Open Layers for .NET Class Library.
            </summary>
            <param name="ErrCode">The error code for which to return the description.</param>
            <returns>A description of the specified error code.</returns>
        </member>
        <member name="P:OpenLayers.Base.OlError.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlError.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.OlException">
            <summary>
            The OlException class provides properites for handling Open Layers errors that can be generated by the library.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.OlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            For internal use only.
            </summary>
            <param name="si">Serialization information.</param>
            <param name="context">Streaming context.</param>
        </member>
        <member name="P:OpenLayers.Base.OlException.ErrorCode">
            <summary>
            Returns the <see cref="T:OpenLayers.Base.ErrorCode"/> from the Open Layers for .NET Class Library that is associated with this exception. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlException.Message">
            <summary>
            Returns the descriptive string for the exception.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.OlException.Subsystem">
            <summary>
            Returns the subsystem (AnalogInput, AnalogOutput, DigitalInput, DigitalOutput, 
            CounterTimer, or QuadratureDecoder) that raised the exception. If the exception
            is not related to a specific subsystem, returns null.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.ErrorCode">
            <summary>
            Open Layers error codes that are accessible using an <see cref="T:OpenLayers.Base.OlException"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoError">
            <summary>No error.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.Success">
            <summary>The operation was successful.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidElement">
            <summary>An invalid subsystem element was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidListSize">
            <summary>An attempt was made to set the <see cref="T:OpenLayers.Base.ChannelList"/> to an invalid size.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidListEntry">
            <summary>An invalid <see cref="T:OpenLayers.Base.ChannelListEntry"/> entry was specified in the <see cref="T:OpenLayers.Base.ChannelList"/>.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidChannel">
            <summary>An invalid <see cref="T:OpenLayers.Base.ChannelListEntry"/> object was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidChannelType">
            <summary>An invalid <see cref="P:OpenLayers.Base.SubsystemBase.ChannelType"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidTrigger">
            <summary>An invalid <see cref="P:OpenLayers.Base.Trigger.TriggerType"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidResolution">
            <summary>An invalid <see cref="P:OpenLayers.Base.SubsystemBase.Resolution"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidClockSource">
            <summary>An invalid clock <see cref="P:OpenLayers.Base.Clock.Source"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidFrequency">
            <summary>An invalid clock <see cref="P:OpenLayers.Base.Clock.Frequency"/> was specified.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidPulseType">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseType"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidPulseWidth">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.PulseWidth"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidCounterMode">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidDataFlow">
            <summary>An invalid <see cref="P:OpenLayers.Base.SubsystemBase.DataFlow"/> mode was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.SubsystemInUse">
            <summary>An attempt was made to access a subsystem that is already in use.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.SubsystemNotInUse">
            <summary>An operation was attempted on a subsystem that is not in use.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.AlreadyRunning">
            <summary>An operation was attempted on a running subsystem.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NotConfigured">
            <summary>An operation was attempted on a subsystem that was not configured (see <see cref="M:OpenLayers.Base.SubsystemBase.Config"/>).</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.DataFlowMismatch">
            <summary>An invalid <see cref="P:OpenLayers.Base.SubsystemBase.DataFlow"/> mode was set for the current operation.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NotRunning">
            <summary>The subsystem is not running.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidRange">
            <summary>An invalid <see cref="P:OpenLayers.Base.AnalogSubsystem.VoltageRange"/> was specified.</summary>		 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NotSupported">
            <summary>The operation is not supported.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidDivider">
            <summary>An invalid <see cref="P:OpenLayers.Base.Clock.ExtClockDivider"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidGate">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.GateType"/> was set for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidChannelList">
            <summary>An invalid <see cref="T:OpenLayers.Base.ChannelList"/> channel entry was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.ADOverrun">
            <summary> Conversion is not complete within timeout period, resulting in A/D overrun condition.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoQueuedBuffers">
            <summary>No <see cref="T:OpenLayers.Base.OlBuffer"/> objects were queued to the subsystem (see <see cref="M:OpenLayers.Base.BufferQueue.QueueBuffer(OpenLayers.Base.OlBuffer)"/>).</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CannotOpenDriver">
            <summary>The device driver cannot be initialized.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CantCascade">
            <summary>The subsystem cannot be cascaded (see <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CascadeMode"/>).</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.WrongCounterMode">
            <summary>An invalid <see cref="P:OpenLayers.Base.CounterTimerSubsystem.CounterMode"/> was set for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidGain">
            <summary>An invalid <see cref="P:OpenLayers.Base.ChannelListEntry.Gain"/> was set for the <see cref="T:OpenLayers.Base.ChannelListEntry"/> object.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidRetriggerFrequency">
            <summary>An invalid <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerFrequency"/> was requested for the current <see cref="T:OpenLayers.Base.ChannelList"/>.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CommandTimeout">
            <summary>A command timed out in the device driver.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.EventCountOverFlow">
            <summary>An overflow occured while in event counting mode.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoSubsystemsOnSimultaneousStartList">
            <summary>No subsystems have been put on the <see cref="T:OpenLayers.Base.SimultaneousStart"/> list.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoChannelInhibitList">
            <summary>Subsystem does not support channel inhibition (see <see cref="P:OpenLayers.Base.ChannelListEntry.Inhibit"/>). </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NotPrestarted">
            <summary>The subsystem has not been prestarted on the simultaneous start list (see <see cref="M:OpenLayers.Base.SimultaneousStart.PreStart"/>).</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidInhibitState">
            <summary>All <see cref="T:OpenLayers.Base.ChannelListEntry"/> entries in the <see cref="T:OpenLayers.Base.ChannelList"/> are inhibited (see <see cref="P:OpenLayers.Base.ChannelListEntry.Inhibit"/>).</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.RequiredSubsystemInUse">
            <summary>The additional subsystem that is required for this operation is in use.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.WrapModeMismatch">
            <summary><see cref="P:OpenLayers.Base.AnalogOutputSubsystem.WrapSingleBuffer"/> cannot be true for the requested operation.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BadRetriggerSource">
            <summary>An invalid <see cref="P:OpenLayers.Base.TriggeredScan.RetriggerSource"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BadMultiScanCount">
            <summary>The <see cref="P:OpenLayers.Base.TriggeredScan.MultiScanCount"/> value exceeds the maximum number of scans for the <see cref="T:OpenLayers.Base.ChannelList"/>.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidRetrigger">
            <summary>Triggered scan is not supported when used with <see cref="F:OpenLayers.Base.DataFlow.ContinuousPrePostTrigger"/> mode or <see cref="F:OpenLayers.Base.DataFlow.ContinuousPreTrigger"/> mode. (See <see cref="P:OpenLayers.Base.SubsystemBase.DataFlow"/>).</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidPreTrigger">
            <summary>The <see cref="P:OpenLayers.Base.Trigger.PreTriggerSource"/> must be <see cref="F:OpenLayers.Base.TriggerType.Software"/> when using <see cref="F:OpenLayers.Base.DataFlow.ContinuousPrePostTrigger"/> or <see cref="F:OpenLayers.Base.DataFlow.ContinuousPreTrigger"/> mode. (See <see cref="P:OpenLayers.Base.SubsystemBase.DataFlow"/>).</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.GeneralFailure">
            <summary>A general failure occurred in the device driver.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BadEdge">
            <summary>An invalid counter edge was specified for the current counter/timer mode (see <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StartEdge"/> or <see cref="P:OpenLayers.Base.CounterTimerSubsystem.StopEdge"/>). </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.HalfCounterEntry">
            <summary>Only one 16-bit word of a 32-bit word was added to the <see cref="T:OpenLayers.Base.ChannelList"/>. Both words must be added.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidX4IndexCombination">
            <summary>Invalid combination of <see cref="P:OpenLayers.Base.QuadratureDecoderSubsystem.IndexMode"/> and <see cref="P:OpenLayers.Base.QuadratureDecoderSubsystem.X4Scaling"/> was specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidCouplingType">
            <summary> Invalid coupling type for the device. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidCurrentSource">
            <summary> Invalid excitation current source for the device.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidValue">
            <summary> Invalid value specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidWhenADRunning">
            <summary> Operation is prohibited while the A/D is running. Refer to your device documentation for details.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidSynchronizationMode">
            <summary> Invalid synchronization mode specified.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidWhenDARunning">
            <summary> Operation is prohibited while the D/A is running. Refer to your device documentation for details.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CannotAllocateBuffer">
            <summary>Cannot allocate the requested <see cref="T:OpenLayers.Base.OlBuffer"/> object.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BufferAlreadyQueued">
            <summary>The <see cref="T:OpenLayers.Base.OlBuffer"/> object has already been queued to a subsystem.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BufferInProcess">
            <summary>The <see cref="T:OpenLayers.Base.OlBuffer"/> object has been removed from the queue and sent to the device driver for processing.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidBufferSize">
            <summary>The <see cref="T:OpenLayers.Base.OlBuffer"/> The buffer size is invalid for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.OddSizeBuffer">
            <summary>The number of samples in the <see cref="T:OpenLayers.Base.OlBuffer"/> object must be a multiple of two for the current operation.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BufferNotAllocated">
            <summary>The <see cref="T:OpenLayers.Base.OlBuffer"/> object has been deallocated.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.DataWidthMismatch">
            <summary>An <see cref="T:OpenLayers.Base.OlBuffer"/> object has been created using a data type that is not compatible with the subystem's <see cref="P:OpenLayers.Base.SubsystemBase.Resolution"/>.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoValidSamples">
            <summary>The <see cref="T:OpenLayers.Base.OlBuffer"/> object has 0 <see cref="P:OpenLayers.Base.OlBuffer.ValidSamples"/>.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.ChannelNotInChannelList">
            <summary>The specified <see cref="T:OpenLayers.Base.ChannelListEntry"/> object is not in the <see cref="T:OpenLayers.Base.ChannelList"/>.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.SourceBufferTooSmall">
            <summary>The user-specified array is too small for the requested operation.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.DuplicateChannelName">
            <summary>Each <see cref="T:OpenLayers.Base.SupportedChannelInfo"/> object in <see cref="T:OpenLayers.Base.SupportedChannels"/> must have a unique name.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BufferInUse">
            <summary>The <see cref="T:OpenLayers.Base.OlBuffer"/> object is in use.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.SubsystemIncompatible">
            <summary>The subsystem is incompatible with the data format of the <see cref="T:OpenLayers.Base.OlBuffer"/> object.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.EmptyChannelList">
            <summary>The <see cref="T:OpenLayers.Base.ChannelList"/> must have at least one <see cref="T:OpenLayers.Base.ChannelListEntry"/> entry for continuous operations.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidChannelListIndex">
            <summary>An invalid <see cref="T:OpenLayers.Base.ChannelList"/> index was specified.</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.SubsystemStopping">
            <summary>The subsystem is in the process of stopping or aborting. (See <see cref="M:OpenLayers.Base.SubsystemBase.Stop"/> and/or <see cref="M:OpenLayers.Base.SubsystemBase.Abort"/>.)</summary> 
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.FifoOverflow">
            <summary> The driver could not read data from the device FIFO (or Windows USB FIFO) fast enough, resulting in a FIFO overflow condition.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.FifoUnderflow">
            <summary>
            The driver could not write data to the device FIFO (or Windows USB FIFO) fast enough, resulting in a FIFO underflow condition.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.DeviceOverClocked">
            <summary> The A/D clock (usually the external A/D clock) is running too fast on the device. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.TriggerError">
            <summary> Generated by the driver when a trigger is detected but not acted on by the hardware. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.DeviceError">
            <summary> Generated by the driver due to a USB bus problem or hardware problem.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.InvalidError">
            <summary> An unknown error string was passed to GetErrorCode().</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoThermocoupleSupport">
            <summary> The subsystem does not support thermocouples.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoCjcChannel">
            <summary> No CJC channel was specified in the ChannelList.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoThermocoupleTypeSpecified">
            <summary> A <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> was not specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.ThermocoupleTypeSpecified">
            <summary> A <see cref="P:OpenLayers.Base.SupportedChannelInfo.ThermocoupleType"/> was specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.SetSingleValuesNotSupported">
            <summary> The <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.Base.SingleValuesInfoRaw[])"/> and <see cref="M:OpenLayers.Base.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.Base.SingleValuesInfoVolts[])"/> 
            methods are not supported by this subsystem.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.DuplicateChannelSpecified">
            <summary> A duplicate channel was specified for this operation.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.AutoCalibrateNotSupported">
            <summary> Auto-calibrate is not supported by this device.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoRTDSupport">
            <summary> The subsystem does not support RTDs.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoRTDTypeSpecified">
            <summary> An <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> was not specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.RtdTypeSpecified">
            <summary> An <see cref="P:OpenLayers.Base.SupportedChannelInfo.RTDType"/> was specified for the requested channel.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.ReturnsOhmsNotSupported">
            <summary> The subsystem does not support returning values as Ohms. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.AccessDenied">
            <summary> Access was denied to the subsystem or device. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.TedsError">
            <summary> TEDs input streaming error. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.NoThermistorSupport">
            <summary> The subsystem does not support Thermistor measurement.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CollectionNameMismatch">
            <summary> Device collection name mismatch. There is more than one collection present with the same name.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CollectionDeviceCountMismatch">
            <summary> Device collection device count mismatch.  Not all devices in the collection were found.</summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.ChannelNotOnMaster">
            <summary> The specified channel is invalid because it is not on the master device. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.BufferSizeNotMultiple">
            <summary> The number samples in all queued OlBuffer objects must be a multiple of the number of channels in the ChannelList for a DeviceCollection. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.CollectionNotFound">
            <summary> <see cref="T:OpenLayers.DeviceCollection.Device"/> not found. </summary>
        </member>
        <member name="F:OpenLayers.Base.ErrorCode.LastError">
            <summary> Last error code in the enumeration. </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.Logger">
            <summary>
            Customized Trace support for Open Layers for .NET
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.#ctor(System.String)">
            <summary>
            Constructor which creates a TraceSwitch named switchName.  This
            name corresponds to a switch name in the applications .config file.
            </summary>	
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Enter(System.String)">
            <summary>
            Trace output "Entering : strMethod" followed by an indent.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Exit(System.String)">
            <summary>
            Unindent followed by Trace output "Exiting : strMethod".
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Trace(OpenLayers.DtDevice.LoggerLevel,System.String)">
            <summary>
            Output inStr with no cr/lf appended if level is enabled.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.TraceLine(OpenLayers.DtDevice.LoggerLevel,System.String)">
            <summary>
            Output inStr with a cr/lf appended if level is enabled.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Assert(System.Boolean)">
            <summary>
            Assert if Assert switch is on
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Flush">
            <summary>
            Flushes the output buffer, and causes buffered data to be written
            to the Listeners.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Indent(OpenLayers.DtDevice.LoggerLevel)">
            <summary>
            Increase the current indent level by one.
            </summary>		
        </member>
        <member name="M:OpenLayers.DtDevice.Logger.Unindent(OpenLayers.DtDevice.LoggerLevel)">
            <summary>
            Decrement the current indent level by one.
            </summary>		
        </member>
        <member name="T:OpenLayers.DtDevice.LoggerLevel">
            <summary>
            Logger trace levels which can be set in any combination.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.LoggerSwitch">
            <summary>
            Logger trace level switch.  The trace level is set in the .config file
            </summary>
            <remark>
            Example :
             <configuration>
            	<system.diagnostics>
            		<switches>
            		<!-- Set value property of the loggerSwitch switch to any combination 
            			of the following:
            			None      = 0x0, 
            			EnterExit = 0x1, 
            			Error     = 0x2, 
            			Info      = 0x4,
            			Detailed  = 0x8,
            			Exception = 0x10    -->
            			<add name="DinLogger" value="0" />						
            			<add name="AinLogger" value="7" />
            			<add name="AoutLogger" value="7" />
            			<remove name="DinLogger" />
            		</switches>
            		<trace autoflush="true" indentsize="4">             
            			<listeners>
            				<add name="MyListener" type="System.Diagnostics.TextWriterTraceListener" initializeData="c:\MyListener.log"/>
            			</listeners>
            		</trace>
            	</system.diagnostics>
            	</configuration>
            </remark>
        </member>
        <member name="M:OpenLayers.DtDevice.LoggerSwitch.#ctor(System.String,System.String)">
            <summary>
            Constructor.  displayName is used in .config switches section.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.LoggerSwitch.Enabled(OpenLayers.DtDevice.LoggerLevel)">
            <summary>
            Test if LoggerLevel "level" is enabled.
            </summary>
        </member>
        <member name="P:OpenLayers.DtDevice.LoggerSwitch.Level">
            <summary>
            Trace level property.
            </summary>
        </member>
        <member name="P:OpenLayers.DtDevice.LoggerSwitch.EnterExit">
            <summary>
            Test if a LoggerLevel EnterExit is enabled.
            </summary>
        </member>
        <member name="P:OpenLayers.DtDevice.LoggerSwitch.None">
            <summary>
            Test if a LoggerLevel None is enabled.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.SyncQueue">
            <summary>
            Synchronized wrapper around the unsynchronized ArrayList class
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.SyncQueue.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.SyncQueue.Count">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.DtDevice.SyncQueue.Dequeue">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.DtDevice.SyncQueue.Enqueue(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:OpenLayers.DtDevice.SyncQueue.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenLayers.DeviceCollection.AnalogInputSubsystem">
            <summary>
            The AnalogInputSubsystem class provides the properties, methods, and events for performing analog 
            input operations for a device collection. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.DeviceCollection.Device.AnalogInputSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.AnalogSubsystem">
            <summary>
            The AnalogSubsystem class is an abstract base class and is accessible 
            only by using the following derived classes: <see cref="T:OpenLayers.DeviceCollection.AnalogInputSubsystem"/> 
            and/or <see cref="T:OpenLayers.DeviceCollection.AnalogOutputSubsystem"/>.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SubsystemBase">
            <summary>
            The SubsystemBase class is an abstract base class that is accessible from 
            the following derived classes: <see cref="T:OpenLayers.DeviceCollection.AnalogSubsystem"/> (and its derived classes
            <see cref="T:OpenLayers.DeviceCollection.AnalogInputSubsystem"/> and <see cref="T:OpenLayers.DeviceCollection.AnalogOutputSubsystem"/>), 
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Finalize">
            <summary>
            finalize
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.disposed">
            <summary>
            flag to track dispose call
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Dispose">
             <summary>
             Releases the subsystem’s connection to the Open Layers device. 
             </summary>
             <remarks>
             This method is overridden in derived classes.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Dispose(System.Boolean)">
            <summary>
            disconnect subsystem from the device driver
            </summary>
            <param name="disposing">false if calling from finalize, true otherwise</param>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mBufferQueue">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.BufferQueue"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mDelegates">
            <summary>
            OlDelegates
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mClock">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.Clock"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mTrigger">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.Trigger"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mReferenceTrigger">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.ReferenceTrigger"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mChannelList">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mDevSubsystems">
            <summary>
            An array of subsytem objects
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.ChannelMap">
            <summary>
            Channel Map used to determine the device within the collection and the channel 
            number on that device based on the collection subsystem channel number.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mDevice">
            <summary>
            Device that created this subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mElement">
            <summary>
            Returns the element number of the subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mFlushBuffer">
            <summary>
            user buffer to flush samples to
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mNumFlushSamples">
            <summary>
            number of samples flushed
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsACCoupling">
            <summary>
            Supports AC coupling.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsDCCoupling">
            <summary>
            Supports DC coupling.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsInternalCurrentSrc">
            <summary>
            Supports an internal excitation current source.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsExternalCurrentSrc">
            <summary>
            Supports an external excitation current source.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsPerChannelExcitationVoltageSource">
            <summary>
            Excitation voltage can be supplied per individual channel. 
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsInternalExcitationVoltageSrc">
            <summary>
            Supports an internal excitation voltage source.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsExternalExcitationVoltageSrc">
            <summary>
            Supports an external excitation voltage source.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mMinExcitationVoltageValue">
            <summary>
            The minimum supported excitation voltage.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mMaxExcitationVoltageValue">
            <summary>
            The maximum supported excitation voltage.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsShuntCalibration">
            <summary>
            Returns true if the hardware supports shunt calibration, false otherwise
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsIepe">
            <summary>
            Returns true if the hardware supports IEPE.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mSupportsRemoteSense">
            <summary>
            Returns true if the hardware supports remote sense circuit, false otherwise
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.logger">
            <summary>
            shared logger object
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.mOlError">
            <summary>
            shared OlError object
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Start">
            <summary>
            Starts an operation on the subsystem.
            </summary>
            <remarks>This method is overridden in derived classes.</remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Stop">
            <summary>
            Stops an operation on the subsystem after the current buffer has been filled for input operations or output for output operations.
            </summary>
            <remarks>This method is overridden in derived classes.</remarks>	    
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Reset">
            <summary>
            Stops a continuous operation on a subsystem immediately without waiting for
            the current buffer to be filled or output, and reinitializes the subsystem
            to the default configuration.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Abort">
            <summary>
            Stops an operation on the subsystem immediately. 
            </summary>
            <remarks>This method is overridden in derived classes.</remarks>		
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.Config">
            <summary>
            Configures the subsystem based on the current property settings.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SubsystemBase.SetDefaultConfig">
            <summary>
            set driver config to defaults
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportedChannels">
             <summary>
             Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.SupportedChannels"/> object.
             </summary>
             <remarks>Use this interface to get information about each channel that is 
             supported by the specified subsystem.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.BufferQueue">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.BufferQueue"/> object.
            </summary>
            <remarks>For continuous analog I/O operations, use this interface to 
            add <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects to the subsystem's buffer queue.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.Clock">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.Clock"/> object.
            </summary>
            <remarks> Use this interface to configure how a subsystem is clocked.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.Trigger">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.Trigger"/> object.
            </summary>
            <remarks>Use this interface to configure how a subsystem is triggered.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.ReferenceTrigger">
            <summary>
            Provides an interface to <see cref="T:OpenLayers.DeviceCollection.ReferenceTrigger"/> object.
            </summary>
            <remarks>Use this interface to configure how a subsystem is triggered using stop trigger.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelList">
            <summary>
            Provides an interface to a <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> object.
            </summary>
            <remarks>Use this interface to set up a channel list for a continuous analog 
            input or output operation.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.Device">
            <summary>
            Returns the <see cref="T:OpenLayers.DeviceCollection.Device"/> object that is associated with the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.Element">
             <summary>
             Returns the element number of the subsystem.
             </summary>
             <remarks>
             Your device may support multiple instances, called elements, of the same subsystem type. 
             Element numbering is zero-based; that is, the first instance of the subsystem is called element 0, 
             the second instance of the subsystem is called element 1, and so on. For example, if your device
             has two digital input ports, two subsystems of type DigitalInput are available, 
             differentiated as elements 0 and 1.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.State">
            <summary>
            Returns the current state of the subsystem (Initialized, ConfiguredForSingleValue, ConfiguredForContinuous,
            PreStarted, Running, Stopping, Aborting, or IoComplete).
            </summary>
        </member>
        <member name="E:OpenLayers.DeviceCollection.SubsystemBase.GeneralFailureEvent">
            <summary>
            Occurs when a general library failure is encountered.
            </summary>
        </member>
        <member name="E:OpenLayers.DeviceCollection.SubsystemBase.DeviceRemovedEvent">
            <summary>
            Occurs when a device is removed from your system while your application is running.
            </summary>
        </member>
        <member name="E:OpenLayers.DeviceCollection.SubsystemBase.QueueDoneEvent">
            <summary>
            Occurs when no OlBuffer objects are available on the queue and the operation stops.
            </summary>
        </member>
        <member name="E:OpenLayers.DeviceCollection.SubsystemBase.QueueStoppedEvent">
            <summary>
            For analog input operations, occurs when a pre- or post-trigger acquisition operation 
            completes or when you stop a continuous analog input operation. For analog output operations, 
            occurs when a continuous analog output operation stops and the queue is emptied.  
            </summary>
        </member>
        <member name="E:OpenLayers.DeviceCollection.SubsystemBase.BufferDoneEvent">
            <summary>
            For input operations, occurs when the OlBuffer object has been filled 
            with post-trigger data. For output operations, occurs when all the data in the OlBuffer object has
            been output. 
            If you stop an analog I/O operation, the event BufferDoneEvent is generated for the current buffer 
            and for up to eight inprocess buffers before a QueueStoppedEvent event occurs. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SubsystemType">
            <summary>
            Returns the subsystem type (AnalogInput or AnalogOutput).
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.StopOnError">
            <summary>
            Gets or sets the stop-on-error condition (stop if overrun or underrun
            occurs, or continue if overrun or underrun occurs).
            </summary>
            <remarks>
            If StopOnError is True, the subsystem automatically stops
            when an overrun or underrun error occurs. If StopOnError is False,
            the subsystem continues to run when an overrun or underrun error occurs.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.AsynchronousStop">
            <summary>
            Gets or sets the stop behavior (synchronous or asynchronous) of the subsystem.
            </summary>
            <remarks>
            If you set the AsynchronousStop property to True, control returns to your program
            after <see cref="M:OpenLayers.DeviceCollection.SubsystemBase.Stop"/> is called. If you set the AsynchronousStop property to False (the default
            setting), control does not return to your program after Stop is called until the <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object 
            completes. (It is recommended that you do not wait more than 20 seconds for the 
            stop to complete.)
            If you try to perform another operation while the stop is in 
            progress, an exception is raised with the error code "SubsystemStopping" and the
            exception message "The subsystem is in the process of stopping or aborting".
            </remarks>
            
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.WrapMode">
            <summary>
            Gets or sets the Wrap Mode for buffers in an analog output subsystem
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.DeviceCollection.ChannelType"/> (SingleEnded or Differential) for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow">
            <summary>
            Gets and sets the <see cref="T:OpenLayers.DeviceCollection.DataFlow"/> mode (Continuous, SingleValue,
            ContinuousPreTrigger, or ContinuousPrePostTrigger) of the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.Encoding">
            <summary>
            Gets and sets the data <see cref="T:OpenLayers.DeviceCollection.Encoding"/> (Binary 
            or TwosComplement) of the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.Resolution">
            <summary>
            Gets and sets the resolution of the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSingleEnded">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.ChannelType.SingleEnded"/> 
            channels; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType"/> property to set the channel 
            configuration to SingleEnded.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsDifferential">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.ChannelType.Differential"/> 
            channels; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType"/> property to set the channel 
            configuration to Differential.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsBinaryEncoding">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.Encoding.Binary"/> 
            data encoding; otherwise, returns False.
            </summary>		
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Encoding"/> property to set the data encoding to Binary.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.MaxSingleEndedChannels">
            <summary>
            Returns the total number of <see cref="F:OpenLayers.DeviceCollection.ChannelType.SingleEnded"/> channels supported by the subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType"/> property to set the channel 
            configuration to SingleEnded.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.MaxDifferentialChannels">
            <summary>
            Returns the total number of <see cref="F:OpenLayers.DeviceCollection.ChannelType.Differential"/> channels supported by the subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.ChannelType"/> property to set the channel 
            configuration to Differential.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.InternalSupportsWrapSingle">
            <summary>
            Returns True if the subsystem supports reusing a single buffer for continuous operations;
            otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.WrapSingleBuffer"/> property to use
            a single buffer for the continuous operation. </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsTwosCompEncoding">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.Encoding.TwosComplement"/> data encoding;
            otherwise, returns False.
            </summary>		
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Encoding"/> property to set the data encoding to 
            TwosComplement.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSimultaneousStart">
            <summary>
            Returns True if the subsystem supports starting multiple subsystems simultaneously;
            otherwise, returns False. 
            </summary>	
            <remarks>Use the <see cref="T:OpenLayers.DeviceCollection.SimultaneousStart"/> class to set up and 
            manage the simultaneous start list.</remarks>	
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsBuffering">
             <summary>
             Returns True if the subsystem supports continuous acquisition to or from 
             <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects; otherwise, returns False.
             </summary>
             <remarks>Use the <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> and 
             <see cref="T:OpenLayers.DeviceCollection.BufferQueue"/> classes to set up buffering for your operation. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsContinuous">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.DataFlow.Continuous"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> property to set the data flow mode to 
            Continuous.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSingleValue">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.DataFlow.SingleValue"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> property to set the data flow mode to 
            SingleValue.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsContinuousPreTrigger">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPreTrigger"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> property to set the data flow mode to 
            ContinuousPreTrigger.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsContinuousPrePostTrigger">
            <summary>
            Returns True if the subsystem supports <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPrePostTrigger"/> 
            data flow mode; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.DataFlow"/> property to set the data flow mode to 
            ContinuousPrePostTrigger.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsProgrammableGain">
             <summary>
             Returns True if the subsystem supports programmable gain for the 
             <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> objects; otherwise, returns False.
             </summary>
             <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Gain"/> property to 
             set the gain for a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsChannelListInhibit">
            <summary>
            Returns True if the subsystem supports inhibition of a 
            <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> entry; otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Inhibit"/> property to 
            set the inhibit state for a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsInterrupt">
            <summary>
            Returns True if the subsystem supports interrupt-driven I/O; otherwise,
            returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.NumberOfChannels">
             <summary>
             Returns the total number of channels that are supported by the subsystem.  
             </summary>
             <remarks>
             This total number of channels includes both native and non-native channels that are
             supported for the subsystem. For example, if the analog input subsystem supports
             the ability to stream both analog and digital input data, the digital input channels 
             will be included with the analog input channels in the total channel count.
             See also <seealso cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> and 
             <seealso cref="T:OpenLayers.DeviceCollection.SupportedChannels"/>.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSoftwareResolution">
            <summary>
            Returns True if the subsystem supports software-programmable resolution;
            otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.Resolution"/> property to specify 
            the resolution for the subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.NumberOfResolutions">
            <summary>
            Returns the number of resolutions that are supported by the subsystem.
            </summary>
            <remarks>To get an array of available resolutions that are supported by the subsystem, use the 
            <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.SupportedResolutions"/> property.
            Use the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.Resolution"/> property to specify  
            the resolution for the subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportedResolutions">
            <summary>
            Returns an array of available resolutions that are supported by the subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.Resolution"/> 
            property to specify the resolution for the subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.FifoSize">
            <summary>
            Returns the size of the FIFO on the device that is associated with the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsWaveformModeOnly">
            <summary>
            Returns True if the subsystem supports waveform-based operations using 
            the onboard FIFO only; otherwise, returns False.
            If this property is True, the buffer wrap mode must be set to 
            <see cref="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.WrapSingleBuffer"/>. 
            In addition, the buffer size must be less than or equal to the 
            <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.FifoSize"/>.
            </summary>		
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.ReturnsFloats">
            <summary>
            Returns True if the subsystem returns data as floating-point values; otherwise, 
            returns False indicating that the subsystem returns data as integer values.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsCurrentOutput">
            <summary>
            Returns True if the subsystem supports current outputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSetSingleValues">
            <summary>
            Returns True if the subsystem supports updating multiple channels simultaneously with a single value 
            (using <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.DeviceCollection.SingleValuesInfoRaw[])"/> or
            <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.DeviceCollection.SingleValuesInfoVolts[])"/>);
            otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SubsystemBase.IsRunning">
            <summary>
            Returns True if the subsystem is currently running; otherwise, returns False.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SubsystemBase.States">
            <summary>
            Returns the current state of the subsystem.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.Initialized">
            <summary>
            The subsystem is initialized, but not configured.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.ConfiguredForSingleValue">
            <summary>
            The subsystem is configured for a single-value operation.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.ConfiguredForContinuous">
            <summary>
            The subsystem is configured for a continuous operation.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.PreStarted">
            <summary>
            The subsystem was prestarted for a continuous operation.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.Running">
            <summary>
            The subsystem is running.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.Stopping">
            <summary>
            The subsystem is in the process of stopping.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.Aborting">
            <summary>
            The subsystem is in the process of aborting.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.SubsystemBase.States.IoComplete">
            <summary>
            The final analog output sample has been written from the FIFO on the device.
            </summary>
            <remarks>This is a transient state that may not be detected by your application.</remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SubsystemBase.InternalStates">
            <summary>
            Subsystem states that DT kernel mode drivers use.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.Config">
            <summary>
            Configures the subsystem based on the current property settings.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.SetDefaultConfig">
            <summary>
            Set driver config struct to it's defaults
            </summary>	
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.FindClosestGain(System.Double)">
            <summary>
            This method navigates through the subsystem supported gains.
            It returns the closest gain available to user input gain
            </summary>
            <param name="userGain"> The gain requested by the caller</param>
            <returns> The subsystem supported gain which is closest to user required gain</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.VoltsToRawValue(System.Double,System.Double)">
             <summary>
             Converts a voltage value into a raw count.
             </summary>
             <param name="volts">The voltage value to convert.</param>
             <param name="gain">The gain that was applied to input signal to produce the voltage.</param>
             <returns>
             The raw count that is associated with the voltage value. 
            </returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.RawValueToVolts(System.UInt16,System.Double)">
            <summary>
            Converts a raw count into a voltage value.
            </summary>
            <param name="code">The raw count to convert.</param>
            <param name="gain">The gain to apply to the value. The gain is 
            typically applied to the input signal at acquisition time.</param>
            <returns>The voltage value that is associated with the raw count.</returns>
            <remarks>Use this method when the subsystem has a resolution of 16 bits or less.</remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.RawValueToVolts(System.Int32,System.Double)">
            <summary>
            Converts a raw count into a voltage value.
            </summary>
            <param name="code">The raw count to convert.</param>
            <param name="gain">The gain to apply to the value. The gain is 
            typically applied to the input signal at acquisition time.</param>
            <returns>The voltage value that is associated with the raw count.</returns>
            <remarks>Use this method when the subsystem has a resolution of greater than 16 bits.</remarks>		
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.RawValueToSensor(System.UInt16,System.Double,System.Double,System.Double)">
             <summary>
             Converts a raw count to a sensor value in engineering units.
             </summary>
             <param name="code">The raw count to convert.</param>
             <param name="gain">The gain of the input signal, which is
             used to convert the raw count to a prescaled voltage value.</param>
             <param name="sensorGain">The sensor gain that is applied to the prescaled voltage value.</param>
             <param name="sensorOffset">The sensor offset that is applied to the prescaled voltage value.</param>
             <returns>The sensor value that is associated with the raw count.</returns>
             <remarks>Use this method when the subsystem has a resolution of 16 bits or less.
            
             The scaling occurs in two steps. First, the raw count is converted to a 
             prescaled voltage by applying the gain for the input signal.
             Then, the prescaled voltage value is scaled using the equation 
             y = mx + b, where y is the scaled sensor value, m is the sensor gain,
             x is the prescaled value in voltage, and b is the sensor offset.
             </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogSubsystem.RawValueToSensor(System.Int32,System.Double,System.Double,System.Double)">
             <summary>
             Converts a raw count to a sensor value in engineering units.
             </summary>
             <param name="code">The raw count to convert.</param>
             <param name="gain">The gain of the input signal, which is
             used to convert the raw count to a prescaled voltage value.</param>
             <param name="sensorGain">The sensor gain that is applied to the prescaled voltage value.</param>
             <param name="sensorOffset">The sensor offset that is applied to the prescaled voltage value.</param>
             <returns>The sensor value that is associated with the raw count.</returns>
             <remarks>Use this method when the subsystem has a resolution greater than 16 bits.
            
             The scaling occurs in two steps. First, the raw count is converted to a 
             prescaled voltage by applying the gain for the input signal.
             Then, the prescaled voltage value is scaled using the equation 
             y = mx + b, where y is the scaled sensor value, m is the sensor gain,
             x is the prescaled value in voltage, and b is the sensor offset. 
            </remarks>
        </member>
        <member name="E:OpenLayers.DeviceCollection.AnalogSubsystem.IOCompleteEvent">
            <summary>
            Occurs when the last data point has been output from an analog output channel, or when the last
            sample has been copied to an analog input buffer on devices that support TTL and analog threshold
            stop trigger.  
            In some cases, this event is raised well after the data is transferred from the buffer (and,
            therefore, well after BufferDoneEvent and QueueDoneEvents occur).
            </summary>
        </member>
        <member name="E:OpenLayers.DeviceCollection.AnalogSubsystem.DriverRunTimeErrorEvent">
            <summary>
            Occurs when the device driver detects one of the following error conditions during runtime: FifoOverflow,
            FifoUnderflow, DeviceOverClocked, TriggerError, or DeviceError. See <see cref="T:OpenLayers.DeviceCollection.OlError"/> 
            for more information.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.NumberOfRanges">
            <summary>
            Returns the number of available voltage ranges for the analog subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRange"/> property to set the range.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.SupportedVoltageRanges">
            <summary>
            Returns an array of supported voltage ranges for the analog subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRange"/> property to set the range.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.NumberOfSupportedGains">
            <summary>
            Returns the number of available gains for the analog subsystem.
            </summary>
            <remarks>To get an array of supported gain values for the subsystem, use the 
            <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.SupportedGains"/> property.
            Use the <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Gain"/> property to set 
            the gain for a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.SupportedGains">
            <summary>
            Returns an array of available gains for the analog subsystem.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.ChannelListEntry.Gain"/> property to 
            set the gain for a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRangeLow">
            <summary>
            Gets or sets the lower voltage range for the analog subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRangeHigh">
            <summary>
            Gets or sets the upper voltage range for the analog subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.Resolution">
            <summary>
            Returns the resolution of the analog subsystem.
            </summary>
            <remarks>The resolution is fixed for analog input and analog output subsystem; therefore, the Resolution property
            cannot be set for an analog input or output subsystem.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.VoltageRange">
            <summary>
            Gets or sets the current voltage range for the analog subsystem.
            </summary>
            <example> 
            This example sets the voltage range of the analog input subsystem to
            the first range in the list of supported voltage ranges.
            <code language="cs">
            ainSS.VoltageRange = ainSS.SupportedVoltageRanges[0];
            </code>
            <code language="vb">
            ainSS.VoltageRange = ainSS.SupportedVoltageRanges(0)
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.QueuedBufferDones">
            <summary>
            Returns the number of Buffer Done Events queued to be sent when 
            <see cref="P:OpenLayers.DeviceCollection.AnalogSubsystem.SynchronousBufferDone"/> is true.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogSubsystem.SynchronousBufferDone">
             <summary>
             Gets or sets the way Buffer Done events are executed (asynchronously or synchronously). 
             If False, each Buffer Done event is executed asynchronously in its own thread.
             If True, all Buffer Done events are executed synchronously from a single worker thread.
             </summary>
             <remarks>
             If your program is running under a heavy CPU load and this property is False, .NET may call your Buffer Done
             delegates out of order under certain circumstances. To avoid this problem, it is recommended that you
             set this property to True.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.#ctor(OpenLayers.DeviceCollection.Device,System.Int32)">
            <summary>
            Returns an AnalogInputSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.DeviceCollection.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.DeviceCollection.Device.AnalogInputSubsystem(System.Int32)"/> method rather than this constructor
            to return an analog input subsystem. 
            </remarks>
            <param name="devCollection">The Open Layers <see cref="T:OpenLayers.DeviceCollection.Device"/> object with which to associate the analog input subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Element"/> number of the analog input subsystem.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose pattern for this subsystem.
            </summary>
            <param name="disposing">true if called externally; false if called by Finalize</param>
            <remarks>Overrides must call through to this base class.</remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.ToString">
            <summary>
            Returns a description of the analog input subsystem and element.
            </summary>
            <returns>A string that describes the analog input subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.AutoCalibrate">
             <summary>
             Calibrates the subsystem through software, performing an auto-zero function.
             </summary>
             <remarks>
             To determine if the specified subsystem supports this capability, use the
             <see cref="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsAutoCalibrate"/> property. If this property 
             returns a value of True, the subsystem can be calibrated through software.
             Ensure that the subsystem is not running when you call this method, or an error is returned.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.Start">
            <summary>
            Starts a continuous operation on the analog input subsystem.
            </summary>
            <remarks>
            This method overrides the Start method in the base class.
            </remarks>	 
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.Stop">
            <summary>
            Stops a continuous operation on the analog input subsystem after the 
            current buffer has been filled.
            </summary>
            <remarks>
            This method overrides the Stop method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.Abort">
            <summary>
            Stops a continuous operation on the subsystem immediately without waiting
            for the current buffer to be filled.
            </summary>
            <remarks>
            This method overrides the Abort method in the base class.
            </remarks>		
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.GetSingleValueAsVolts(System.Int32,System.Double)">
            <summary>
            Acquires a single value from an analog input channel and returns the data in voltage. 
            </summary>
            <param name="physicalChannel">The physical analog input channel to sample.</param>
            <param name="gain">The gain to apply to the input signal.</param>
            <returns>The acquired value in voltage.</returns>
            <example> 
            This example shows a typical use of GetSingleValueAsVolts.
            <code lang="C#">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Get an AnalogInputSubsystem object for element 0.
            AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
            // Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            ainSS.Config ();
            // Acquire a value from analog input channel 0 using a gain of 1, and
            // return the data in voltage.	
            double valueInVolts = ainSS.GetSingleValueAsVolts (0,1.0);
            </code>
            <code lang="VB">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog input subsystem 
            ainSS = device.AnalogInputSubsystem(0)
            ' Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            ainSS.Config()
            ' Acquire a value from analog input channel 0 using a gain of 1, and
            ' return the data in voltage.	
            Dim voltageValue As Double = ainSS.GetSingleValueAsVolts(0, 1)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.GetSingleValueAsSensor(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Acquires a single value from an analog input channel and returns it in the 
            engineering units of the specified sensor. 
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <param name="gain">Gain to apply to the input signal to get the prescaled voltage value. </param>
            <param name="sensorGain">Sensor gain value to apply to the prescaled voltage value.
            The default value is 1.</param>
            <param name="sensorOffset">Sensor offset value to apply to the prescaled voltage value.
            The default value is 0.</param>
            <returns>The scaled value in the engineering units of the sensor.</returns>
            <remarks>
            The sensor gain and offset are used to scale a sample from raw counts to a sensor format. 
            The scaling occurs in two steps.
            First, the raw count value is acquired and converted to prescaled voltage using 
            the gain applied to the channel.
            Then, the sensor gain and sensor offset parameters are applied to the prescaled voltage
            value using the linear equation y = mx + b,
            where y is the sensor value, m is the sensor gain, x is the prescaled value in voltage,
            and b is the sensor offset.
            </remarks>      	
            <example> 
            This example shows a typical use of GetSingleValueAsSensor.
            <code lang="C#">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Get an AnalogInputSubsystem object for element 0.
            AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
            // Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            ainSS.Config ();
            // Acquire a single value from analog input channel 0, apply a gain of 1
            // to the input, and return the data in the engineering units of the 
            // sensor using a sensor gain of 100 and an offset of 2. 	
            double sensorValue = ainSS.GetSingleValueAsSensor (0,1.0,100,2);
            </code>
            <code lang="VB">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog input subsystem 
            ainSS = device.AnalogInputSubsystem(0)
            ' Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            ainSS.Config()
            ' Acquire a single value from analog input channel 0, apply a gain of 1
            ' to the input, and return the data in the engineering units of the 
            ' sensor using a sensor gain of 100 and an offset of 2. 	
            Dim sensorValue As Double = ainSS.GetSingleValueAsSensor(0, 1.0, 100, 2)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.GetSingleValueAsRaw(System.Int32,System.Double)">
            <summary>
            Acquires a single value from an analog input channel and returns it in raw counts.
            </summary>
            <param name="physicalChannel">Physical analog input channel to sample.</param>
            <param name="gain">Gain to apply to the input signal.</param>
            <returns>The analog input value in raw counts.</returns>
            <example> 
            This example shows a typical use of GetSingleValueAsRaw.
            <code lang="C#">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Get an AnalogInputSubsystem object for element 0.
            AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
            // Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            ainSS.Config ();
            // Acquire a single value from analog input channel 0, apply a gain  
            // of 1 to the input, and return the data in raw counts.
            int rawCount = ainSS.GetSingleValueAsRaw (0,1.0);
            </code>
            <code lang="VB">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog input subsystem 
            ainSS = device.AnalogInputSubsystem(0)
            ' Set the data flow mode to SingleValue
            ainSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            ainSS.Config()
            ' Acquire a single value from analog input channel 0, apply a gain of 1 
            ' to the input, and return the data in raw counts.
            Dim rawValue As Integer = ainSS.GetSingleValueAsRaw(0, 1)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.SetDefaultConfig">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.GetOneBuffer(OpenLayers.DeviceCollection.SupportedChannelInfo,System.Int32,System.Int32)">
            <summary>
            Using continuous acquisition, acquires a buffer of data NumberOfSample long from the specified channel. This method
            uses the current clock frequency, trigger, etc., for the acquisition.  This method is synchronous and returns only
            after the requested data has been acquired or a calculated timeout value has been exceeded.
            </summary>
            <param name="ChannelInfo"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel
            from which to acquire data.</param>
            <param name="NumberOfSamples">Number of samples to acquire</param>
            <param name="TimeoutMSecs">Timeout value, in milliseconds, to wait for buffer completion.  A value of -1 means the timeout is infinite. </param>
            <returns>An <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object with the specified number of samples.</returns>
            <remarks>
            This method allocates a buffer and starts the continuous analog input operation automatically using the current configuration of the analog input
            subsystem. This method is synchronous and returns only after the requested data has been acquired or the specified timeout value, in milliseconds,
            has been exceeded. No BufferDoneEvents occur. If the buffer is not filled before the specified timeout value is exceeded, AnalogInputSubsystem.Abort is called and a
            TimeoutException is raised. If a GeneralFailureEvent or DriverRuntimeErrorEvent occurs during acquisition, an OlException with the appropriate
            error code is raised. Once the buffer is returned, you can copy the data from the buffer into an array using the OlBuffer methods.
            </remarks>
        </member>
        <member name="E:OpenLayers.DeviceCollection.AnalogInputSubsystem.PreTriggerBufferDoneEvent">
            <summary>
            Occurs when the OlBuffer object is filled with pre-trigger data (for an analog input operation only).
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsAutoCalibrate">
             <summary>
             Returns True if the subsystem supports auto-calibration; otherwise, returns False.
             </summary>
             <remarks>
             During auto-calibration, the specified subsystem performs an auto-zero function. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsACCoupling">
            <summary>
            Returns True if the subsystem supports AC coupling, where the DC offset is removed; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsDCCoupling">
            <summary>
            Returns True if the subsystem supports DC coupling, where the DC offset is included; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsIepe">
            <summary>
            Returns True if the subsystem supports IEPE (accelerometer) inputs; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsInternalExcitationCurrentSrc">
            <summary>
            Returns True if the subsystem supports an internal excitation current source; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportsExternalExcitationCurrentSrc">
            <summary>
            Returns True if the subsystem supports an external excitation current source; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogInputSubsystem.SupportedExcitationCurrentValues">
            <summary>
            Returns an array containing the available values for the internal excitation current source.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.AnalogOutputSubsystem">
            <summary>
            The AnalogOutputSubsystem class provides the properties, methods, and events for performing analog 
            output operations. 
            </summary>
            <remarks>
            Instances of this class are created using the <see cref="M:OpenLayers.DeviceCollection.Device.AnalogOutputSubsystem(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.#ctor(OpenLayers.DeviceCollection.Device,System.Int32)">
            <summary>
            Returns an AnalogOutputSubsystem object for a specified subsystem element and <see cref="T:OpenLayers.DeviceCollection.Device"/> object.
            </summary>
            <remarks>
            It is recommended that you use the <see cref="M:OpenLayers.DeviceCollection.Device.AnalogOutputSubsystem(System.Int32)"/> method rather than this constructor
            to return an analog output subsystem. 
            </remarks>
            <param name="device">The Open Layers <see cref="T:OpenLayers.DeviceCollection.Device"/> object with which to associate the analog output subsystem.</param>
            <param name="element">The <see cref="P:OpenLayers.DeviceCollection.SubsystemBase.Element"/> number of the analog output subsystem.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Dispose(System.Boolean)">
            <summary>
            Implements the Dispose pattern for this subsystem.
            </summary>
            <param name="disposing">true if called externally; false if called by Finalize</param>
            <remarks>Overrides must call through to this base class.</remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Finalize">
            <summary>
            Finalize method
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.ToString">
            <summary>
            Returns a description of the analog output subsystem and element.
            </summary>
            <returns>A string that describes the analog output subsystem and element.</returns>
            <remarks>
            This method overrides the ToString method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Start">
             <summary>
             Starts a continuous operation on the analog output subsystem.
             </summary>
             <remarks>
             This method overrides the Start method in the base class.
            </remarks>			
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Stop">
             <summary>
             Stops a continuous operation on the analog output subsystem after
             all the data in the current buffer has been output.
             </summary>
             <remarks>
             This method overrides the Stop method in the base class.
            </remarks>		
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Abort">
             <summary>
             Stops a continuous operation on the analog output subsystem immediately 
             without waiting for all the data in the current buffer to be output.
             </summary>
             <remarks>
             This method overrides the Abort method in the base class.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Mute">
            <summary>
            Attenuates the output voltage of the subsystem to 0 V over a hardware-dependent number of samples.
            </summary>
            <remarks>
            Refer to the user's manual for your device to determine if the subsystem supports the ability to mute and unmute the output, and to determine the number of samples required for the muting process.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.UnMute">
            <summary>
            If the subsystem is muted, returns the output voltage of the subsystem to its current level over a hardware-dependent number of samples.
            </summary>
            <remarks>
            Refer to the user's manual for your device to determine if the subsystem supports the ability to mute and unmute the output, 
            and to determine the number of samples required for the muting process.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValueAsVolts(System.Int32,System.Double)">
            <summary>
            Writes a single value, as a voltage, to an analog output channel.
            </summary>
            <param name="channel">The physical analog output channel to update.</param>
            <param name="inValue">The voltage value, as a double, to output.</param>
            <example> 
            This example shows a typical use of SetSingleValueAsVolts.
            <code language="cs">
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem (0);
            //Set the data flow mode to SingleValue	
            aoutSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            aoutSS.Config ();
            // Send a value of 5 V to DAC0
            aoutSS.SetSingleValueAsVolts(0, 5);
            </code>
            <code language="vb">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem(0)
            ' Set the data flow mode to SingleValue
            aoutSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            aoutSS.Config()
            ' Send a value of 5 V to DAC0
            aoutSS.SetSingleValueAsVolts(0, 5)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValueAsRaw(System.Int32,System.Int32)">
            <summary>
            Writes a single value, as a raw count, to an analog output channel.
            </summary>
            <param name="channel">The physical analog output channel to update.</param>
            <param name="inRawValue">The raw count, as an integer, to output.</param>
            <example> 
            This example shows a typical use of SetSingleValueAsRaw.
            <code language="cs"> 
            // Get the DeviceMgr and Device objects.
            DeviceMgr deviceMgr = DeviceMgr.Get();
            device = deviceMgr.GetDevice (devicename);
            // Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem (0);
            //Set the data flow mode to SingleValue	
            aoutSS.DataFlow = DataFlow.SingleValue;
            //Configure the subsystem for a single-value operation
            aoutSS.Config ();
            // Send a raw count value of 256 to DAC0
            aoutSS.SetSingleValueAsRaw(0, 256);
            </code>
            <code language="vb">
            ' Get a DeviceMgr object
            deviceMgr As DeviceMgr = DeviceMgr.Get()
            ' Allocate the device with the specified device number
            device = deviceMgr.GetDevice(deviceName)
            ' Allocate the first element of the analog output subsystem 
            aoutSS = device.AnalogOutputSubsystem(0)
            ' Set the data flow mode to SingleValue
            aoutSS.DataFlow = DataFlow.SingleValue
            ' Configure the subsystem for a single-value operation
            aoutSS.Config()
            ' Send a raw count of 256 to DAC0
            aoutSS.SetSingleValueAsRaw(0, 256)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsRaw(OpenLayers.DeviceCollection.SingleValuesInfoRaw[])">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSingleValue"/> is True), 
            outputs a single raw count on each analog output channel that is specified in the singleValuesInfo array.  
            If an analog output channel is not specified in this array, the value of the output channel will not change;
            the output channel maintains the last value that was written to it. 
            </summary>
            <param name="singleValuesInfo">An array of <see cref="T:OpenLayers.DeviceCollection.SingleValuesInfoRaw"/> structures, which specify
            the analog output channels to update and the raw count value to output on each channel.</param>
            <remarks>
            The resulting output will not be synchronized.  If synchronization is required, use <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/>
            and <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Start"/> to generate the required output.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SetSingleValuesAsVolts(OpenLayers.DeviceCollection.SingleValuesInfoVolts[])">
            <summary>
            For subsystems that support simultaneous operations (<see cref="P:OpenLayers.DeviceCollection.SubsystemBase.SupportsSingleValue"/> is True), 
            outputs a single voltage value on each analog output channel that is specified in the singleValuesInfo array.  
            If an analog output channel is not specified in this array, the value of the output channel will not change;
            the output channel maintains the last value that was written to it. 
            </summary>
            <param name="singleValuesInfo">An array of <see cref="T:OpenLayers.DeviceCollection.SingleValuesInfoVolts"/> structures, 
            which specify the analog output channels to update and the voltage value to output on each channel.</param>
            <remarks>
            The resulting output will not be synchronized.  If synchronization is required, use <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/>
            and <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Start"/> to generate the required output.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.WrapSingleBuffer">
            <summary>
            Gets and sets the wrap mode. If WrapSingleBuffer is True, the device driver continuously reuses 
            the first buffer queued to the subsystem. If WrapSingleBuffer is False, the device driver uses all 
            the buffers queued to the subsystem (this is the default mode). 
            </summary>
            <remarks>Set this property to True for waveform generation operations on the <see cref="T:OpenLayers.DeviceCollection.AnalogOutputSubsystem"/>.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SupportsWrapSingle">
            <summary>
            Returns True if the subsystem supports reusing a single buffer for continuous operations;
            otherwise, returns False.
            </summary>
            <remarks>Use the <see cref="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.WrapSingleBuffer"/> property to use
            a single buffer for the continuous operation. </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.AnalogOutputSubsystem.SupportsMute">
            <summary>
            Returns True if the subsystem supports the ability to mute and/or unmute the output voltage.  
            </summary>
            <remarks>Use the <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.Mute"/> method
            to attenuate the output voltage to 0 V. If the output voltage is muted, use the <see cref="M:OpenLayers.DeviceCollection.AnalogOutputSubsystem.UnMute"/> method
            to return the output voltage to its current level.
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.OlBuffer">
            <summary>
            The OlBuffer class encapsulates a data buffer that is used in a continuous I/O operation.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.#ctor(System.Int32,OpenLayers.DeviceCollection.AnalogSubsystem)">
             <summary>
             Creates and returns an OlBuffer object, and allocates an internal data buffer that will 
             contain a specified number of samples.
             </summary>
             <param name="inNumSamples">Maximum number of samples that the internal buffer can contain. 
             This parameter determines the size of the internal buffer. 
             </param>
             <param name="inSubsystem">The subsystem (AnalogInputSubsystem or AnalogOutputSubsystem) with 
             which the OlBuffer object is initially associated. </param>
             <remarks>
             The values for voltage range, channel list, data encoding, 
             and resolution that are applied to the OlBuffer object are determined by the 
             subsystem with which it is associated. Initially (and by default), these values are determined
             by the subsystem that is specified in the constructor above.
             <para>
             If, however, you later use the OlBuffer object with a different subsystem type, these values
             are determined by subsystem with which it is used. For example, if the OlBuffer object 
             was initially associated with an analog output subsystem, and then put on an analog input 
             subsystem queue, the values for voltage range, channel list, data encoding, and resolution 
             will be updated to reflect the settings of the analog input subsystem when the OlBuffer object
            	is completed by the device driver.
            	</para>
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.Finalize">
            <summary>
            Object Finalize method.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.Reallocate(System.Int32)">
             <summary>
             Reallocates the internal data buffer of the OlBuffer object to contain the specified number of samples.
            	The existing internal data buffer is deallocated and any data that it contained is lost.
             </summary>
             <param name="inNumSamples">Maximum number of samples that the internal data buffer can contain.
             This parameter determines the size of the internal buffer. 
             </param>
            <returns>True if allocation was successful; otherwise, returns False.</returns>
        </member>
        <member name="F:OpenLayers.DeviceCollection.OlBuffer.disposed">
            <summary>
            flag to track dispose call
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.Dispose">
            <summary>
            Deallocates the internal buffer of the OlBuffer object.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.Dispose(System.Boolean)">
            <summary>
            Deallocates the internal buffer of the OlBuffer object.  
            </summary>
            <param name="disposing">True if called externally; False if called by Finalize.</param>
            <remarks>Overrides must call through to this base class.</remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsVoltsByte(OpenLayers.DeviceCollection.ChannelListEntry,System.Int32)">
            <summary>
            For a specified ChannelListEntry, converts the data from the internal buffer of an OlBuffer object into voltage values,
            and then copies these voltage values into a user-declared array of bytes.  Each voltage value is stored as
            an Int32, and takes 4 bytes. 
            </summary>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <param name="scale">The amount by which to scale each voltage value. By default, this is 1.</param>
            <returns>An array of voltage values that is associated with a specified ChannelListEntry, 
            represented as bytes.
            </returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the buffer into voltage values,
            and then copies this data into a user-declared array of bytes. 
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is converted and copied. 
            </remarks>	
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawByte">
             <summary>
             Copies the data, as raw counts, from the internal buffer of the OlBuffer object into a user-declared array of bytes. 
             </summary>
             <returns>An array of raw counts represented as bytes.</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer into a user-declared array of bytes.
             This method is useful for file I/O operations. Since each sample takes more than one array entry, other uses may be limited.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawByte(OpenLayers.DeviceCollection.ChannelListEntry)">
             <summary>
             Copies only the data associated with a specified ChannelListEntry, as raw counts, from the internal buffer of the 
             OlBuffer object into a user-declared array of bytes. 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as bytes.</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the OlBuffer object, the data for each 
             occurrence of the ChannelListEntry is copied.
             This method is useful for file I/O operations. Since each sample takes more than one array entry, other uses may be limited.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawUInt16">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is Binary, 
             copies the data, as raw counts, from the internal data buffer of an OlBuffer object into a 
             user-declared array of unsigned, 16-bit integers (ushort).
             </summary>
             <returns>An array of raw counts represented as unsigned 16-bit integers (ushort).</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer of the OlBuffer object
             into a user-declared array of unsigned 16-bit integers (ushort).
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawInt16">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is TwosComplement, 
             copies the data, as raw counts, from the internal buffer of the OlBuffer object into a user-declared array
             of signed, 16-bit integers (short).
             </summary>
             <returns>An array of raw counts represented as signed 16-bit integers (short).</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer of an OlBuffer object
             into a user-declared array of signed 16-bit integers (short).
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawUInt32">
             <summary>
             Used when the resolution of the subsystem is greater than 16 bits, 
             copies the data, as raw counts, from the internal buffer of an OlBuffer object into
             a user-declared array of unsigned, 32-bit integers (uint).
             </summary>
             <returns>An array of raw counts represented as unsigned 32-bit integers (uint).</returns>
             <remarks>
             This method copies all the data, as raw counts, from the internal buffer of an OlBuffer
             object into a user-declared array of unsigned 32-bit integers (uint).
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawUInt32(OpenLayers.DeviceCollection.ChannelListEntry)">
             <summary>
             Used when the resolution of the subsystem is greater than 16-bits, copies only the data associated 
             with a specified ChannelListEntry, as raw counts, from the internal buffer of an OlBuffer object 
             into a user-declared array of unsigned 32-bit integers (uint). 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as unsigned 32-bit integers (uint).</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the buffer, the data for each 
             occurrence of the ChannelListEntry is copied.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawUInt16(OpenLayers.DeviceCollection.ChannelListEntry)">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is Binary, 
             copies only the data associated with a specified ChannelListEntry, as raw counts, from the
             internal buffer of an OlBuffer object into a user-declared array of unsigned 16-bit integers (ushort). 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as unsigned 16-bit integers (ushort).</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the buffer, the data for each 
             occurrence of the ChannelListEntry is copied.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRawInt16(OpenLayers.DeviceCollection.ChannelListEntry)">
             <summary>
             Used when the resolution of the subsystem is 16 bits or less and when the data encoding is TwosComplement, 
             copies only the data associated with a specified ChannelListEntry, as raw counts, from the internal buffer 
             of an OlBuffer object into a user-declared array of signed 16-bit integers (short). 
             </summary>
             <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
             <returns>An array of raw counts that are associated with a specified ChannelListEntry, represented as signed 16-bit integers (short).</returns>
             <remarks>
             Note that if the ChannelListEntry occurs more than once in the buffer, the data for each 
             occurrence of the ChannelListEntry is copied.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.PutDataAsRaw(System.UInt16[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is 16 bits or less, copies all the data, as raw counts, 
             from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="data">The user-specified array of raw counts to copy, represented as unsigned 16-bit integers (ushort).</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.PutDataAsRaw(System.UInt32[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is greater than 16 bits, copies all the data, 
             as raw counts, from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="data">The user-specified array of raw counts to copy, represented as unsigned 32-bit integers (uint).</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.PutDataAsRaw(OpenLayers.DeviceCollection.ChannelListEntry,System.UInt16[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is 16 bits or less, copies only the raw count values for a specified 
             ChannelListEntry from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="data">The user-specified array containing the channel data, in raw counts, to copy.
             This data is represented as unsigned 16-bit integers (ushort).</param>
             <remarks>
             <para>
             Note that if the ChannelListEntry occurs more than once in the array, the data for each occurrence 
             of the ChannelListEntry is copied. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.PutDataAsRaw(OpenLayers.DeviceCollection.ChannelListEntry,System.UInt32[])">
            <summary>
             Copies raw counts from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             Used when the resolution of the subsystem is greater than 16 bits, copies only the raw count values for a specified 
             ChannelListEntry from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="data">The user-specified array containing the channel data, in raw counts, to copy.
             This data is represented as unsigned 32-bit integers (uint).</param>
             <remarks>
             <para>
             Note that if the ChannelListEntry occurs more than once in the array, the data for each occurrence of the ChannelListEntry is copied. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.PutDataAsVolts(System.Double[])">
            <summary>
             Copies voltages from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             This method copies all the voltage values from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="data">The user-specified array containing the voltage values to copy. The data is represented as 64-bit floating-point values (double).</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.PutDataAsVolts(OpenLayers.DeviceCollection.ChannelListEntry,System.Double[])">
            <summary>
             Copies voltages from a user-specified array into the internal buffer of an OlBuffer object. 
            </summary>
            <remarks>
             This method copies only the voltage values for a specified 
             ChannelListEntry from a user-specified array into the internal buffer of an OlBuffer object. 
            </remarks>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="data">The user-specified array containing the channel data, in voltage, to copy.
             This data is represented as 64-bit floating-point values (double).</param>
             <remarks>
             <para>
             Note that if the ChannelListEntry occurs more than once in the array, the data for each occurrence of the ChannelListEntry is copied. 
            </para>
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsSensor(OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
            This method converts only the data for a specified ChannelListEntry in the internal buffer of an
            OlBuffer object into sensor values (using the <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorGain"/>
            and <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorOffset"/>), and then copies these sensor values
            into a user-declared array of 64-bit floating-point values (double). 
            </summary>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/>, which represents the channel whose data you want to copy.</param>
            <returns>A user-declared array of sensor values associated with all the samples for a given ChannelListEntry, represented as 64-bit floating-point values (double).</returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the internal buffer of 
            an OlBuffer object into sensor values, then copies this data into a user-declared array of 64-bit floating-point values (double). 
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is copied. 
            </remarks>	
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsSensor(OpenLayers.DeviceCollection.ChannelListEntry,System.Int32,System.Int32)">
            <summary>
            This method converts a range of samples for each occurrence of ChannelListEntry in the
            internal buffer of an OlBuffer object into sensor values (using the
            <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorGain"/> and 
            <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorOffset"/>),
            and then copies these sensor values into a user-declared array of 64-bit floating-point values (double).
            It allocates and returns an array size equal to the number of valid samples.  
            The samples that are outside of the requested range are 0.0.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="startSample">The first sample in the OlBuffer object that you want to convert and copy;
            this number is zero-based.</param>
            <param name="endSample">The last sample in the range that you want to convert and copy; 
            this number is inclusive.</param>
            <returns>A user-declared array of sensor values associated with a range of samples 
            for a given ChannelListEntry, represented as 64-bit floating-point values (double).</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsSensor">
             <summary>
             Converts the data from the internal buffer of an OlBuffer object into sensor values (using the 
             <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorGain"/> and 
             <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorOffset"/>),
             and then copies these sensor values into a user-declared array of 64-bit floating-point values (double).
             </summary>
             <returns>A user-specified array of sensor values, represented as 64-bit floating-point values (double).
             </returns>
             <remarks>
             This method copies all the samples from the buffer into a user-declared array of 64-bit floating-point values (double). 
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsVolts(OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
            For a specific channel, converts the data from the internal buffer of an OlBuffer object into voltage values,
            and then copies these voltage values into a user-declared array of 64-bit floating-point values (double).
            </summary>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel
            whose data you want to copy.</param>
            <returns>An array of voltages that are associated with a specified ChannelListEntry, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            This method converts only the data associated with a specified ChannelListEntry in the buffer into voltage values, and then
            copies this data into a user-declared array of 64-bit floating-point values (double). 
            Note that if the ChannelListEntry occurs more than once in the buffer, the data for each occurrence 
            of the ChannelListEntry is copied. 
            </remarks>	
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsVolts(OpenLayers.DeviceCollection.ChannelListEntry,System.Int32,System.Int32)">
            <summary>
            Converts a range of samples for a specified channel in the internal buffer of an OlBuffer object
            into voltage values, and then copies these voltage values into a user-specified array.
            This method converts and copies one sample for each occurrence of channelNum in the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/>.
            This version of the method allocates and returns an array size equal to the number of valid samples.  
            The samples that are outside of the requested range are 0.0.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel whose data you want to copy.</param>
            <param name="startSample">The first sample in the internal buffer of the OlBuffer object that you want to convert and copy;
            this number is zero-based.</param>
            <param name="endSample">The last sample in the range that you want to convert and copy; 
            this number is inclusive.</param>
            <returns>A user-specified array of voltage values, which represent a range of samples 
            for a given channel.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsVolts">
            <summary>
            Converts the data from the internal buffer of an OlBuffer object into voltage values,
            and then copies these voltage values into a user-declared array of 64-bit floating-point values (double).
            </summary>
            <returns>Returns a user-specified array of voltage values, represented as 64-bit floating-point values (double).
            </returns>
            <remarks>
            This method copies all the data, as voltages, from the internal buffer of an OlBuffer object
            into a user-declared array of 64-bit floating-point values (double).
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.SampleAt(System.Int32)">
            <summary>
            Returns the raw count value at the specified index of the internal buffer that is 
            encapsulated by the OlBuffer object. 
            </summary>
            <param name="index">The zero-based index number of the internal buffer.</param>
            <returns>The raw count value. This value is represented as a signed, 32-bit integer (int).</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.GetDataAsRpm(OpenLayers.DeviceCollection.ChannelListEntry,System.Int32)">
            <summary>
            For a specified ChannelListEntry, converts the tachometer data from the internal buffer of an OlBuffer object into RPM values,
            and then copies these values into a user-declared array of 64-bit floating-point (double) values.
            </summary>
            <param name="channel"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object, which represents the channel
            whose data you want to convert and copy.</param>
            <param name="pulsesPerRevolution">Specifies the number of pulses per revolution for the tachometer.</param>
            <returns>An array of RPM values, represented as 64-bit floating-point (double) values, that are 
            associated with a specified ChannelListEntry.
            </returns>
            <remarks>
            This method raises an exception if the <see cref="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SubsystemType"/> is not a tachometer.
            </remarks>	
        </member>
        <member name="M:OpenLayers.DeviceCollection.OlBuffer.SetDevBufferCompleteFlag(System.Int32,System.Boolean)">
            <summary>
            SetDevBufferCompleteFlag is used to set the complete flag for the corresponding devIndex.
            </summary>
            <param name="devIndex"> The index of the device.</param>
            <param name="state"> The state to set the device buffer complete flag to.</param>
            <returns>The collection buffer complete status.</returns>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.Item(System.Int32)">
            <summary>
            Returns the data, as a raw count, at the specified index in the internal buffer of
            the OlBuffer object.
            </summary>
            <returns>The raw count, represented as a signed, 32-bit integer (int).</returns>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.SampleSizeInBytes">
            <summary>
            Returns the size, in bytes, of the samples in the internal buffer of the OlBuffer object.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.ValidSamples">
             <summary>
             Returns the number of valid samples in the internal buffer of the OlBuffer object.
             </summary>
             <remarks>
             For analog input operations, the ValidSamples property is set to the number of samples in the completed buffer under normal circumstances.
             However, in some cases, like if <see cref="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.Abort"/> is 
             called in the middle of an operation, ValidSamples reflects the number
             of samples in the buffer when Abort was called. In addition, if Abort or
             <see cref="M:OpenLayers.DeviceCollection.AnalogInputSubsystem.Stop"/> is called, any OlBuffer objects 
             whose state is Inprocess will have a ValidSamples of 0.
             <para>
             For analog output operations, ValidSamples is always equal to the maximum number of samples
             that the buffer was allocated to hold. 
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.InternalValidSamples">
            <summary>
            This is the same property as ValidSamples except that we use it internally as R/W
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.BufferSizeInBytes">
            <summary>
            Returns the size of the internal data buffer, in bytes.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.BufferSizeInSamples">
            <summary>
            Returns the size of the internal data buffer, in samples.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.State">
            <summary>
            Returns the current state (Idle, Queued, InProcess, Completed, or Released) 
            of the OlBuffer object.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.InternalState">
            <summary>
            This property is the same as State except that we use it internally as R/W
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.RawDataFormat">
            <summary>
            Returns the format of the raw data (Int16, Uint16, Int32, Float, or Double).
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.Tag">
            <summary>
            Gets or sets a user-defined value.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.Encoding">
            <summary>
            Returns the data encoding of the raw data (Binary or TwosComplement).
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.VoltageRange">
            <summary>
            Returns the upper and lower limits of the voltage range for the associated subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.Resolution">
            <summary>
            Returns the resolution of the associated subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.OlBuffer.ChannelListOffset">
            <summary>
            Returns the index into the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> that corresponds to the 
            first sample in the internal buffer of the OlBuffer object. 
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.OlBuffer.BufferState">
            <summary>
            Contains the possible values for the state of an <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object.
            </summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.OlBuffer.BufferState.Idle">
            <summary>The OlBuffer object has been created, but has not been queued to a subsystem.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.OlBuffer.BufferState.Queued">
            <summary>The OlBuffer object has been queued to a subsystem.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.OlBuffer.BufferState.InProcess">
            <summary>The OlBuffer object has been sent to the device driver for processing.
            A maximum of eight OlBuffer objects can be in process at one time.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.OlBuffer.BufferState.Completed">
            <summary>For an input operation, the internal buffer of the OlBuffer object has been filled 
            with data, and has not been put back on the queue for the subsystem.
            For an output operation, all the data in the internal buffer of the OlBuffer object has 
            been output, and the OlBuffer object has not been put back on the queue for the subsystem.</summary>
        </member>
        <member name="F:OpenLayers.DeviceCollection.OlBuffer.BufferState.Released">
            <summary>The internal buffer of the OlBuffer object has been deallocated.</summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.BufferQueue">
            <summary>
            The BufferQueue class provides an interface for queuing <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> 
            objects to a device's subsystem for continuous I/O operations.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.BufferQueue.QueueBuffer(OpenLayers.DeviceCollection.OlBuffer)">
             <summary>
             Adds an <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object to the subsystem queue. 
              </summary>
             <remarks>
             If the subsystem is incompatible with the specified <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object,
             an exception is raised.
             </remarks>
            
             <param name="inBuffer">The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object to add to the subsystem queue.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.BufferQueue.DequeueBuffer">
            <summary>
            Removes the <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object from the front of the subsystem queue, and returns it to the user.
            </summary>
            <returns>The <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> object from the front of the queue.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.BufferQueue.FreeAllQueuedBuffers">
            <summary>
            Removes all <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects from the subsystem queue and deallocates the associated internal buffer.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.BufferQueue.QueuedCount">
            <summary>
            Returns the number of <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects that are on the subsystem 
            queue (OlBuffer objects are in the queued state).
            </summary>
            <remarks>
            When you start a continuous operation, the device takes up to eight OlBuffer objects from the 
            subsystem queue and begins filling the associated internal buffers (for input operations) or
            outputting data from the associated internal buffers (for output operations) at the 
            specified clock rate. 
            The state of these OlBuffer objects changes from queued to inprocess. 
            Every time an OlBuffer object transitions from the queued state to the inprocess state, the 
            value of the QueuedCount property decreases by one and the value of the InProcessCount property 
            increases by 1.
            For example, assume that you call QueueBuffer for 10 OlBuffer objects; the QueuedCount is now 10 and 
            the InProcessCount is 0. Once you call Start, up to 8 OlBuffer objects are moved from the queued 
            state to the inprocess state. 
            The QueuedCount is now 2 and the InProcessCount is now 8. 
            As each OlBuffer object is completed, an event is generated allowing you to process the buffer.
            Assume that you do not put the OlBuffer objects back on the queue after processing them. 
            In this case, the QueuedCount decreases while the InProcessCount remains the same (as a new 
            inprocess OlBuffer object replaces a completed OlBuffer object) until
            the QueuedCount gets to 0, then the InProcessCount starts decreasing until all the OlBuffer objects
            are completed.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.BufferQueue.InProcessCount">
            <summary>
            Returns the number of <see cref="T:OpenLayers.DeviceCollection.OlBuffer"/> objects that have been taken 
            from subsystem queue and sent to the device for processing (buffers are in the inprocess state). 
            </summary>
            <remarks>
            When you start a continuous operation, the device takes up to eight OlBuffer objects from the 
            subsystem queue and begins filling the associated internal buffers (for input operations) or 
            outputting data from the associated internal buffers for output operations) at the specified 
            clock rate. The state of these OlBuffer objects changes from queued to inprocess. 
            Every time an OlBuffer object transitions from the queued state to the inprocess state, the value
            of the QueuedCount property decreases by one and the value of the InProcessCount property
            increases by 1. For example, assume that you call QueueBuffer for 10 OlBuffer objects;
            the QueuedCount is now 10 and the InProcessCount is 0. Once you call Start, up to 8 OlBuffer objects
            are moved from the queued state to the inprocess state. 
            The QueuedCount is now 2 and the InProcessCount is now 8. 
            As each OlBuffer object is completed, an event is generated allowing you to process the buffer.
            Assume that you do not put the OlBuffer objects back on the queue after processing them.
            In this case, the QueuedCount decreases while the 
            InProcessCount remains the same (as a new inprocess OlBuffer object replaces a completed OlBuffer object)
            until the QueuedCount gets to 0, then the InProcessCount starts decreasing until all the OlBuffer
            objects are completed.
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ChannelList">
             <summary>
             A ChannelList specifies a collection of <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> 
             objects for use in a continuous I/O operation.
             Each ChannelListEntry object encapsulates a physical channel connection for a specific subsystem.
             </summary>
             <remarks>A ChannelList is typically used in continuous analog input and analog output operations. You can
             add and/or insert a channel to the ChannelList by physical channel number, by name, or as a ChannelListEntry object. </remarks>
             <example> 
             The following example demonstrates how to add and insert channels in the ChannelList, and set the gain for a channel.
             
             <code language="cs"> 
             // Get a DeviceMgr object and Device object.
             DeviceMgr deviceMgr = DeviceMgr.Get();
             device = deviceMgr.GetDevice (devicename);
             // Get an AnalogInputSubsystem object.
             AnalogInputSubsystem ainSS = device.AnalogInputSubsystem (0);
             // Create a ChannelListEntry object for analog input channel 0.
             ChannelListEntry ch0 = new ChannelListEntry ( ainSS.SupportedChannels.GetChannelInfo (SubsystemType.AnalogInput, 0 ) );
             // Add the ChannelListEntry object ch0 to the ChannelList.
             ainSS.ChannelList.Add (ch0);
            
             // Insert analog input channel 1 as a physical channel into the first position (index 0) of the channel list.
             // This will push ChannelListEntry object ch0 to the 2nd position (index 1) of the channel list. 
             ainSS.ChannelList.Insert (0, 1);
             
             // For the ChannelListEntry at index 0 (which is analog input channel 1), change the gain to 2 using the Item property.
             ainSS.ChannelList[0].Gain = 2;
             </code>
             <code language="vb">
             ' Get a DeviceMgr object
             deviceMgr As DeviceMgr = DeviceMgr.Get()
             ' Allocate the device with the specified device number
             device = deviceMgr.GetDevice(deviceName)
            	' Allocate the first element of the analog input subsystem 
             ainSS = device.AnalogInputSubsystem(0)
             ' Create a ChannelListEntry object for analog input channel 0.
             Dim ch0 As New ChannelListEntry(ainSS.SupportedChannels.GetChannelInfo(SubsystemType.AnalogInput, 0))
             ' Add the ChannelListEntry object ch0 to the ChannelList.
             ainSS.ChannelList.Add(ch0)
             
             ' Insert analog input channel 1 as a physical channel into the first position (index 0) of the channel list.
             ' This will push ChannelListEntry object ch0 to the 2nd position (index 1) of the channel list. 
             ainSS.ChannelList.Insert(0, 1)
            
             ' For the ChannelListEntry at index 0 (which is analog input channel 1), change the gain to 2 using the Item property.
             ainSS.ChannelList(0).Gain = 2
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Add(System.Int32)">
            <summary>
             Adds a channel to the end of the ChannelList.
             </summary>
             <param name="physicalChannelNumber">
             The number of the physical channel on the specified subsystem to add to the ChannelList.
            </param>
             <returns>A <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> 
             object for the physical channel that was added. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <remarks>
             Adds a channel, specified as a physical channel number, to the end of the ChannelList
             and returns a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the channel.
             <para>
             This method provides a simple way to add channels into the ChannelList, 
             particularly if you are adding channels that are native to the subsystem type
             (such as analog input channels on an analog input subsystem). For native channels,
             the physical channel number always equals the logical channel number. While non-native
             channels, such as digital inputs that are streamed through the analog input subsystem, 
             can also be added this way, the physical channel number is not the same as the logical
             channel number, so you may find it easier to add a channel by name or by 
             <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object instead.
            </para>
            </remarks>
             <example> 
             This example demonstrates how to add a analog input channel 0 by physical
             channel number to the ChannelList.
             <code language="cs">
             ch = ainSS.ChannelList.Add (0);
            </code>
             <code language="vb">
             ch = ainSS.ChannelList.Add(0)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Insert(System.Int32,System.Int32)">
            <summary>
             Inserts a channel at the specified index of the ChannelList.
            </summary>
             <param name="index">Zero-based index of the ChannelList at which to insert the 
             <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object.</param>
             <param name="physicalChannelNumber">The physical channel number of the 
             specified subsystem to add to the ChannelList.</param>
             <returns>A <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the physical channel that was inserted. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <remarks>
             Inserts a channel, specified as a physical channel number, at the specified index
             of the ChannelList and returns a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the channel.
             <para>
             This method provides a simple way to insert channels into the ChannelList, 
             particularly if you are inserting channels that are native to the subsystem type
             (such as analog input channels on an analog input subsystem). For native channels,
             the physical channel number always equals the logical channel number. While non-native
             channels, such as digital inputs that are streamed through the analog input subsystem, 
             can also be inserted this way, the physical channel number is not the same as the logical
             channel number, so you may find it easier to insert a channel by name or by 
             <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object instead.
            </para>
            </remarks>
             <example> 
             This example demonstrates how to insert analog input channel 3 (by physical
             channel number) at index 0 of the ChannelList.
             <code language="cs"> 
             ch = ainSS.ChannelList.Insert (0, 3);
            </code>
            <code language="vb">
             ch = ainSS.ChannelList.Insert(0,3)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Add(OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
             Adds a channel to the end of the ChannelList.
             </summary>
             <remarks>
             Adds the specified <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object to the end of the ChannelList.
             </remarks>
             <param name="value"><see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object to add to the ChannelList.</param>
             <returns>The index at which the ChannelListEntry object has been added to the
             ChannelList.</returns>
             <example> 
             This example demonstrates how to add a ChannelListEntry to the 
             ChannelList.
             <code language="cs"> 
             // Create a ChannelListEntry object for analog input channel 2
             // of the AnalogInputSubsystem (ainSS).
             ChannelListEntry ch2 = new ChannelListEntry ( ainSS.SupportedChannels.GetChannelInfo (SubsystemType.AnalogInput, 2 ) );
             // Add the ChannelListEntry object ch2 to the ChannelList.
             ainSS.ChannelList.Add (ch2);
            </code>
             <code language="vb">
             ' Create a ChannelListEntry object for analog input channel 2
             ' of the AnalogInputSubsystem (ainSS).
             Dim ch2 As New ChannelListEntry(ainSS.SupportedChannels.GetChannelInfo(SubsystemType.AnalogInput, 2))
             ' Add the ChannelListEntry object ch2 to the ChannelList.
             ainSS.ChannelList.Add(ch2)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Insert(System.Int32,OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
             Inserts a channel at the specified index of the ChannelList.
            </summary>
             <remarks>
             Inserts a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object at the specified index of the ChannelList.
             </remarks>
             <param name="index">Zero-based index at which to insert the <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object.</param>
             <param name="value">The <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object to insert.</param>
             <example> 
             This example inserts ChannelListEntry ch3 at index 1 of the ChannelList for an
             AnalogInputSubsystem (ainSS).
             <code language="cs">
             // Create a ChannelListEntry object for analog input channel 3
             // of the AnalogInputSubsystem (ainSS).
             ChannelListEntry ch3 = new ChannelListEntry ( ainSS.SupportedChannels.GetChannelInfo (SubsystemType.AnalogInput, 3 ) );
             // Insert the ChannelListEntry object ch3 at index 1 of the ChannelList.
             ainSS.ChannelList.Insert (1, ch3);
            </code>
             <code language="vb">
             ' Create a ChannelListEntry object for analog input channel 3
             ' of the AnalogInputSubsystem (ainSS).
             Dim ch3 As New ChannelListEntry(ainSS.SupportedChannels.GetChannelInfo(SubsystemType.AnalogInput, 3))
             ' Insert the ChannelListEntry object ch3 at index 1 of the ChannelList.
             ainSS.ChannelList.Insert(1, ch3)
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Add(System.String)">
            <summary>
             Adds a channel to the end of the ChannelList.
             </summary>
             <remarks>
             Adds a channel, specified by name, to the end of the ChannelList
             and returns a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the channel.
             </remarks>
             <param name="physicalChannelName">
             The name of the channel to add to the ChannelList. The channel name must match a channel
             name contained in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannels"/> object for the specified subsystem.
            </param>
             <returns>A <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the physical channel that was added. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <example> 
             This example demonstrates how to add a channel by name to the ChannelList.
             <code language="cs"> 
             //Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels[1].Name = " Sensor";
             //Add the channel named Sensor to the ChannelList.
             ch = ainSS.ChannelList.Add("Sensor");
             </code>
             <code language="vb">
             'Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels(1).Name = "Sensor"
             'Add the channel named Sensor to the ChannelList.
             ch = AinSS.ChannelList.Add("Sensor")
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Insert(System.Int32,System.String)">
            <summary>
             Inserts a channel at the specified index of the ChannelList.
            </summary>
             <remarks>
             Inserts a channel, specified by name, at the specified index
             of the ChannelList and returns a <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the channel.
             </remarks>
             <param name="index">Zero-based index of the ChannelList at which to insert the 
             <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object.</param>
             <param name="physicalChannelName">The name of a channel on the specified subsystem to add to the ChannelList.
             The channel name must match the name of a channel contained in the 
             <see cref="T:OpenLayers.DeviceCollection.SupportedChannels"/> object for the specified subsystem type.</param>
             <returns>A <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object for the physical channel that was inserted. You can
             then access this ChannelListEntry object through the ChannelList for the subsystem.
             </returns>
             <example> 
             This example inserts the analog input channel with the name Sensor at index 2
             of the ChannelList and returns a ChannelListEntry object (ch).
             <code language="cs"> 
             //Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels[1].Name = " Sensor";
             //Insert the channel named Sensor at index 2 of the ChannelList.
             ch = ainSS.ChannelList.Insert(2, "Sensor");
             </code>
             /// <code language="vb">
             'Define the name Sensor for analog input channel 1 of the AnalogInputSubsystem (ainSS).
             ainSS.SupportedChannels(1).Name = "Sensor"
             'Insert the channel named Sensor at index 2 of the ChannelList.
             ch = AinSS.ChannelList.Insert(2, "Sensor")
            	</code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.IndexOf(OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
             Searches for the specified channel and returns the zero-based index of the first occurrence of the channel within the ChannelList.
            </summary>
             <remarks>
             Searches for the specified <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object and returns the zero-based index of the 
             first occurrence of the ChannelListEntry object within the ChannelList.
             </remarks>
             <param name="value">The <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object to locate.</param>
             <returns>
             If found, returns the zero-based index of the first occurrence of the <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> 
             object within the ChannelList; otherwise, returns -1.
             </returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.IndexOf(System.Int32)">
            <summary>
             Searches for the specified channel and returns the zero-based index of the first occurrence of the channel within the ChannelList.
            </summary>
             <remarks>
             Searches for the specified physical channel number and returns 
             the zero-based index of the first occurrence of the physical channel
             number within the ChannelList.
             </remarks>
             <param name="physicalChannelNumber">The number of the physical channel for the associated subsystem to locate.</param>
             <returns>
             If found, returns the zero-based index of the first occurrence of the 
             phyiscal channel number within the ChannelList; otherwise, returns -1.
             </returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Remove(OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
            Removes the first occurrence of the specified <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object from the ChannelList.
            </summary>
            <param name="value">The <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object to remove from the ChannelList.</param>
            <example> 
            This example removes the first instance of ChannelListEntry object Ch0
            from the ChannelList object.
            <code language="cs">
            AinSS.ChannelList.Remove(Ch0);
            </code>
            <code language="vb">
            AinSS.ChannelList.Remove(Ch0)
            </code>
            </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.OnClear">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.OnRemove(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelList.Contains(OpenLayers.DeviceCollection.ChannelListEntry)">
            <summary>
            Returns True if the ChannelList contains a specific <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> 
            object; otherwise, returns False.
            </summary>
            <param name="value">The <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object to locate in the ChannelList.</param>
            <returns>Returns True if the ChannelList contains the <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object; 
            otherwise, returns False.</returns>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelList.Item(System.Int32)">
            <summary>
            Returns or replaces the <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> object at the specified index of the ChannelList.
            </summary>
            <remarks>Index must be less than ChannelList.Count.</remarks>
            <example> 
            This example replaces the ChannelListEntry at index 1 of the ChannelList
            with ChannelListEntry Ch3.
            <code language="cs">
            AinSS.ChannelList[1] = Ch3;
            </code>
            <code language="vb">
            AinSS.ChannelList(1) = Ch3
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelList.CGLDepth">
            <summary>
            Returns the maximum number of channels or <see cref="T:OpenLayers.DeviceCollection.ChannelListEntry"/> objects that the ChannelList can contain.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SupportedChannels">
             <summary>
             The SupportedChannels class describes, through a collection of <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> objects, the
             channels available for a particular subsystem.
             </summary>
             <remarks>
             It is often the case that a subsystem of one type is capable of including data in its
             data stream from a different subsystem type. For example, an analog input subsystem,
             which has its own native analog input channels, may also stream data from non-native 
             channels, such as a digital input port or counter/timer channel. Typically, these 
             non-native channels are described in a channel list with numbers beyond the range 
             of its native channels. The Open Layers for .NET Class Library allows you to deal 
             with non-native channels more easily by describing channels in terms of 
             subsystem type and logical channel numbers or channel names.
             </remarks>
             <example>
             <code>
            		// rename channel 0
            		ainSS.SupportedChannels[0].Name = "Pressure Sensor";
            
            		// add all available channels to the channel select list
            		int numChannels = ainSS.SupportedChannels.Count;
            		for (int i=0; i != numChannels-1; ++i)
            		{
            			// get the channel using the physical channel number
            			SupportedChannelInfo curChannel = ainSS.SupportedChannels[i];
            			lbAin.Items.Add (curChannel.Name);
            		}
             </code>
             </example>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SupportedChannels.GetChannelInfo(OpenLayers.DeviceCollection.SubsystemType,System.Int32)">
            <summary>
            Returns a SupportedChannelInfo object for the specified subsystem type
            and logical channel number.
            </summary>
            <remarks>
            If the channel has multiple logical channel words, this method returns
            the SupportedChannelInfo object for logical channel word 0.
            </remarks> 
            <param name="ssType">Subsystem type.</param>
            <param name="subsystemChannel">Logical channel number for the subsystem type.</param>
            <returns>SupportedChannelInfo object associated with the specified channel.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SupportedChannels.GetChannelInfo(System.String)">
            <summary>
            Returns the SupportedChannelInfo object for the specified channel name.
            </summary>
            <remarks>
            If the channel has multiple logical channel words, this method returns
            the SupportedChannelInfo object for logical channel word 0.
            </remarks> 
            <param name="name">Channel name</param>
            <returns>SupportedChannelInfo object associated with the specified channel.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SupportedChannels.GetChannelInfo(OpenLayers.DeviceCollection.SubsystemType,System.Int32,System.Int32)">
            <summary>
            Returns the SupportedChannelInfo object for the specified subsystem type,
            logical channel, and logical channel word.
            </summary>
            <remarks>
            For channels like 32-bit counter/timers that return multi-word data,
            the logical channel word, which is zero-based, maps the physical channel
            to the data word that it returns. For example, a logical channel word of 0
            indicates that this channel returns the first 16-bits of data. A logical 
            channel word of 1 indicates that this channel returns the second 16-bits 
            of data. For channels that do not return multi-word data, the value of 
            the logical channel word is -1. 
            </remarks> 
            <param name="ssType">Subsystem type.</param>
            <param name="subsystemChannel">Logical channel number for the subsystem type.</param>
            <param name="channelWord">Logical channel word for the specified logical channel number.</param>
            <returns>SupportedChannelInfo object associated with the logical channel word.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SupportedChannels.GetChannelInfo(System.Int32)">
            <summary>
            Returns the SupportedChannelInfo object for the specified physical channel number.
            </summary>
            <remarks>
            If the channel has multiple logical channel words, this method returns
            the SupportedChannelInfo object for logical channel word 0.
            </remarks> 
            <param name="physicalChannel">Physical channel number of the subsystem.</param>
            <returns>SupportedChannelInfo object associated with the specified channel.</returns>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannels.Item(System.Int32)">
             <summary>
             Returns the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object at the specified index ([index])
             of the <see cref="T:OpenLayers.DeviceCollection.SupportedChannels"/> object.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannels.Count">
            <summary>
            Returns the number of <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> objects in the SupportedChannels collection.
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SupportedChannelInfo">
            <summary>
            The SupportedChannelInfo class describes a specific channel of a subsystem. You 
            access a SupportedChannelInfo object using the <see cref="T:OpenLayers.DeviceCollection.SupportedChannels"/> class. 
            </summary>
            <remarks>
            When you get a subsystem of a specified type, the software automatically determines
            the number of available channels for the subsystem and creates a SupportedChannelInfo
            object for each channel, containing the following information:
            physical channel number, logical channel number, logical channel word, channel name,
            sensor gain, and sensor offset.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.Subsystem">
            <summary>
            Returns the subsystem object (<see cref="T:OpenLayers.DeviceCollection.AnalogInputSubsystem"/>,
             <see cref="T:OpenLayers.DeviceCollection.AnalogOutputSubsystem"/>, 
            that is associated with this channel.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.PhysicalChannelNumber">
            <summary>
            Returns the physical channel number that is associated with this channel. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.LogicalChannelNumber">
            <summary>
            Returns the zero-based logical channel number that is associated with this channel. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.Name">
            <summary>
            Gets and sets the name of the associated channel.  
            </summary>
            <remarks>
            Each SupportedChannelInfo object in a SupportedChannels collection object
            must have a unique name. By default, the channels have the following names,
            which you can modify, if you wish:
            For analog input channels, the channels are named Ain0, Ain1, and so on.
            For analog output channels, the channels are named Aout0, Aout1, and so on.
            For digital input channels, the channels are named Din0, Din1, and so on.
            For counter/timer channels, the channels are named CT0 Word 0, 
            CT0 Word 1, CT1 Word 0, CT1 Word 1, and so on.
            For quadrature decoder channels, the channels are named Quad0 Word 0, 
            Quad0 Word 1, Quad1 Word 0, Quad1 Word 1, and so on.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SubsystemType">
            <summary>
            Returns the type of subsystem (AnalogInput, AnalogOutput, DigitalInput,
            DigitalOutput, CounterTimer, or QuadratureDecoder) that is associated
            with this channel.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.LogicalChannelWord">
            <summary>
            For channels with multi-word data (such as a 32-bit counter), returns
            the zero-based word number that is associated with this channel. 
            For channels without multi-word data, returns -1. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorGain">
             <summary>
             Gets and sets the gain value to apply to the sensor that is connected to this channel.
             </summary>
             <remarks>
             By default, the sensor gain is 1.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.SensorOffset">
             <summary>
             Gets and sets the offset value to apply to the sensor that is connected to this channel.
             </summary>
             <remarks>
             By default, the sensor offset is 0.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.Coupling">
             <summary>
             Gets and sets the <see cref="T:OpenLayers.DeviceCollection.CouplingType"/> to apply to the channel.
             </summary>
             <remarks>
             By default, DC coupling is selected for all channels.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.ExcitationCurrentSource">
             <summary>
             Gets and sets the <see cref="T:OpenLayers.DeviceCollection.ExcitationCurrentSource"/> to apply to the channel.
             </summary>
             <remarks>
             By default, the excitation current source is disabled for all channels.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.ExcitationCurrentValue">
             <summary>
             Gets and sets the value of the excitation current source to apply to the channel.
             </summary>
             <remarks>
             This value is applicable only when the excitation current source is internal.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.SupportedChannelInfo.IOType">
            <summary>
            Gets the measurement <see cref="T:OpenLayers.DeviceCollection.IOType"/> that is supported by the channel. 
            </summary>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ChannelListEntry">
            <summary>
            A ChannelListEntry object encapsulates a physical channel connection that is
            associated with a specific subsystem.
            A <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> object is a collection of ChannelListEntry objects.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.ChannelListEntry.#ctor(OpenLayers.DeviceCollection.SupportedChannelInfo)">
            <summary>
            Creates and returns a ChannelListEntry object for a specified channel, based on the 
            <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> information for that channel. 
            </summary>
            <remarks>
            If you add or insert a channel into a ChannelList by physical channel number or name (using the 
            <see cref="M:OpenLayers.DeviceCollection.ChannelList.Add(System.Int32)"/> or 
            <see cref="M:OpenLayers.DeviceCollection.ChannelList.Insert(System.Int32,System.Int32)"/> methods), the ChannelListEntry
            object is automatically created and returned.
            </remarks>
            <param name="channelInfo">The <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object to use when 
            creating the ChannelListEntry object.</param>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.SubsystemType">
             <summary>
             Returns the subsystem type (AnalogInput, AnalogOutput, DigitalInput, DigitalOutput,
             CounterTimer, QuadratureDecoder, or Tachometer) for the ChannelListEntry object.
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.SensorGain">
            <summary>
             Returns the sensor gain value for the ChannelListEntry object.
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object associated with the channel. 
            <para>
             By default, the sensor gain is 1.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
             </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.SensorOffset">
             <summary>
             Returns the sensor offset value for the ChannelListEntry object.
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object associated with the channel. 
            <para>
             By default, the sensor offset is 0.
             The sensor gain and offset are used to scale a sample from raw counts to a
             value in the engineering units of the sensor. The scaling occurs in two steps.
             First, the raw count value is converted to prescaled voltage using the gain 
             applied to the input signal. Then, the prescaled voltage is scaled using the 
             following equation: y = mx + b, where y is the scaled sensor value, 
             m is the sensor gain, x is the prescaled value in voltage, and b is the 
             sensor offset. 
             </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.LogicalChannelNumber">
             <summary>
             Returns the zero-based logical channel number for the 
             ChannelListEntry object. 
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.LogicalChannelWord">
            <summary>
            For channels with multi-word data (such as a 32-bit counter), returns
            the zero-based word number of this ChannelListEntry object. For channels without
            multi-word data, returns -1. 
            </summary>
            <remarks>
             This information is included in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.PhysicalChannelNumber">
            <summary>
            Returns the physical channel number for the ChannelListEntry object. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.Gain">
            <summary>
            Gets and sets the gain to apply to the input signal of the associated ChannelListEntry object. 
            </summary>
            <remarks>
            The default value is 1. If the gain is not supported, the closest gain value that is supported by 
            the subsystem is applied to the channel. Performing a get on this
            property after a set will return the actual gain applied to the channel.
            </remarks>
            <example> 
            This example sets the gain of the channel at index 0 of the ChannelList to 2.
            <code language="cs">
            ainSS.ChannelList[0].Gain = 2;
            </code>
            <code language="vb">
            ainSS.ChannelList(0).Gain = 2
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.Inhibit">
            <summary>
            Gets and sets the inhibit state for the ChannelListEntry object. If True, the ChannelListEntry object 
            takes up an entry in the <see cref="T:OpenLayers.DeviceCollection.ChannelList"/> and is factored into the conversion time, 
            but data is not returned for the ChannelListEntry object. If False (the default value), data is returned for 
            the ChannelListEntry object.
            </summary>
            <example> 
            This example sets the inhibit value to True for the channel at index 0 of the ChannelList.
            <code language="cs">
            ainSS.ChannelList[0].Inhibit = 1;
            </code>
            <code language="vb">
            ainSS.ChannelList(0).Inhibit = 1
            </code>
            </example>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ChannelListEntry.Name">
             <summary>
             Gets the name of the channel that is associated with the ChannelListEntry object. 
             </summary>
             <remarks>
             This information is included in the <see cref="T:OpenLayers.DeviceCollection.SupportedChannelInfo"/> object associated with the channel. 
            </remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.Clock">
            <summary>
            The Clock class provides an interface for controlling the clock of a subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.Frequency">
            <summary>
            Gets and sets the frequency of the internal clock source.
            </summary>
            <remarks>
            The driver sets the frequency of the internal clock as close as possible
            to the value that you specified in the Frequency property. You can 
            determine the actual frequency that was set on the hardware by reading
            the value of the Frequency property after the subsystem has been 
            configured (using the <see cref="M:OpenLayers.DeviceCollection.SubsystemBase.Config"/> method).
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.Source">
            <summary>
            Gets and sets the current clock source (Internal or External).
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.ExtClockDivider">
            <summary>
            Gets and sets the current value of the external clock divider.
            </summary>
            <remarks>
            The external clock divider is used to determine the frequency of
            the external clock source. The frequency of the external clock input
            divided by the external clock divider determines the frequency of
            at which to pace the operation.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.SupportsInternalClock">
            <summary>
            Returns True if the subsystem supports an internal clock source; otherwise, returns False.
            </summary>
            <remarks>Specify the clock source using the <see cref="P:OpenLayers.DeviceCollection.Clock.Source"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.SupportsExternalClock">
            <summary>
            Returns True if the subsystem supports an external clock source; otherwise, returns False.
            </summary>
            <remarks>Specify the clock source using the <see cref="P:OpenLayers.DeviceCollection.Clock.Source"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.MinFrequency">
            <summary>
            Returns the minimum allowable internal clock frequency supported
            by the subsystem.
            </summary>
            <remarks>Set the frequency of the internal clock using the <see cref="P:OpenLayers.DeviceCollection.Clock.Frequency"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.MaxFrequency">
            <summary>
            Returns the maximum allowable internal clock frequency supported
            by the subsystem.
            </summary>
            <remarks>Set the frequency of the internal clock using the <see cref="P:OpenLayers.DeviceCollection.Clock.Frequency"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.MinExtClockDivider">
            <summary>
            Returns the minimum allowable external clock divider value supported
            by the subsystem.
            </summary>	
            <remarks>Set the external clock divider using the <see cref="P:OpenLayers.DeviceCollection.Clock.ExtClockDivider"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.MaxExtClockDivider">
            <summary>
            Returns the maximum allowable external clock divider value supported
            by the subsystem.
            </summary>
            <remarks>Set the external clock divider using the <see cref="P:OpenLayers.DeviceCollection.Clock.ExtClockDivider"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.BaseClockFrequency">
            <summary>
            Returns the frequency of the base clock for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Clock.SupportsSimultaneousClocking">
            <summary>
            Returns True if the subsystem supports simultaneous clocking.
            </summary>
            <remarks>
            Some subsystems allow you to read or update multiple channels on a single clock pulse. 
            This property allows you to determine whether multiple channels can be read or updated on a 
            single clock pulse.
            </remarks>	
        </member>
        <member name="T:OpenLayers.DeviceCollection.DeviceMgr">
            <summary>
            The DeviceMgr is a singleton class that is responsible for managing Open Layers devices in 
            the system and for assigning <see cref="T:OpenLayers.DeviceCollection.Device"/> objects. 
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.DeviceMgr.Get">
            <summary>
            Returns a DeviceMgr object.
            </summary>
            <returns>A DeviceMgr object.</returns>
            <remarks>
            You must call this method before you can perform any operation
            in the Open Layers for .NET Class Library.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.DeviceMgr.GetDevice(System.String)">
            <summary>
            Returns a <see cref="T:OpenLayers.DeviceCollection.Device"/> object for the specified device collection.
            </summary>
            <param name="deviceName">The name of the device collectoin as defined in the Open Layers Control Panel applet.</param>
            <returns>A <see cref="T:OpenLayers.DeviceCollection.Device"/> object.</returns>
            <remarks>
            You must get a <see cref="T:OpenLayers.DeviceCollection.Device"/> object for each Open Layers-compatible device collection that you want to use.
            </remarks>
        </member>
        <member name="M:OpenLayers.DeviceCollection.DeviceMgr.HardwareAvailable">
            <summary>
            Returns a Boolean indicating whether an Open Layers-compatible device collection is plugged into the system.
            </summary>
            <returns>Returns True if an Open Layers-compatible device collection is plugged into the
            system; otherwise, returns False.</returns>
        </member>
        <member name="M:OpenLayers.DeviceCollection.DeviceMgr.GetDeviceNames">
            <summary>
            Returns a list of all Open Layers-compatible device collections plugged into the system. 
            </summary>
            <returns>An array of strings with the active device collection names.</returns>
        </member>
        <member name="T:OpenLayers.DeviceCollection.ReferenceTrigger">
            <summary>
            The ReferenceTrigger class provides an interface for controlling the reference trigger of a subsystem. For devices that support a reference 
            trigger, pre-trigger data acquisition stops and post-trigger acquisition starts when the reference trigger event occurs. 
            Post-trigger acquisition stops when the number of samples you specify for the post-trigger scan count has been reached.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType">
            <summary>
            Gets and sets the reference trigger type (None, TTLPos, TTLNeg, DigitalEvent, ThresholdPos, or ThresholdNeg) 
            for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.Level">
            <summary>
            Gets and sets the threshold value for the reference trigger. By default, the threshold value is in voltage unless
            specified otherwise for the device; see the user's manual for your device for valid threshold value settings for the reference trigger.
            </summary>
            <remarks>This propery is valid only if TriggerType property is <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.ThresholdPos"/>
            or <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.ThresholdNeg"/> trigger type. The threshold level set by this property is
            the value after the gain is a applied to the threshold trigger channel. For example, if the voltage range of the
            subsystem is ±10 V, and the specified gain is 1, specify a threshold voltage level within ±10 V.
            Likewise, if the voltage range of the subsystem is ±10 V, and the specified gain is 10, specify a 
            threshold voltage level within ±1 V.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportedThresholdTriggerChannels">
            <summary>
            Returns an array containing the channels that can be used for ThresholdPos or ThresholdNeg <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/>s.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.ThresholdTriggerChannel">
            <summary>
            Gets and sets the number of the channel that the device monitors for the ThresholdPos or ThresholdNeg reference trigger event. 
            </summary>
            <remarks>This propery is valid only if the <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/> property is ThresholdPos or ThresholdNeg.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.PostTriggerScanCount">
            <summary>
            Gets and sets the samples per channel to acquire after the reference trigger occurs. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportsPostTriggerScanCount">
            <summary>
            Returns True if the subsystem supports acquiring a specified number of samples after the reference trigger occurs; 
            otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportsPosExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.TTLPos"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportsNegExternalTTLTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.TTLNeg"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportsPosThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.ThresholdPos"/> reference trigger type;
             otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportsNegThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.ThresholdNeg"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.DeviceCollection.ReferenceTrigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.ReferenceTrigger.SupportsDigitalEventTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.ReferenceTriggerType.DigitalEvent"/> reference trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the reference trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="T:OpenLayers.DeviceCollection.SimultaneousStart">
            <summary>
            The SimultaneousStart class provides an interface for simultaneously starting multiple subsystems.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SimultaneousStart.AddSubsystem(OpenLayers.DeviceCollection.SubsystemBase)">
            <summary>
            Adds a subsystem to the list of subsystems to simultaneously start. 
            </summary>
            <param name="subsystem">The subsystem to add to the simultaneous start list.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SimultaneousStart.RemoveSubsystem(OpenLayers.DeviceCollection.SubsystemBase)">
            <summary>
            Removes a subsystem from the list of subsystems to simultaneously start.
            </summary>
            <param name="subsystem">The subsystem to remove.</param>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SimultaneousStart.Clear">
            <summary>
            Removes all subsystems from the simultaneous start list.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SimultaneousStart.PreStart">
            <summary>
            Simultaneously prestarts all subsystems on the simultaneous start list.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SimultaneousStart.Start">
            <summary>
            Simultaneously starts all subsystems on the simultaneous start list.
            </summary>
        </member>
        <member name="M:OpenLayers.DeviceCollection.SimultaneousStart.GetSubsystemList">
            <summary>
            Returns an array of subsystems that are currently on the simultaneous start list.
            </summary>
            <returns>An array of subsystems that are currently on the simultaneous start list.</returns>
        </member>
        <member name="T:OpenLayers.DeviceCollection.Trigger">
            <summary>
            The Trigger class provides an interface for controlling how a subsystem is triggered. For devices that support a start trigger and a 
            reference trigger, the Trigger class is used to set up the start trigger, which starts pre-trigger data acquisition. Use the ReferenceTrigger
            class to control the reference trigger.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.TriggerType">
            <summary>
            Gets and sets the trigger type (Software, TTLPos, TTLNeg, DigitalEvent, ThresholdPos, or ThresholdNeg) 
            for the subsystem.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.PreTriggerSource">
            <summary>
            Gets and sets the pre-trigger source (Software, TTLPos, TTLNeg, DigitalEvent, 
            ThresholdPos, or ThresholdNeg) for the subsystem when using
            <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPreTrigger"/> or 
            <see cref="F:OpenLayers.DeviceCollection.DataFlow.ContinuousPrePostTrigger"/> mode. 
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.Level">
            <summary>
            Gets and sets the trigger threshold value. By default, the trigger threshold value is in voltage unless
            specified otherwise for the device; see the user's manual for your device for valid threshold value settings.
            </summary>
            <remarks>This propery is valid only if TriggerType property is <see cref="F:OpenLayers.DeviceCollection.TriggerType.ThresholdPos"/>
            or <see cref="F:OpenLayers.DeviceCollection.TriggerType.ThresholdNeg"/> trigger type. The threshold level set by this property is
            the value after the gain is a applied to the threshold trigger channel. For example, if the voltage range of the
            subsystem is ±10 V, and the specified gain is 1, specify a threshold voltage level within ±10 V.
            Likewise, if the voltage range of the subsystem is ±10 V, and the specified gain is 10, specify a 
            threshold voltage level within ±1 V.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportedThresholdTriggerChannels">
            <summary>
            Returns an array containing the channels that can be used for ThresholdPos or ThresholdNeg <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/>s.
            </summary>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.ThresholdTriggerChannel">
            <summary>
            Gets and sets the number of the channel that the device monitors for the ThresholdPos or ThresholdNeg trigger event. 
            </summary>
            <remarks>This propery is valid only if the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property is ThresholdPos or ThresholdNeg.
            </remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsSoftwareTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.Software"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsPosExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.TTLPos"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsNegExternalTTLTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.TTLNeg"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsSvPosExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.TTLPos"/> trigger type
            for a single-value operation; otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsSvNegExternalTTLTrigger">
            <summary>
            Return True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.TTLNeg"/> trigger type 
            for a single-value operation; otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsPosThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.ThresholdPos"/> trigger type;
             otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsNegThresholdTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.ThresholdNeg"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="P:OpenLayers.DeviceCollection.Trigger.SupportsDigitalEventTrigger">
            <summary>
            Returns True if the subsystem supports a <see cref="F:OpenLayers.DeviceCollection.TriggerType.DigitalEvent"/> trigger type; 
            otherwise, returns False.
            </summary>
            <remarks>Set the trigger type using the <see cref="P:OpenLayers.DeviceCollection.Trigger.TriggerType"/> property.</remarks>
        </member>
        <member name="T:OpenLayers.Personality.BoardPersonality">
            <summary>
            This class provides the interface to indvidual device personality using dynamic 
            linking to the winAPI personality dll.
            This class is using only if REV_8 is defined, otherwise the managed c++ personality.dll
            is used as an interface
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.CopyThread">
            <summary>
            Summary description for CopyThread.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtStream">
            <summary>
            DtStream encapsulates all of the asynchronous buffer i/o support.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.BufferDoneEventQueue">
            <summary>
            Queue of RawDataEventArgs
            </summary>
        </member>
        <member name="T:OpenLayers.Base.Device">
            <summary>
            A Device object encapsulates an Open Layers device and manages and distributes subsystems for the device.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.#ctor(System.String)">
            <summary>
            Returns a Device object for a specified Open Layers-compliant device. 
            </summary>
            <param name="deviceName">Name of the device to open and initialize.</param>
            <returns>The Device object for the specified device.
            </returns>
        </member>
        <member name="M:OpenLayers.Base.Device.Finalize">
            <summary>
            Finalize
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.Dispose">
            <summary>
            Terminates the connection to the device.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.Initialize(System.String)">
            <summary>
            Opens the device that is specified in deviceName.
            </summary>
            <param name="deviceName">The user visible hardware device name.</param>
        </member>
        <member name="M:OpenLayers.Base.Device.GetHardwareInfo">
            <summary>
            Returns hardware-specific information about the current device.
            </summary>
            <returns>The Board Id, Device Id, Product Id, and Vendor Id within the <see cref="T:OpenLayers.Base.HardwareInfo"/> structure.</returns>
            <remarks>
            This information is retrieved from the firmware of the device.</remarks>
        </member>
        <member name="M:OpenLayers.Base.Device.SetHardwareInfo(OpenLayers.Base.HardwareInfo,System.Int32)">
            <summary>
            Writes hardware specific info for the current device.
            </summary>
            <param name="hardwareInfo">Hardware information to apply to the device</param>
            <param name="key">fixed value that allows this function to be used</param>
        </member>
        <member name="M:OpenLayers.Base.Device.GetHardwareInfoInternal">
            <summary>
            Retrieves hardware specific info for the current device.
            </summary>
            <returns> Hardware information associated with the device</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.SetHardwareInfoInternal(OpenLayers.DtDevice.DtIoctl.HARDWARE_INFO)">
            <summary>
            Writes hardware specific info for the current device.
            </summary>
            <param name="hwi">Hardware information to apply to the device</param>
        </member>
        <member name="M:OpenLayers.Base.Device.SetCouplingHardwareParams(System.Byte[]@)">
            <summary>
            Writes coupling parameter(s) to EEPROM for the current device.
            Pass the error back up the chain.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.SetCurrentSourceHardwareParams(System.Byte[]@)">
            <summary>
            Writes current source parameter(s) to EEPROM for the current device.
            Pass the error back up the chain.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.GetCouplingHardwareParams(System.Byte[]@,System.Int32@)">
            <summary>
            Read coupling parameter(s) from EEPROM for the current device.
            Pass the error back up the chain.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.GetCurrentSourceHardwareParams(System.Byte[]@,System.Int32@)">
            <summary>
            Read current source parameter(s) from EEPROM for the current device.
            Pass the error back up the chain.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.Device.GetNumSubsystemElements(OpenLayers.Base.SubsystemType)">
            <summary>
            Returns the number of available subsystem elements for a given subsystem type.
            </summary>
            <param name="ssType">The type of subsystem.</param>
            <returns>The number of elements for the specified subsystem type.</returns>
            <remarks>
            Your device may support multiple instances, or elements, of the same subsystem type.
            Element numbering is zero-based; that is, the first instance of the subsystem is 
            called element 0, the second instance of the subsystem is called element 1, and so on.
            For example, if your device has two digital input ports, two subsystems of type 
            DigitalInput are available, differentiated as elements 0 and 1.
            </remarks>
        </member>
        <member name="M:OpenLayers.Base.Device.AnalogInputSubsystem(System.Int32)">
            <summary>
            Returns an <see cref="T:OpenLayers.Base.AnalogInputSubsystem"/> object.
            </summary>
            <param name="element">Instance of the analog input subsystem to open.</param>
            <returns>A new AnalogInputSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.DigitalInputSubsystem(System.Int32)">
            <summary>
            Returns a <see cref="T:OpenLayers.Base.DigitalInputSubsystem"/> object.
            </summary>
            <param name="element">Instance of the digital input subsystem to open.</param>
            <returns>A new DigitalInputSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.QuadratureDecoderSubsystem(System.Int32)">
            <summary>
            Returns a <see cref="T:OpenLayers.Base.QuadratureDecoderSubsystem"/> object.
            </summary>
            <param name="element">Instance of the quadrature decoder subsystem to open.</param>
            <returns>A new QuadratureDecoderSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.CounterTimerSubsystem(System.Int32)">
            <summary>
            Returns a <see cref="T:OpenLayers.Base.CounterTimerSubsystem"/> object.
            </summary>
            <param name="element">Instance of the counter/timer subsystem to open.</param>
            <returns>A new CounterTimerSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.TachSubsystem(System.Int32)">
            <summary>
            Returns a <see cref="T:OpenLayers.Base.TachSubsystem"/> object.
            </summary>
            <param name="element">Instance of the tachometer subsystem to open.</param>
            <returns>A new TachSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.AnalogOutputSubsystem(System.Int32)">
            <summary>
            Returns an <see cref="T:OpenLayers.Base.AnalogOutputSubsystem"/> object.
            </summary>
            <param name="element">Instance of the analog output subsystem to open.</param>
            <returns>A new AnalogOutputSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.DigitalOutputSubsystem(System.Int32)">
            <summary>
            Returns a <see cref="T:OpenLayers.Base.DigitalOutputSubsystem"/> object.
            </summary>
            <param name="element">Instance of the digital output subsystem to open.</param>
            <returns>A new DigitalOutputSubsystem object.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.DiagReadReg(System.UInt32,System.UInt32)">
            <summary>
            Returns the value of the specified register on the device. This is an advanced method and is not normally used.
            </summary>
            <param name="offset">Specifies the offset from the base address of the desired register to read.</param>
            <param name="sizeInBytes">The size of the register, in bytes.</param>
            <returns>The value read from the specified register.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.DiagWriteReg(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Writes a value to the specified register on the device. This is an advanced method and is not normally used.
            </summary>
            <param name="offset">Specifies the offset from the base address of the desired register to write to.</param>
            <param name="data">The value to write to the specified register.</param>
            <param name="sizeInBytes">The size of the register, in bytes.</param>
        </member>
        <member name="M:OpenLayers.Base.Device.DiagReadCalPot(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Returns the value of the specified calibration potentiometer register. This is an advanced method and is not normally used.
            </summary>
            <param name="chipNum">Chip number which contains the potentiometer.</param>
            <param name="potNum">Potentiometer number within the chip.</param>
            <param name="regNum">Register number within the potentiometer.</param>
            <returns>The value read from the specified register.</returns>
        </member>
        <member name="M:OpenLayers.Base.Device.DiagWriteCalPot(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Writes to the specified calibration potentiometer. This is an advanced method and is not normally used.
            </summary>
            <param name="chipNum">Chip number which contains the potentiometer.</param>
            <param name="potNum">Potentiometer number within the chip.</param>
            <param name="regNum">Register number within the pototentiometer.</param>
            <param name="dataVal">Value to write to the register.</param>
        </member>
        <member name="M:OpenLayers.Base.Device.ReadHardwareParamUint(OpenLayers.Base.SubsystemBase,OpenLayers.DtDevice.DtIoctl.HW_PARAM_TYPE)">
            <summary>
            Read hardware parameter from the driver.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Device.SimultaneousStart">
            <summary>
            Provides an interface to the SimultaneousStart object.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Device.DriverName">
            <summary>
            Returns the name of the driver for this device.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Device.DeviceName">
            <summary>
            Returns the user-defined name of the device. You can modify this name
            in the Open Layers Control Panel applet.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Device.BoardModelName">
            <summary>
            Returns the model name of the device.
            </summary>
            <remarks>
            DT9806 is an example of a model name.</remarks>
        </member>
        <member name="P:OpenLayers.Base.Device.DriverVersion">
            <summary>
            Returns the version of the driver for this device.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.Device.SupportsInternalAndExternalPower">
            <summary>
            Returns True if the device is capable of using both an internal and external power source; otherwise, returns False.
            </summary>		
        </member>
        <member name="P:OpenLayers.Base.Device.PowerSource">
            <summary>
            Returns whether the device is powered by the internal power source or an external power source.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl">
            <summary>
            OpenLayers Driver interface class
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.HardwareParamInterop">
            <summary>
            Device ioctl support for ReadHwParam and WriteHwParam - in singular form
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.HardwareInfoInterop">
            <summary>
            Device ioctl support for GetHardwareInfo
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.SingleFloatInterop">
            <summary>
            Device ioctl support for single float operations
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.DeviceConfigExInterop">
            <summary>
            Device ioctl support for extended configuration
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.SingleFloatsInterop">
            <summary>
            Device ioctl support for single floats operations
            </summary>		
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.SingleValueInterop">
            <summary>
            Device ioctl support for single value operations
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.ReadEventsInterop">
            <summary>
            Device ioctl support for read events operations
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.SingleValuesInterop">
            <summary>
            Device ioctl support for single values operations
            </summary>		
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.SetSingleValuesInterop">
            <summary>
            Device ioctl support for single values operations
            </summary>		
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.DeviceConfigInterop">
            <summary>
            Device ioctl support for subsystem Config
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.FlushInprocessInterop">
            <summary>
            Device ioctl support for FlushInprocessBuffer.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.RegisterInterop">
            <summary>
            Device ioctl support for DiagRegister operations
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIoctl.CalPotInfoInterop">
            <summary>
            Device ioctl support for DiagWriteCalPot and DiagReadCalPot operations
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DtIOWrapper">
            <summary>
            Wrapper class on Kernel32 device control API's
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DtEvent.eventPtr">
            <summary>
            Event memory pointer.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DtManualResetEvent.eventPtr">
            <summary>
            Event memory pointer.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DTOverlapped">
            <summary>
            Wrapper class controlling access to the OVERLAPPED structure and
            kernel32.dll function: GetOverlappedResult()
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.DTOverlapped.Finalize">
            <summary>
            Destructor. Free overlap memory.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.DTOverlapped.GetOverlappedResult(System.IntPtr,System.IntPtr,System.UInt32@,System.Boolean)">
            <summary>
            The GetOverlappedResult function retrieves the results 
            of an overlapped operation on the specified file, named 
            pipe, or communications device.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.ol">
            <summary>
            Overlap structure.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.memPtr">
            <summary>
            Pointer to overlap struct in memory.
            </summary>
        </member>
        <member name="M:OpenLayers.DtDevice.DTOverlapped.Get(System.UInt32@,System.Boolean)">
            <summary>
            Updates the class overlap structure (in memory).
            </summary>
            <returns>True if read update Successful.</returns>
        </member>
        <member name="P:OpenLayers.DtDevice.DTOverlapped.MemPtr">
            <summary>
            Get/Set the overlap structure memory pointer.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.DTOverlapped.OVERLAPPED">
            <summary>
            The OVERLAPPED structure contains information used in asynchronous I/O.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.OVERLAPPED.internalLow">
            <summary>
            Reserved for operating system use. 
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.OVERLAPPED.internalHigh">
            <summary>
            Reserved for operating system use.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.OVERLAPPED.offset">
            <summary>
            Specifies a file position at which to start the transfer. 
            The file position is a byte offset from the start of the file. 
            The calling process sets this member before calling the ReadFile 
            or WriteFile function. This member is ignored when reading from 
            or writing to named pipes and communications devices and should be zero.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.OVERLAPPED.offsetHigh">
            <summary>
            Specifies the high word of the byte offset at which to start the transfer. 
            This member is ignored when reading from or writing to named pipes and 
            communications devices and should be zero.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.DTOverlapped.OVERLAPPED.hEvent">
            <summary>
            Handle to an event set to the signaled state when the operation has 
            been completed. The calling process must set this member either to 
            zero or a valid event handle before calling any overlapped functions. 
            To create an event object, use the CreateEvent function. Functions 
            such as WriteFile set the event to the nonsignaled state before they 
            begin an I/O operation.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.InterruptOnChangeHandler">
            <summary>
            The InterruptOnChangeHandler delegate is called when the event InterruptOnChangeEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.InterruptOnChangeEventArgs"/> object that is 
            associated with the event InterruptOnChangeEvent.</param>	
            <remarks>
            The event InterruptOnChangeEvent is raised by some devices when a digital input line changes state.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.BufferDoneHandler">
             <summary>
             The BufferDoneHandler delegate is called when the event BufferDoneEvent occurs.
             </summary>
             <param name="sender">The subsystem that raised the event.</param>
             <param name="eventArgs">The <see cref="T:OpenLayers.Base.BufferDoneEventArgs"/> object that is 
             associated with the event BufferDoneEvent.</param>
             <remarks>
             For input operations, the event BufferDoneEvent is raised when the internal buffer of an 
             <see cref="T:OpenLayers.Base.OlBuffer"/> object has been 
             filled with post-trigger data. For output operations, this event is raised when all the data in
             the internal buffer of the OlBuffer object has been output. 
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.BufferReusedHandler">
            <summary>
            The BufferReusedHandler delegate is called when the event BufferReusedEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.BufferDoneEventArgs"/> object that is
            associated with the event BufferReusedEvent.</param>
        </member>
        <member name="T:OpenLayers.Base.DriverRunTimeErrorEventHandler">
            <summary>
            The DriverRunTimeErrorEventHandler delegate is called when the DriverRunTimeErrorEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.DriverRunTimeErrorEventArgs"/> object that is 
            associated with the DriverRunTimeErrorEvent.</param>
            <remarks>
            The DriverRunTimeErrorEvent occurs when the device driver detects one of the following error conditions during runtime:
            <para>
            FifoOverflow - The driver could not read data from the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in a FIFO overflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            FifoUnderflow - The driver could not write data to the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in FIFO underflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            DeviceOverClocked - The A/D clock (usually external clock) is running too fast on the device. To deal with this
            error, slow down the A/D clock.
            </para>
            <para>
            TriggerError - The driver detected a trigger on the device but did not act on it.
            </para>
            <para>
            DeviceError	- Generated by the driver due to a USB bus or hardware problem. To deal with this error,
            stop connecting/disconnecting USB devices while streaming data to them.
            </para>
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.QueueDoneHandler">
            <summary>
            The QueueDoneHandler delegate is called when the event QueueDoneEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.GeneralEventArgs"/> object that is 
            associated with the event QueueDoneEvent.</param>
            <remarks>
            The event QueueDoneEvent is raised when no <see cref="T:OpenLayers.Base.OlBuffer"/> objects are available
            on the queue and the operation stops. 
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.QueueStoppedHandler">
            <summary>
            The QueueStoppedHandler delegate is called when the event QueueStoppedEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.GeneralEventArgs"/> object that is 
            associated with the event QueueStoppedEvent.</param>
            <remarks>
            A QueueStoppedEvent is raised when Stop or Abort is called for a continuous analog I/O operation. 
            The event BufferDoneEvent is generated for the current buffer and for up to eight inprocess buffers before a QueueStoppedEvent event occurs.  
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.PreTriggerBufferDoneHandler">
             <summary>
             The PreTriggerBufferDoneHandler delegate is called when the event PreTriggerBufferDoneEvent occurs.
             </summary>
             <param name="sender">The subsystem that raised the event.</param>
             <param name="eventArgs">The <see cref="T:OpenLayers.Base.BufferDoneEventArgs"/> object that is
             associated with the event PreTriggerBufferDoneEvent.</param>
             <remarks>
             The event PreTriggerBufferDone is raised when the internal buffer of an 
             <see cref="T:OpenLayers.Base.OlBuffer"/> object is 
             filled with pre-trigger data (for an input operation only). 
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.IOCompleteHandler">
             <summary>
             The IOCompleteHandler delegate is called when the event IOCompleteEvent occurs.
             </summary>
             <param name="sender">The subsystem that raised the event.</param>
             <param name="eventArgs">The <see cref="T:OpenLayers.Base.IOCompleteEventArgs"/> object that is 
             associated with the event IOCompleteEvent.</param>
             <remarks>
             For analog input operations that use a reference trigger whose trigger type is something other than software (none),
             the event IOCompleteEvent is raised when the last post-trigger sample is copied into the user buffer. Devices
             that do not support a reference trigger will never receive this event for analog input operations.
             <para>
             For analog output operations, the event IOCompleteEvent is raised when the last data point has been output from 
             an analog output channel; in some cases, this event is raised well after the data is transferred from the buffer
             (and, therefore, well after the events BufferDoneEvent and QueueDoneEvents are raised). 
             </para>
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.GeneralFailureHandler">
            <summary>
            The GeneralFailureHandler delegate is called when the event GeneralFailureEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.GeneralEventArgs"/> object that is 
            associated with the event GeneralFailureEvent.</param>
            <remarks>
            The event GeneralFailureEvent is raised when a general library failure occurs.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.DeviceRemovedHandler">
            <summary>
            The DeviceRemovedHandler delegate is called when the event DeviceRemovedEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.GeneralEventArgs"/> object that is 
            associated with the event DeviceRemovedEvent.</param>
            <remarks>
            The event DeviceRemovedEvent is raised when a device is removed from your system while your application is running.
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.EventDoneHandler">
            <summary>
            The EventDoneHandler delegate is called when the event EventDoneEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.EventDoneEventArgs"/> object that is 
            associated with the event EventDoneEvent.</param>
            <remarks>
            The event EventDoneEvent is raised by some devices, such as the DT340, when a digital input line
            changes state or when an interval timer operation is complete
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.MeasureDoneHandler">
            <summary>
            The MeasureDoneHandler delegate is called when the event MeasureDoneEvent occurs.
            </summary>
            <param name="sender">The subsystem that raised the event.</param>
            <param name="eventArgs">The <see cref="T:OpenLayers.Base.MeasureDoneEventArgs"/> object that is
            associated with the event MeasureDoneEvent.</param>
            <remarks>
            The event MeasureDoneEvent is raised when a <see cref="F:OpenLayers.Base.CounterMode.Measure"/> operation is complete. 
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.EventMgr">
            <summary>
            The EventMgr class encapsulates the management of events initiated from the
            device driver or copy thread.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.BufferDoneEventArgs">
            <summary>
            A BufferDoneEventArgs object is passed to one of the following delegates when 
            the associated event occurs:
            <see cref="T:OpenLayers.Base.BufferDoneHandler"/> delegate when the event 
            BufferDoneEvent occurs or <see cref="T:OpenLayers.Base.PreTriggerBufferDoneHandler"/> delegate
            when the event PreTriggerBufferDoneEvent occurs.
            BufferDoneEventArgs contains the data that is associated with the event,
            including the subsystem that raised the event, the time stamp of when
            the event occurred, and the completed <see cref="T:OpenLayers.Base.OlBuffer"/> object.
            </summary>
            <remarks>
            For input operations, the event BufferDoneEvent is raised when the internal buffer of an
            <see cref="T:OpenLayers.Base.OlBuffer"/> object has been filled with post-trigger data. For output 
            operations, this event is raised when all the data in the internal buffer of an
            <see cref="T:OpenLayers.Base.OlBuffer"/> object has been output. 
            <para>
            If you stop an analog I/O operation, the event BufferDoneEvent is generated for the
            current OlBuffer object and for up to eight inprocess OlBuffer objects before a QueueStoppedEvent event occurs.
            </para> 
            </remarks>
        </member>
        <member name="T:OpenLayers.Base.GeneralEventArgs">
            <summary>
            GeneralEventArgs is the base class for all event data. GeneralEventArgs contains the data
            that is passed to all events, including the subsystem that raised the event, 
            and the time stamp of when the event occurred.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.GeneralEventArgs.DateTime">
            <summary>
            Returns the time stamp of when the associated event occurred.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.GeneralEventArgs.Subsystem">
            <summary>
            Returns the subsystem that raised the event.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BufferDoneEventArgs.OlBuffer">
            <summary>
            Returns the completed <see cref="T:OpenLayers.Base.OlBuffer"/>  object.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.IOCompleteEventArgs">
            <summary>
            An IOCompleteEventArgs object is passed to the <see cref="T:OpenLayers.Base.IOCompleteHandler"/> delegate when the event
            IOCompleteEvent occurs. IOCompleteEventArgs contains the data associated with the event IOCompleteEvent.
            For analog input operations, this includes the total number of samples per channel that were acquired from the
            time acquisition was started to the last post-trigger sample, and the subsystem that raised the event.
            For analog output operations, this is the subsystem that raised the event.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.IOCompleteEventArgs.LastSampleNumber">
            <summary>
            (For analog input operations only) returns the total number of samples per channel that were acquired from the
            time acquisition was started (with the start trigger) to the last post-trigger sample.  
            </summary>
        </member>
        <member name="T:OpenLayers.Base.EventDoneEventArgs">
            <summary>
            An EventDoneEventArgs object is passed to the <see cref="T:OpenLayers.Base.EventDoneHandler"/> delegate when the event
            EventDoneEvent occurs. EventDoneEventArgs contains the data that is 
            associated with the event EventDoneEvent, including the subsystem that
            raised the event and the time stamp of when the event occurred.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.EventDoneEventArgs.Data">
            <summary>
            Returns the data that is associated with the event EventDoneEvent. The meaning
            of this data depends on your device and the subsystem used. Refer to your
            device documentation for more information.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.InterruptOnChangeEventArgs">
            <summary>
            An InterruptOnChangeEventArgs object is passed to the <see cref="T:OpenLayers.Base.InterruptOnChangeHandler"/> delegate when the 
            event InterruptOnChangeEvent occurs. InterruptOnChangeEventArgs contains
            the data that is associated with the event InterruptOnChangeEvent, 
            including the subsystem that raised the event, the time stamp of when 
            the event occurred, the digital input lines that changed state, and the 
            current state of the digital input port. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.InterruptOnChangeEventArgs.NewValue">
            <summary>
            Returns the current value of the digital input port.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.InterruptOnChangeEventArgs.ChangedBits">
            <summary>
            Returns the digital input lines that changed state, causing the 
            event InterruptOnChangeEvent to occur.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.MeasureDoneEventArgs">
            <summary>
            A MeasureDoneEventArgs object is passed to the <see cref="T:OpenLayers.Base.MeasureDoneHandler"/> delegate when the event
            MeasureDoneEvent occurs. MeasureDoneEventArgs contains the
            data that is associated with the event MeasureDoneEvent, including
            the subsystem that raised the event, the time stamp of when the event
            occurred, and the count.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.MeasureDoneEventArgs.Count">
            <summary>
            Returns the number of internal clock pulses that were counted during 
            the measure period.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.DriverRunTimeErrorEventArgs">
            <summary>
            A DriverRunTimeErrorEventArgs object is passed to the <see cref="T:OpenLayers.Base.DriverRunTimeErrorEventHandler"/> delegate when 
            when the event DriverRunTimeErrorEvent occurs.
            DriverRunTimeErrorEventArgs contains the error/warning that is generated by the device driver, an error
            message that describes the error/warning, the subsystem that raised the event, 
            and the time stamp of when the event occurred.
            </summary>
            <remarks>
            The DriverRunTimeErrorEvent occurs when the device driver detects one of the following error conditions:
            <para>
            FifoOverflow - The driver could not read data from the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in a FIFO overflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            FifoUnderflow - The driver could not write data to the device FIFO (or Windows USB FIFO) fast enough, 
            resulting in FIFO underflow condition. To deal with this error, increase the buffer sizes, slow down the sampling rate, or stop other
            CPU-intensive running programs.
            </para>
            <para>
            DeviceOverClocked - The A/D clock (usually external clock) is running too fast on the device. To deal with this
            error, slow down the A/D clock.
            </para>
            <para>
            TriggerError - The driver detected a trigger on the device but did not act on it.
            </para>
            <para>
            DeviceError	- Generated by the driver due to a USB bus or hardware problem. To deal with this error,
            stop connecting/disconnecting USB devices while streaming data to them.
            </para>
            </remarks>
        </member>
        <member name="P:OpenLayers.Base.DriverRunTimeErrorEventArgs.ErrorCode">
            <summary>
            Returns the <see cref="T:OpenLayers.Base.ErrorCode"/> from the Open Layers for .NET Class Library that
            is associated with the driver error. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.DriverRunTimeErrorEventArgs.Message">
            <summary>
            Returns the descriptive string for the driver error.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.OlDelegates">
            <summary>
            Open Layers-specific delegate support.
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.SetupApiWrapper">
            <summary>
            Summary description for SetupApiWrapper.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.SP_DEVINFO_DATA.cbSize">
            <summary>Size of the structure, in bytes.</summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.SP_DEVINFO_DATA.ClassGuid">
            <summary>GUID of the device interface class.</summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.SP_DEVINFO_DATA.DevInst">
            <summary>Handle to this device instance.</summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.SP_DEVINFO_DATA.Reserved">
            <summary>Reserved; do not use.</summary>
        </member>
        <member name="T:OpenLayers.DtDevice.SetupApiWrapper.DIREG">
            <summary>
            KeyType values for SetupDiCreateDevRegKey, SetupDiOpenDevRegKey, and SetupDiDeleteDevRegKey.
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.DIREG.DIREG_DEV">
            <summary>
            Open/Create/Delete device key
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.DIREG.DIREG_DRV">
            <summary>
            Open/Create/Delete driver key
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.DIREG.DIREG_BOTH">
            <summary>
            Delete both driver and Device key
            </summary>
        </member>
        <member name="T:OpenLayers.DtDevice.SetupApiWrapper.DICS_FLAG">
            <summary>
            Values specifying the scope of a device property change
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.DICS_FLAG.DICS_FLAG_GLOBAL">
            <summary>
            make change in all hardware profiles
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.DICS_FLAG.DICS_FLAG_CONFIGSPECIFIC">
            <summary>
            make change in specified profile only
            </summary>
        </member>
        <member name="F:OpenLayers.DtDevice.SetupApiWrapper.DICS_FLAG.DICS_FLAG_CONFIGGENERAL">
            <summary>
            1 or more hardware profile-specific
            </summary>
        </member>
        <member name="T:OpenLayers.Base.BridgeSensorTeds">
            <summary>
            The BridgeSensorTeds class provides the properties for a bridge-based sensor that supports TEDS.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.TedsBase">
            <summary>
            The TedsBase class is an abstract base class that is accessible from 
            the following derived classes: <see cref="T:OpenLayers.Base.StrainGageTeds"/> and <see cref="T:OpenLayers.Base.BridgeSensorTeds"/>.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsBase.isTedsConfigured">
            <summary>
            
            </summary>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.CloseFileStream">
            <summary>
            Close virtual TEDS file
            </summary>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.CloseMemoryStream">
            <summary>
            Close virtual TEDS file
            </summary>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.ReadHardwareTeds">
            <summary>
             Reads data directly from a TEDS-compatible sensor that is associated with the connected channel.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.ReadVirtualTeds(System.String)">
            <summary>
            Reads TEDS data from a virtual TEDS file.
            </summary>
            <param name="fileName">The name of the file that contains the TEDS data.</param>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.GetCalChr5(System.Int32)">
            <summary>
            Read TEDS char 5 data into a string
            </summary>
            <param name="numBits"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.GetCalDate(System.Int32)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.GetConRes(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <param name="startValue"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.GetConRelRes(System.Int32,System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <param name="startValue"></param>
            <param name="tolerance"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.GetSingle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.ReadUInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.ReadInt(System.Int32)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.ReadChar(System.Int32)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <returns></returns>
        </member>
        <member name="M:OpenLayers.Base.TedsBase.ReadString(System.Int32)">
            <summary>
            
            </summary>
            <param name="numBits"></param>
            <returns></returns>
        </member>
        <member name="P:OpenLayers.Base.TedsBase.IsTedsConfigured">
            <summary>
            Returns True if the TEDS data stream is read successfully; otherwise, returns False.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TedsBase.ManufacturerId">
            <summary>
            Gets identifying information about the manufacturer of the strain gage from the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TedsBase.ModelNumber">
            <summary>
            Gets the model number of the strain gage from the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TedsBase.VersionNumber">
            <summary>
            Gets the version number of the strain gage from the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TedsBase.VersionLetter">
            <summary>
            Gets the version letter of the strain gage from the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.TedsBase.SerialNumber">
            <summary>
            Gets the serial number of the strain gage from the TEDS data for the channel.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.BridgeSensorTeds.#ctor(OpenLayers.Base.SupportedChannelInfo)">
            <summary>
            The BridgeSensorTeds class contains properties and methods that support TEDs sensors with 
            the BridgeSensor template id. 
            </summary>
            <param name="channelInfo"></param>
        </member>
        <member name="M:OpenLayers.Base.BridgeSensorTeds.ReadVirtualTeds(System.String)">
            <summary>
            Reads TEDS data from a virtual TEDS file.
            </summary>
            <param name="fileName">The name of the file that contains the TEDS data for the bridge-based sensor. </param>
        </member>
        <member name="M:OpenLayers.Base.BridgeSensorTeds.ReadHardwareTeds">
            <summary>
            Reads data directly from a TEDS-compatible sensor that is associated with the connected channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.ElectricalSignalType">
            <summary>
            Gets the electrical signal type that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MinPhysicalValue">
            <summary>
            Gets the negative full-scale value, in strain, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MaxPhysicalValue">
            <summary>
            Gets the positive full-scale value, in strain, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MinElecticalValue">
            <summary>
            Gets the minimum electrical output, in V/V, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MaxElecticalValue">
            <summary>
            Gets the maximum electrical output, in V/V, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.PhysicalMeasurand">
            <summary>
            Gets the physical Measureand (units) that were specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.BridgeType">
            <summary>
            Gets the type of bridge that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.BridgeResistance">
            <summary>
            Gets the initial (unstrained) gage resistance, in ohms, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.ResponseTime">
            <summary>
            Gets the response time, in seconds, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MinimumExcitationVoltage">
            <summary>
            Gets the minimum excitation voltage that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.NominalExcitationVoltage">
            <summary>
            Gets the nominal excitation voltage that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MaximumExcitationVoltage">
            <summary>
            Gets the maximum excitation voltage that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.CalDate">
            <summary>
            Gets the calibration date that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.CalInitials">
            <summary>
            Gets the calibration initials that were specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.CalibrationPeriod">
            <summary>
            Gets the calibration period that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.BridgeSensorTeds.MeasID">
            <summary>
            Gets the measurement location ID that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.GageType">
            <summary>
            Topology and rosette orientation of gage
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.SingleElement">
            <summary>
            Single element gage.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.TwoPoissonElements">
            <summary>
            Two elements with a Poisson arrangement.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.TwoOppositeSignedElements">
            <summary>
            Two elements, opposite sign (adjacent arms).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.TwoSameSignedElements">
            <summary>
            Two elements, same sign (opposite arms).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.TwoElementChevron">
            <summary>
            Two elements, 45° Chevron (torque or shear) arrangement.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.FourSameSignElementsPoisson">
            <summary>
            Four elements, Poisson strains of same sign in opposite arms.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.FourOppositeSignedElements">
            <summary>
            Four elements, Poisson strains of opposite sign in adjacent arms.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.FourUniaxialElements">
            <summary>
            Four elements, equal strains of opposite sign in adjacent arms.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.FourElementDualChevron">
            <summary>
            Four elements, 45° Chevron (torque or shear) arrangement.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.TeeRosetteGrid1_0Degrees">
            <summary>
            Tee Rosette grid 1 or a (0°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.TeeRosetteGrid2_90Degrees">
            <summary>
            Tee Rosette grid 2 or b (90°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.DeltaRosetteGrid1_0Degrees">
            <summary>
            Delta Rosette grid 1 or a (0°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.DeltaRosetteGrid2_60Degrees">
            <summary>
            Delta Rosette grid 2 or b (60°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.DeltaRosetteGrid3_120Degrees">
            <summary>
            Delta Rosette grid 3 or c (120°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.RectangularRosetteGrid1_0Degrees">
            <summary>
            Rectangular Rosette grid 1 or a (0°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.RectangularRosetteGrid2_45Degrees">
            <summary>
            Rectangular Rosette grid 2 or a (45°).
            </summary>
        </member>
        <member name="F:OpenLayers.Base.GageType.RectangularRosetteGrid3_90Degrees">
            <summary>
            Rectangular Rosette grid 3 or a (90°).
            </summary>
        </member>
        <member name="T:OpenLayers.Base.StrainGageTeds">
            <summary>
            The StrainGageTeds class provides the properties and methods that support TEDS for strain gages.
            </summary>
        </member>
        <member name="M:OpenLayers.Base.StrainGageTeds.#ctor(OpenLayers.Base.SupportedChannelInfo)">
            <summary>
            The StrainGageTeds class contains properties and methods that support TEDs sensors with the
            StrainGage template id. 
            </summary>
            <param name="channelInfo"></param>
        </member>
        <member name="M:OpenLayers.Base.StrainGageTeds.ReadVirtualTeds(System.String)">
            <summary>
            Reads TEDS data from a virtual TEDS file.
            </summary>
            <param name="fileName">The name of the file that contains the TEDS data for the strain gage.</param>
        </member>
        <member name="M:OpenLayers.Base.StrainGageTeds.ReadHardwareTeds">
            <summary>
            Reads data directly from a TEDS-compatible sensor that is associated with the connected channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.ElectricalSignalType">
            <summary>
            Gets the electrical signal type that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.MinPhysicalValue">
            <summary>
            Gets the negative full-scale value, in strain, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.MaxPhysicalValue">
            <summary>
            Gets the positive full-scale value, in strain, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.MinElecticalValue">
            <summary>
            Gets the minimum electrical output, in V/V, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.MaxElecticalValue">
            <summary>
            Gets the maximum electrical output, in V/V, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.GageType">
            <summary>
            Gets the type of gage that was specified in the TEDS data for the channel. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.GageFactor">
            <summary>
            Gets the gage factor, or sensitivity, of the strain gage that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.TransverseSensitivity">
            <summary>
            Gets the transverse sensitivity, in percentage, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.ZeroOffset">
            <summary>
            Gets the zero offset value after installation, in V/V, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.PoissonCoefficient">
            <summary>
            Gets the Poisson coefficient after installation that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.YoungModulus">
            <summary>
            Gets the Young’s modulus, or measure of the stiffness of the material, in MPa, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.GageArea">
            <summary>
            Gets the area of each gage element, in mm², that was specified in the TEDS data for the channel. 
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.BridgeType">
            <summary>
            Gets the type of bridge (Full Bridge, Half Bridge, or Quarter Bridge) that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.GageResistance">
            <summary>
            Gets the initial (unstrained) gage resistance, in ohms, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.ResponseTime">
            <summary>
            Gets the response time, in seconds, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.NominalExcitationVoltage">
            <summary>
            Gets the nominal excitation voltage, in voltage, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.MaximumExcitationVoltage">
            <summary>
            Gets the maximum excitation voltage, in voltage, that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.CalDate">
            <summary>
            Gets the calibration date that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.CalInitials">
            <summary>
            Gets the calibration initials that were specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.CalibrationPeriod">
            <summary>
            Gets the calibration period that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="P:OpenLayers.Base.StrainGageTeds.MeasID">
            <summary>
            Gets the measurement location ID that was specified in the TEDS data for the channel.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.TedsTemplateId">
            <summary>
            An identification number at the beginning of each template that identifies the template.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsTemplateId.NotDefined">
            <summary>
            No TEDS template associated with the channel.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsTemplateId.BridgeSensors">
            <summary>
            ID of a TEDs template for a bridge-based sensor.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsTemplateId.StrainGage">
            <summary>
            ID of a TEDS template for a strain gage.
            </summary>
        </member>
        <member name="T:OpenLayers.Base.TedsBridgeType">
            <summary>
            Bridge types as defined by TEDS.
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsBridgeType.Quarter">
            <summary>
            Quarter Bridge
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsBridgeType.Half">
            <summary>
            Half Bridge
            </summary>
        </member>
        <member name="F:OpenLayers.Base.TedsBridgeType.Full">
            <summary>
            Full Bridge
            </summary>
        </member>
        <member name="T:OpenLayers.Base.PhysicalMeasurandUnits">
            <summary>
            Physical Measurand (Units)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Temperature_Kelvin">
            <summary>
            Temperature (Kelvin)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Temperature_Celsius">
            <summary>
            Temperature (Celsius)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Strain">
            <summary>
            Strain
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Microstrain">
            <summary>
            Microstrain
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Newton">
            <summary>
            Force/Weight (Newton)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Pounds">
            <summary>
            Force/Weight (pounds)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.kilogramForcePerKilopound">
            <summary>
            Force/Weight (kilogram-force/kilopound)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Acceleration_m_ss">
            <summary>
            Acceleration (m/s²)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Acceleration_g">
            <summary>
            Acceleration (g)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Torque_Nm_Radian">
            <summary>
            Torque (Nm/radian)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Torque_Nm">
            <summary>
            Torque (Nm)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Torque_oz_in">
            <summary>
            Torque (oz-in)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Pressure_Pascal">
            <summary>
            Pressure (Pascal)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Pressure_PSI">
            <summary>
            Pressure (PSI)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Mass_Kg">
            <summary>
            Mass (kg)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Mass_g">
            <summary>
            Mass (g)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Distance_m">
            <summary>
            Distance (m)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Distance_mm">
            <summary>
            Distance (mm)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Distance_inches">
            <summary>
            Distance (inches)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Velocity_m_s">
            <summary>
            Velocity (m/s)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Velocity_mph">
            <summary>
            Velocity (mph)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Velocity_fps">
            <summary>
            Velocity (fps)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.AngularPosition_radian">
            <summary>
            Angular Position (radian)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.AngularPosition_degrees">
            <summary>
            Angular Position (degrees)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.RotationalVelocity_radian_s">
            <summary>
            Rotational Velocity (radian/s)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.RotationalVelocity_rpm">
            <summary>
            Rotational Velocity (rpm)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Frequency">
            <summary>
            Frequency
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Concentration_gram_liter">
            <summary>
            Concentration (gram/liter)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Concentration_kg_liter">
            <summary>
            Concentration (kg/liter)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.MolarConcentration_mole_m3">
            <summary>
            Molar Concentration (mole/m³)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.MolarConcentration_mole_l">
            <summary>
            Molar Concentration (mole/l)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricConcentration_m3_m3">
            <summary>
            Volumetric Concentration (m³/m³)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricConcentration_l_l">
            <summary>
            Volumetric Concentration (l/l)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.MassFlow">
            <summary>
            Mass Flow
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricFlow_m3_s">
            <summary>
            Volumetric Flow (m³/s)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricFlow_m3_hr">
            <summary>
            Volumetric Flow (m³/hr)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricFlow_gpm">
            <summary>
            Volumetric Flow (gpm)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricFlow_cfm">
            <summary>
            Volumetric Flow (cfm)
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.VolumetricFlow_l_min">
            <summary>
            Volumetric Flow (l/min)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.RelativeHumidity">
            <summary>
            Relative Humidity
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Ratio_percent">
            <summary>
            Ratio (percent)
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Voltage">
            <summary>
            Voltage
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.RmsVoltage">
            <summary>
            RMS Voltage
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Current">
            <summary>
            Current
            </summary>
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.RmsCurrent">
            <summary>
            RMS Current
            </summary> 
        </member>
        <member name="F:OpenLayers.Base.PhysicalMeasurandUnits.Power_Watts">
            <summary>
            Power (Watts)
            </summary>
            
        </member>
    </members>
</doc>
